# Copyright 2021 by LunaSec (owned by Refinery Labs, Inc)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the workflow will run
on:
  pull_request:
    branches: ['**', '**']
    paths-ignore:
      - .yarn/**
      - lunatrace/**

  push:
    branches: [master]
    paths-ignore:
      - .yarn/**
      - lunatrace/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: 'false'

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    strategy:
      matrix:
        merge: ["merged", "not-merged"]
        lockfile: ["lockfile"] #,"no-lockfile"]
        exclude:
          - merge: "merged"
            lockfile: "no-lockfile"

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        lfs: true

    - name: Setup Branch
      uses: ./.github/workflows/composite/merge-branch
      if: ${{ matrix.merge == 'merged' }}

    - name: Setup Environment
      uses: ./.github/workflows/composite/setup-docker-ci

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled != 'false' }}
      timeout-minutes: 15

    - uses: actions/setup-node@v2
      with:
        node-version: '16'

#    - name: Delete and Regenerate Lockfile
#      if: ${{ matrix.lockfile == 'no-lockfile' }}
#      run: rm yarn.lock && CI="" yarn install #currently broken

#    - uses: actions/setup-go@v2
#      with:
#        go-version: '^1.17.1'
#
#    # Cache the license checking tool
#    - uses: actions/cache@v2
#      with:
#        path: |
#          tools/license-checker
#        key: ${{ runner.os }}-modules-${{ hashFiles('tools/license-checker/**') }}
#
#    - name: Install License Checker
#      working-directory: tools/license-checker/
#      run: ./install-skywalking-eyes.sh
#
#    - name: Check License Headers
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      run: npm run license:check

    - name: Use CLI Container with docker.sock mounted to launch all other containers
      run: docker run -v /var/run/docker.sock:/var/run/docker.sock -e HOST_MACHINE_PWD=$(pwd) repo_lunasec-cli start --no-sudo --local-build --env=tests --verbose

    - name: docker logs
      if: ${{ always()}}
      run: .github/print-docker-logs.sh
      shell: bash

    - name: docker compose logs
      if: ${{ always() }}
      run: docker run -v /var/run/docker.sock:/var/run/docker.sock -e HOST_MACHINE_PWD=$(pwd) repo_lunasec-cli start --no-sudo --local-build --show-logs --env=tests

    - name: Warn on lockfile failure
      if: ${{ job.status == 'failure' }}
      run: echo "::warning  title=lockfile-check::Building without a lockfile failed"

#    - uses: actions/upload-artifact@v2
#      if: ${{ always() && steps.job-canceller.outputs.cancelled == 'false' }}
#      with:
#        name: cypress-recording
#        path: /videos/secure_components_spec.ts.mp4

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: PR Build ${{ github.head_ref }} ${{ job.status }}
        SLACK_COLOR: ${{ job.status }}

  golang-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        merge: [ "merged", "not-merged" ]
        lockfile: [ "lockfile" ] #,"no-lockfile"]
        exclude:
          - merge: "merged"
            lockfile: "no-lockfile"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Branch
        uses: ./.github/workflows/composite/merge-branch
        if: ${{ matrix.merge == 'merged' }}

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.1'

      # TODO: move this into docker, using the same container that the dedicated tokenizer uses
      - name: Go Tests
        run: yarn run test:unit:go

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: PR Build ${{ github.head_ref }} ${{ job.status }}
          SLACK_COLOR: ${{ job.status }}
