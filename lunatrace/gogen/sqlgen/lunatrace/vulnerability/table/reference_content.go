//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ReferenceContent = newReferenceContentTable("vulnerability", "reference_content", "")

type referenceContentTable struct {
	postgres.Table

	//Columns
	ID                  postgres.ColumnString
	ReferenceID         postgres.ColumnString
	Title               postgres.ColumnString
	Content             postgres.ColumnString
	NormalizedContent   postgres.ColumnString
	ContentType         postgres.ColumnString
	LastSuccessfulFetch postgres.ColumnTimestampz
	ParsedContent       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReferenceContentTable struct {
	referenceContentTable

	EXCLUDED referenceContentTable
}

// AS creates new ReferenceContentTable with assigned alias
func (a ReferenceContentTable) AS(alias string) *ReferenceContentTable {
	return newReferenceContentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReferenceContentTable with assigned schema name
func (a ReferenceContentTable) FromSchema(schemaName string) *ReferenceContentTable {
	return newReferenceContentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReferenceContentTable with assigned table prefix
func (a ReferenceContentTable) WithPrefix(prefix string) *ReferenceContentTable {
	return newReferenceContentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReferenceContentTable with assigned table suffix
func (a ReferenceContentTable) WithSuffix(suffix string) *ReferenceContentTable {
	return newReferenceContentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReferenceContentTable(schemaName, tableName, alias string) *ReferenceContentTable {
	return &ReferenceContentTable{
		referenceContentTable: newReferenceContentTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newReferenceContentTableImpl("", "excluded", ""),
	}
}

func newReferenceContentTableImpl(schemaName, tableName, alias string) referenceContentTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		ReferenceIDColumn         = postgres.StringColumn("reference_id")
		TitleColumn               = postgres.StringColumn("title")
		ContentColumn             = postgres.StringColumn("content")
		NormalizedContentColumn   = postgres.StringColumn("normalized_content")
		ContentTypeColumn         = postgres.StringColumn("content_type")
		LastSuccessfulFetchColumn = postgres.TimestampzColumn("last_successful_fetch")
		ParsedContentColumn       = postgres.StringColumn("parsed_content")
		allColumns                = postgres.ColumnList{IDColumn, ReferenceIDColumn, TitleColumn, ContentColumn, NormalizedContentColumn, ContentTypeColumn, LastSuccessfulFetchColumn, ParsedContentColumn}
		mutableColumns            = postgres.ColumnList{ReferenceIDColumn, TitleColumn, ContentColumn, NormalizedContentColumn, ContentTypeColumn, LastSuccessfulFetchColumn, ParsedContentColumn}
	)

	return referenceContentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ReferenceID:         ReferenceIDColumn,
		Title:               TitleColumn,
		Content:             ContentColumn,
		NormalizedContent:   NormalizedContentColumn,
		ContentType:         ContentTypeColumn,
		LastSuccessfulFetch: LastSuccessfulFetchColumn,
		ParsedContent:       ParsedContentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
