//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ReleaseDependency = newReleaseDependencyTable("package", "release_dependency", "")

type releaseDependencyTable struct {
	postgres.Table

	//Columns
	ID                  postgres.ColumnString
	ReleaseID           postgres.ColumnString
	DependencyPackageID postgres.ColumnString
	DependencyReleaseID postgres.ColumnString
	PackageName         postgres.ColumnString
	PackageVersionQuery postgres.ColumnString
	IsDev               postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReleaseDependencyTable struct {
	releaseDependencyTable

	EXCLUDED releaseDependencyTable
}

// AS creates new ReleaseDependencyTable with assigned alias
func (a ReleaseDependencyTable) AS(alias string) *ReleaseDependencyTable {
	return newReleaseDependencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReleaseDependencyTable with assigned schema name
func (a ReleaseDependencyTable) FromSchema(schemaName string) *ReleaseDependencyTable {
	return newReleaseDependencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReleaseDependencyTable with assigned table prefix
func (a ReleaseDependencyTable) WithPrefix(prefix string) *ReleaseDependencyTable {
	return newReleaseDependencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReleaseDependencyTable with assigned table suffix
func (a ReleaseDependencyTable) WithSuffix(suffix string) *ReleaseDependencyTable {
	return newReleaseDependencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReleaseDependencyTable(schemaName, tableName, alias string) *ReleaseDependencyTable {
	return &ReleaseDependencyTable{
		releaseDependencyTable: newReleaseDependencyTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newReleaseDependencyTableImpl("", "excluded", ""),
	}
}

func newReleaseDependencyTableImpl(schemaName, tableName, alias string) releaseDependencyTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		ReleaseIDColumn           = postgres.StringColumn("release_id")
		DependencyPackageIDColumn = postgres.StringColumn("dependency_package_id")
		DependencyReleaseIDColumn = postgres.StringColumn("dependency_release_id")
		PackageNameColumn         = postgres.StringColumn("package_name")
		PackageVersionQueryColumn = postgres.StringColumn("package_version_query")
		IsDevColumn               = postgres.BoolColumn("is_dev")
		allColumns                = postgres.ColumnList{IDColumn, ReleaseIDColumn, DependencyPackageIDColumn, DependencyReleaseIDColumn, PackageNameColumn, PackageVersionQueryColumn, IsDevColumn}
		mutableColumns            = postgres.ColumnList{ReleaseIDColumn, DependencyPackageIDColumn, DependencyReleaseIDColumn, PackageNameColumn, PackageVersionQueryColumn, IsDevColumn}
	)

	return releaseDependencyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ReleaseID:           ReleaseIDColumn,
		DependencyPackageID: DependencyPackageIDColumn,
		DependencyReleaseID: DependencyReleaseIDColumn,
		PackageName:         PackageNameColumn,
		PackageVersionQuery: PackageVersionQueryColumn,
		IsDev:               IsDevColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
