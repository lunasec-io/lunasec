//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ContentEmbedding = newContentEmbeddingTable("package", "content_embedding", "")

type contentEmbeddingTable struct {
	postgres.Table

	//Columns
	ID                 postgres.ColumnString
	ContentHash        postgres.ColumnString
	ReferenceContentID postgres.ColumnString
	Content            postgres.ColumnString
	Embedding          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContentEmbeddingTable struct {
	contentEmbeddingTable

	EXCLUDED contentEmbeddingTable
}

// AS creates new ContentEmbeddingTable with assigned alias
func (a ContentEmbeddingTable) AS(alias string) *ContentEmbeddingTable {
	return newContentEmbeddingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContentEmbeddingTable with assigned schema name
func (a ContentEmbeddingTable) FromSchema(schemaName string) *ContentEmbeddingTable {
	return newContentEmbeddingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContentEmbeddingTable with assigned table prefix
func (a ContentEmbeddingTable) WithPrefix(prefix string) *ContentEmbeddingTable {
	return newContentEmbeddingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContentEmbeddingTable with assigned table suffix
func (a ContentEmbeddingTable) WithSuffix(suffix string) *ContentEmbeddingTable {
	return newContentEmbeddingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContentEmbeddingTable(schemaName, tableName, alias string) *ContentEmbeddingTable {
	return &ContentEmbeddingTable{
		contentEmbeddingTable: newContentEmbeddingTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newContentEmbeddingTableImpl("", "excluded", ""),
	}
}

func newContentEmbeddingTableImpl(schemaName, tableName, alias string) contentEmbeddingTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		ContentHashColumn        = postgres.StringColumn("content_hash")
		ReferenceContentIDColumn = postgres.StringColumn("reference_content_id")
		ContentColumn            = postgres.StringColumn("content")
		EmbeddingColumn          = postgres.StringColumn("embedding")
		allColumns               = postgres.ColumnList{IDColumn, ContentHashColumn, ReferenceContentIDColumn, ContentColumn, EmbeddingColumn}
		mutableColumns           = postgres.ColumnList{ContentHashColumn, ReferenceContentIDColumn, ContentColumn, EmbeddingColumn}
	)

	return contentEmbeddingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		ContentHash:        ContentHashColumn,
		ReferenceContentID: ReferenceContentIDColumn,
		Content:            ContentColumn,
		Embedding:          EmbeddingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
