- name: lunatrace-custom
  definition:
    url_from_env: REMOTE_SCHEMA_URL
    timeout_seconds: 20
    customization:
      type_names:
        mapping:
          JSON: jsonb
          UUID: uuid
    forward_client_headers: true
  comment: ""
  permissions:
    - role: user
      definition:
        schema: |
          type AuthenticatedRepoCloneUrlOutput {
            url: String
          }
          scalar JSON
          type Mutation {
            presignManifestUpload(project_id: UUID!): PresignedUrlResponse
          }
          type PresignedUrlResponse {
            bucket: String!
            headers: JSON!
            key: String!
            url: String!
          }
          type Query {
            authenticatedRepoCloneUrl(repoGithubId: Int!): AuthenticatedRepoCloneUrlOutput
            fakeQueryToHackHasuraBeingABuggyMess: String
            sbomUrl(buildId: UUID!): String
          }
          type SbomUploadUrlOutput {
            error: Boolean!
            uploadUrl: UploadUrl
          }
          scalar UUID
          type UploadUrl {
            headers: JSON!
            url: String!
          }
    - role: service
      definition:
        schema: |
          type AuthenticatedRepoCloneUrlOutput {
            url: String
          }
          scalar JSON
          type Mutation {
            presignManifestUpload(project_id: UUID!): PresignedUrlResponse
          }
          type PresignedUrlResponse {
            bucket: String!
            headers: JSON!
            key: String!
            url: String!
          }
          type Query {
            authenticatedRepoCloneUrl(repoGithubId: Int!): AuthenticatedRepoCloneUrlOutput
            fakeQueryToHackHasuraBeingABuggyMess: String
            presignSbomUpload(orgId: UUID!, buildId: UUID!): SbomUploadUrlOutput
            sbomUrl(buildId: UUID!): String
          }
          input SbomUploadUrlInput {
            orgId: UUID!
            projectId: UUID!
          }
          type SbomUploadUrlOutput {
            error: Boolean!
            uploadUrl: UploadUrl
          }
          scalar UUID
          type UploadUrl {
            headers: JSON!
            url: String!
          }
    - role: cli
      definition:
        schema: |
          scalar JSON
          type Query {
            presignSbomUpload(orgId: UUID!, buildId: UUID!): SbomUploadUrlOutput
          }
          type SbomUploadUrlOutput {
            error: Boolean!
            uploadUrl: UploadUrl
          }
          scalar UUID
          type UploadUrl {
            headers: JSON!
            url: String!
          }
  remote_relationships:
    - relationships:
        - definition:
            to_source:
              field_mapping:
                id: vulnerability_id
              relationship_type: array
              source: lunatrace
              table:
                name: ignored_vulnerabilities
                schema: public
          name: ignored_vulnerabilities
      type_name: BuildData_Vulnerability
