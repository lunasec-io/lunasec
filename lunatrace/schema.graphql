schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

type AuthenticatedRepoCloneUrlOutput {
  url: String
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type PresignedUrlResponse {
  bucket: String!
  headers: jsonb!
  key: String!
  url: String!
}

type SbomUploadUrlOutput {
  error: Boolean!
  uploadUrl: UploadUrl
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type UploadUrl {
  headers: jsonb!
  url: String!
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

scalar affected_range_type

"""
Boolean expression to compare columns of type "affected_range_type". All fields are combined with logical 'AND'.
"""
input affected_range_type_comparison_exp {
  _eq: affected_range_type
  _gt: affected_range_type
  _gte: affected_range_type
  _in: [affected_range_type!]
  _is_null: Boolean
  _lt: affected_range_type
  _lte: affected_range_type
  _neq: affected_range_type
  _nin: [affected_range_type!]
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""DEPRECATED: old dependency tree"""
type build_dependency_relationship {
  """An object relationship"""
  build: builds!
  build_id: uuid!

  """An object relationship"""
  depended_by_relationship: build_dependency_relationship
  depended_by_relationship_id: uuid
  id: uuid!
  labels(
    """JSON select path"""
    path: String
  ): jsonb!
  project_path: String!
  range: String!

  """An object relationship"""
  release: package_release!
  release_id: uuid!
}

"""
order by aggregate values of table "build_dependency_relationship"
"""
input build_dependency_relationship_aggregate_order_by {
  count: order_by
  max: build_dependency_relationship_max_order_by
  min: build_dependency_relationship_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input build_dependency_relationship_append_input {
  labels: jsonb
}

"""
input type for inserting array relation for remote table "build_dependency_relationship"
"""
input build_dependency_relationship_arr_rel_insert_input {
  data: [build_dependency_relationship_insert_input!]!

  """upsert condition"""
  on_conflict: build_dependency_relationship_on_conflict
}

"""
Boolean expression to filter rows from the table "build_dependency_relationship". All fields are combined with a logical 'AND'.
"""
input build_dependency_relationship_bool_exp {
  _and: [build_dependency_relationship_bool_exp!]
  _not: build_dependency_relationship_bool_exp
  _or: [build_dependency_relationship_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  depended_by_relationship: build_dependency_relationship_bool_exp
  depended_by_relationship_id: uuid_comparison_exp
  id: uuid_comparison_exp
  labels: jsonb_comparison_exp
  project_path: String_comparison_exp
  range: String_comparison_exp
  release: package_release_bool_exp
  release_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "build_dependency_relationship"
"""
enum build_dependency_relationship_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  build_dependency_relationship_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input build_dependency_relationship_delete_at_path_input {
  labels: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input build_dependency_relationship_delete_elem_input {
  labels: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input build_dependency_relationship_delete_key_input {
  labels: String
}

"""
input type for inserting data into table "build_dependency_relationship"
"""
input build_dependency_relationship_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  depended_by_relationship: build_dependency_relationship_obj_rel_insert_input
  depended_by_relationship_id: uuid
  id: uuid
  labels: jsonb
  project_path: String
  range: String
  release: package_release_obj_rel_insert_input
  release_id: uuid
}

"""
order by max() on columns of table "build_dependency_relationship"
"""
input build_dependency_relationship_max_order_by {
  build_id: order_by
  depended_by_relationship_id: order_by
  id: order_by
  project_path: order_by
  range: order_by
  release_id: order_by
}

"""
order by min() on columns of table "build_dependency_relationship"
"""
input build_dependency_relationship_min_order_by {
  build_id: order_by
  depended_by_relationship_id: order_by
  id: order_by
  project_path: order_by
  range: order_by
  release_id: order_by
}

"""
response of any mutation on the table "build_dependency_relationship"
"""
type build_dependency_relationship_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [build_dependency_relationship!]!
}

"""
input type for inserting object relation for remote table "build_dependency_relationship"
"""
input build_dependency_relationship_obj_rel_insert_input {
  data: build_dependency_relationship_insert_input!

  """upsert condition"""
  on_conflict: build_dependency_relationship_on_conflict
}

"""
on_conflict condition type for table "build_dependency_relationship"
"""
input build_dependency_relationship_on_conflict {
  constraint: build_dependency_relationship_constraint!
  update_columns: [build_dependency_relationship_update_column!]! = []
  where: build_dependency_relationship_bool_exp
}

"""
Ordering options when selecting data from "build_dependency_relationship".
"""
input build_dependency_relationship_order_by {
  build: builds_order_by
  build_id: order_by
  depended_by_relationship: build_dependency_relationship_order_by
  depended_by_relationship_id: order_by
  id: order_by
  labels: order_by
  project_path: order_by
  range: order_by
  release: package_release_order_by
  release_id: order_by
}

"""primary key columns input for table: build_dependency_relationship"""
input build_dependency_relationship_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input build_dependency_relationship_prepend_input {
  labels: jsonb
}

"""
select columns of table "build_dependency_relationship"
"""
enum build_dependency_relationship_select_column {
  """column name"""
  build_id

  """column name"""
  depended_by_relationship_id

  """column name"""
  id

  """column name"""
  labels

  """column name"""
  project_path

  """column name"""
  range

  """column name"""
  release_id
}

"""
input type for updating data in table "build_dependency_relationship"
"""
input build_dependency_relationship_set_input {
  build_id: uuid
  depended_by_relationship_id: uuid
  id: uuid
  labels: jsonb
  project_path: String
  range: String
  release_id: uuid
}

"""
update columns of table "build_dependency_relationship"
"""
enum build_dependency_relationship_update_column {
  """column name"""
  build_id

  """column name"""
  depended_by_relationship_id

  """column name"""
  id

  """column name"""
  labels

  """column name"""
  project_path

  """column name"""
  range

  """column name"""
  release_id
}

"""
columns and relationships of "builds"
"""
type builds {
  agent_access_token: uuid!

  """An array relationship"""
  build_dependency_relationships(
    """distinct select on columns"""
    distinct_on: [build_dependency_relationship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [build_dependency_relationship_order_by!]

    """filter the rows returned"""
    where: build_dependency_relationship_bool_exp
  ): [build_dependency_relationship!]!
  build_number: Int
  created_at: timestamp!
  existing_github_check_id: bigint
  existing_github_review_id: String

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid!

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """An object relationship"""
  project: projects
  project_id: uuid
  pull_request_id: String

  """An array relationship"""
  resolved_manifests(
    """distinct select on columns"""
    distinct_on: [resolved_manifest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resolved_manifest_order_by!]

    """filter the rows returned"""
    where: resolved_manifest_bool_exp
  ): [resolved_manifest!]!
  s3_url: String
  s3_url_signed: String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!
  source_type: builds_source_type!
}

"""
aggregated selection of "builds"
"""
type builds_aggregate {
  aggregate: builds_aggregate_fields
  nodes: [builds!]!
}

"""
aggregate fields of "builds"
"""
type builds_aggregate_fields {
  avg: builds_avg_fields
  count(columns: [builds_select_column!], distinct: Boolean): Int!
  max: builds_max_fields
  min: builds_min_fields
  stddev: builds_stddev_fields
  stddev_pop: builds_stddev_pop_fields
  stddev_samp: builds_stddev_samp_fields
  sum: builds_sum_fields
  var_pop: builds_var_pop_fields
  var_samp: builds_var_samp_fields
  variance: builds_variance_fields
}

"""
order by aggregate values of table "builds"
"""
input builds_aggregate_order_by {
  avg: builds_avg_order_by
  count: order_by
  max: builds_max_order_by
  min: builds_min_order_by
  stddev: builds_stddev_order_by
  stddev_pop: builds_stddev_pop_order_by
  stddev_samp: builds_stddev_samp_order_by
  sum: builds_sum_order_by
  var_pop: builds_var_pop_order_by
  var_samp: builds_var_samp_order_by
  variance: builds_variance_order_by
}

"""
input type for inserting array relation for remote table "builds"
"""
input builds_arr_rel_insert_input {
  data: [builds_insert_input!]!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""aggregate avg on columns"""
type builds_avg_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by avg() on columns of table "builds"
"""
input builds_avg_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""
Boolean expression to filter rows from the table "builds". All fields are combined with a logical 'AND'.
"""
input builds_bool_exp {
  _and: [builds_bool_exp!]
  _not: builds_bool_exp
  _or: [builds_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build_dependency_relationships: build_dependency_relationship_bool_exp
  build_number: Int_comparison_exp
  created_at: timestamp_comparison_exp
  existing_github_check_id: bigint_comparison_exp
  existing_github_review_id: String_comparison_exp
  findings: findings_bool_exp
  git_branch: String_comparison_exp
  git_hash: String_comparison_exp
  git_remote: String_comparison_exp
  id: uuid_comparison_exp
  manifests: manifests_bool_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  pull_request_id: String_comparison_exp
  resolved_manifests: resolved_manifest_bool_exp
  s3_url: String_comparison_exp
  scans: scans_bool_exp
  source_type: builds_source_type_comparison_exp
}

"""
unique or primary key constraints on table "builds"
"""
enum builds_constraint {
  """
  unique or primary key constraint on columns "agent_access_token"
  """
  builds_agent_access_token_key

  """
  unique or primary key constraint on columns "project_id", "build_number"
  """
  builds_build_number_project_id_key

  """
  unique or primary key constraint on columns "id"
  """
  builds_pkey
}

"""
input type for incrementing numeric columns in table "builds"
"""
input builds_inc_input {
  build_number: Int
  existing_github_check_id: bigint
}

"""
input type for inserting data into table "builds"
"""
input builds_insert_input {
  agent_access_token: uuid
  build_dependency_relationships: build_dependency_relationship_arr_rel_insert_input
  build_number: Int
  created_at: timestamp
  existing_github_check_id: bigint
  existing_github_review_id: String
  findings: findings_arr_rel_insert_input
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  manifests: manifests_arr_rel_insert_input
  project: projects_obj_rel_insert_input
  project_id: uuid
  pull_request_id: String
  resolved_manifests: resolved_manifest_arr_rel_insert_input
  s3_url: String
  scans: scans_arr_rel_insert_input
  source_type: builds_source_type
}

"""aggregate max on columns"""
type builds_max_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  existing_github_check_id: bigint
  existing_github_review_id: String
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  pull_request_id: String
  s3_url: String
  source_type: builds_source_type
}

"""
order by max() on columns of table "builds"
"""
input builds_max_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  existing_github_check_id: order_by
  existing_github_review_id: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  source_type: order_by
}

"""aggregate min on columns"""
type builds_min_fields {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  existing_github_check_id: bigint
  existing_github_review_id: String
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  pull_request_id: String
  s3_url: String
  source_type: builds_source_type
}

"""
order by min() on columns of table "builds"
"""
input builds_min_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  existing_github_check_id: order_by
  existing_github_review_id: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  source_type: order_by
}

"""
response of any mutation on the table "builds"
"""
type builds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [builds!]!
}

"""
input type for inserting object relation for remote table "builds"
"""
input builds_obj_rel_insert_input {
  data: builds_insert_input!

  """upsert condition"""
  on_conflict: builds_on_conflict
}

"""
on_conflict condition type for table "builds"
"""
input builds_on_conflict {
  constraint: builds_constraint!
  update_columns: [builds_update_column!]! = []
  where: builds_bool_exp
}

"""Ordering options when selecting data from "builds"."""
input builds_order_by {
  agent_access_token: order_by
  build_dependency_relationships_aggregate: build_dependency_relationship_aggregate_order_by
  build_number: order_by
  created_at: order_by
  existing_github_check_id: order_by
  existing_github_review_id: order_by
  findings_aggregate: findings_aggregate_order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  manifests_aggregate: manifests_aggregate_order_by
  project: projects_order_by
  project_id: order_by
  pull_request_id: order_by
  resolved_manifests_aggregate: resolved_manifest_aggregate_order_by
  s3_url: order_by
  scans_aggregate: scans_aggregate_order_by
  source_type: order_by
}

"""primary key columns input for table: builds"""
input builds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "builds"
"""
enum builds_select_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  existing_github_check_id

  """column name"""
  existing_github_review_id

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  pull_request_id

  """column name"""
  s3_url

  """column name"""
  source_type
}

"""
input type for updating data in table "builds"
"""
input builds_set_input {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  existing_github_check_id: bigint
  existing_github_review_id: String
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  s3_url: String
}

scalar builds_source_type

"""
Boolean expression to compare columns of type "builds_source_type". All fields are combined with logical 'AND'.
"""
input builds_source_type_comparison_exp {
  _eq: builds_source_type
  _gt: builds_source_type
  _gte: builds_source_type
  _in: [builds_source_type!]
  _is_null: Boolean
  _lt: builds_source_type
  _lte: builds_source_type
  _neq: builds_source_type
  _nin: [builds_source_type!]
}

"""aggregate stddev on columns"""
type builds_stddev_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by stddev() on columns of table "builds"
"""
input builds_stddev_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""aggregate stddev_pop on columns"""
type builds_stddev_pop_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by stddev_pop() on columns of table "builds"
"""
input builds_stddev_pop_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""aggregate stddev_samp on columns"""
type builds_stddev_samp_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by stddev_samp() on columns of table "builds"
"""
input builds_stddev_samp_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""aggregate sum on columns"""
type builds_sum_fields {
  build_number: Int
  existing_github_check_id: bigint
}

"""
order by sum() on columns of table "builds"
"""
input builds_sum_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""
update columns of table "builds"
"""
enum builds_update_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  existing_github_check_id

  """column name"""
  existing_github_review_id

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  s3_url
}

"""aggregate var_pop on columns"""
type builds_var_pop_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by var_pop() on columns of table "builds"
"""
input builds_var_pop_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""aggregate var_samp on columns"""
type builds_var_samp_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by var_samp() on columns of table "builds"
"""
input builds_var_samp_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

"""aggregate variance on columns"""
type builds_variance_fields {
  build_number: Float
  existing_github_check_id: Float
}

"""
order by variance() on columns of table "builds"
"""
input builds_variance_order_by {
  build_number: order_by
  existing_github_check_id: order_by
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "default_branch_builds"
"""
type default_branch_builds {
  build_number: Int
  created_at: timestamp
  existing_github_review_id: String

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid

  """An object relationship"""
  project: projects
  project_id: uuid
  pull_request_id: String
  s3_url: String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!
  source_type: builds_source_type
}

"""
order by aggregate values of table "default_branch_builds"
"""
input default_branch_builds_aggregate_order_by {
  avg: default_branch_builds_avg_order_by
  count: order_by
  max: default_branch_builds_max_order_by
  min: default_branch_builds_min_order_by
  stddev: default_branch_builds_stddev_order_by
  stddev_pop: default_branch_builds_stddev_pop_order_by
  stddev_samp: default_branch_builds_stddev_samp_order_by
  sum: default_branch_builds_sum_order_by
  var_pop: default_branch_builds_var_pop_order_by
  var_samp: default_branch_builds_var_samp_order_by
  variance: default_branch_builds_variance_order_by
}

"""
input type for inserting array relation for remote table "default_branch_builds"
"""
input default_branch_builds_arr_rel_insert_input {
  data: [default_branch_builds_insert_input!]!
}

"""
order by avg() on columns of table "default_branch_builds"
"""
input default_branch_builds_avg_order_by {
  build_number: order_by
}

"""
Boolean expression to filter rows from the table "default_branch_builds". All fields are combined with a logical 'AND'.
"""
input default_branch_builds_bool_exp {
  _and: [default_branch_builds_bool_exp!]
  _not: default_branch_builds_bool_exp
  _or: [default_branch_builds_bool_exp!]
  build_number: Int_comparison_exp
  created_at: timestamp_comparison_exp
  existing_github_review_id: String_comparison_exp
  findings: findings_bool_exp
  git_branch: String_comparison_exp
  git_hash: String_comparison_exp
  git_remote: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  pull_request_id: String_comparison_exp
  s3_url: String_comparison_exp
  scans: scans_bool_exp
  source_type: builds_source_type_comparison_exp
}

"""
input type for inserting data into table "default_branch_builds"
"""
input default_branch_builds_insert_input {
  build_number: Int
  created_at: timestamp
  existing_github_review_id: String
  findings: findings_arr_rel_insert_input
  git_branch: String
  git_hash: String
  git_remote: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  pull_request_id: String
  s3_url: String
  scans: scans_arr_rel_insert_input
  source_type: builds_source_type
}

"""
order by max() on columns of table "default_branch_builds"
"""
input default_branch_builds_max_order_by {
  build_number: order_by
  created_at: order_by
  existing_github_review_id: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  source_type: order_by
}

"""
order by min() on columns of table "default_branch_builds"
"""
input default_branch_builds_min_order_by {
  build_number: order_by
  created_at: order_by
  existing_github_review_id: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  source_type: order_by
}

"""
input type for inserting object relation for remote table "default_branch_builds"
"""
input default_branch_builds_obj_rel_insert_input {
  data: default_branch_builds_insert_input!
}

"""Ordering options when selecting data from "default_branch_builds"."""
input default_branch_builds_order_by {
  build_number: order_by
  created_at: order_by
  existing_github_review_id: order_by
  findings_aggregate: findings_aggregate_order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  scans_aggregate: scans_aggregate_order_by
  source_type: order_by
}

"""
select columns of table "default_branch_builds"
"""
enum default_branch_builds_select_column {
  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  existing_github_review_id

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  pull_request_id

  """column name"""
  s3_url

  """column name"""
  source_type
}

"""
order by stddev() on columns of table "default_branch_builds"
"""
input default_branch_builds_stddev_order_by {
  build_number: order_by
}

"""
order by stddev_pop() on columns of table "default_branch_builds"
"""
input default_branch_builds_stddev_pop_order_by {
  build_number: order_by
}

"""
order by stddev_samp() on columns of table "default_branch_builds"
"""
input default_branch_builds_stddev_samp_order_by {
  build_number: order_by
}

"""
order by sum() on columns of table "default_branch_builds"
"""
input default_branch_builds_sum_order_by {
  build_number: order_by
}

"""
order by var_pop() on columns of table "default_branch_builds"
"""
input default_branch_builds_var_pop_order_by {
  build_number: order_by
}

"""
order by var_samp() on columns of table "default_branch_builds"
"""
input default_branch_builds_var_samp_order_by {
  build_number: order_by
}

"""
order by variance() on columns of table "default_branch_builds"
"""
input default_branch_builds_variance_order_by {
  build_number: order_by
}

"""
columns and relationships of "findings"
"""
type findings {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  created_at: timestamp!
  dedupe_slug: String!

  """An object relationship"""
  default_branch_build: default_branch_builds
  fix_state: fix_state_enum!
  fix_versions: _text
  id: uuid!
  language: String!
  locations: _text!
  matcher: String!
  package_name: String!
  purl: String!

  """An object relationship"""
  scan: scans!
  scan_id: uuid!
  severity: severity_enum!
  type: String!
  updated_at: timestamptz!
  version: String!
  version_matcher: String!
  virtual_path: String

  """An object relationship"""
  vulnerability: vulnerability!
  vulnerability_id: uuid!
}

"""
order by aggregate values of table "findings"
"""
input findings_aggregate_order_by {
  count: order_by
  max: findings_max_order_by
  min: findings_min_order_by
}

"""
input type for inserting array relation for remote table "findings"
"""
input findings_arr_rel_insert_input {
  data: [findings_insert_input!]!

  """upsert condition"""
  on_conflict: findings_on_conflict
}

"""
Boolean expression to filter rows from the table "findings". All fields are combined with a logical 'AND'.
"""
input findings_bool_exp {
  _and: [findings_bool_exp!]
  _not: findings_bool_exp
  _or: [findings_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  dedupe_slug: String_comparison_exp
  default_branch_build: default_branch_builds_bool_exp
  fix_state: fix_state_enum_comparison_exp
  fix_versions: _text_comparison_exp
  id: uuid_comparison_exp
  language: String_comparison_exp
  locations: _text_comparison_exp
  matcher: String_comparison_exp
  package_name: String_comparison_exp
  purl: String_comparison_exp
  scan: scans_bool_exp
  scan_id: uuid_comparison_exp
  severity: severity_enum_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  version: String_comparison_exp
  version_matcher: String_comparison_exp
  virtual_path: String_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "findings"
"""
enum findings_constraint {
  """
  unique or primary key constraint on columns "dedupe_slug", "build_id"
  """
  findings_dedupe_slug_build_id_key

  """
  unique or primary key constraint on columns "id"
  """
  findings_pkey
}

"""
input type for inserting data into table "findings"
"""
input findings_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  default_branch_build: default_branch_builds_obj_rel_insert_input
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  purl: String
  scan: scans_obj_rel_insert_input
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "findings"
"""
input findings_max_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  fix_state: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  purl: order_by
  scan_id: order_by
  severity: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "findings"
"""
input findings_min_order_by {
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  fix_state: order_by
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  purl: order_by
  scan_id: order_by
  severity: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "findings"
"""
type findings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [findings!]!
}

"""
on_conflict condition type for table "findings"
"""
input findings_on_conflict {
  constraint: findings_constraint!
  update_columns: [findings_update_column!]! = []
  where: findings_bool_exp
}

"""Ordering options when selecting data from "findings"."""
input findings_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  dedupe_slug: order_by
  default_branch_build: default_branch_builds_order_by
  fix_state: order_by
  fix_versions: order_by
  id: order_by
  language: order_by
  locations: order_by
  matcher: order_by
  package_name: order_by
  purl: order_by
  scan: scans_order_by
  scan_id: order_by
  severity: order_by
  type: order_by
  updated_at: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: findings"""
input findings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "findings"
"""
enum findings_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "findings"
"""
input findings_set_input {
  build_id: uuid
  created_at: timestamp
  dedupe_slug: String
  fix_state: fix_state_enum
  fix_versions: _text
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  purl: String
  scan_id: uuid
  severity: severity_enum
  type: String
  updated_at: timestamptz
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
}

"""
update columns of table "findings"
"""
enum findings_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  dedupe_slug

  """column name"""
  fix_state

  """column name"""
  fix_versions

  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  purl

  """column name"""
  scan_id

  """column name"""
  severity

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id
}

scalar fix_state_enum

"""
Boolean expression to compare columns of type "fix_state_enum". All fields are combined with logical 'AND'.
"""
input fix_state_enum_comparison_exp {
  _eq: fix_state_enum
  _gt: fix_state_enum
  _gte: fix_state_enum
  _in: [fix_state_enum!]
  _is_null: Boolean
  _lt: fix_state_enum
  _lte: fix_state_enum
  _neq: fix_state_enum
  _nin: [fix_state_enum!]
}

"""Metadata about a github repository and where to find it."""
type github_repositories {
  authenticated_clone_url: AuthenticatedRepoCloneUrlOutput
  default_branch: String
  git_url: String!
  github_id: Int
  github_node_id: String
  id: uuid!

  """An object relationship"""
  project: projects!
  project_id: uuid!
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
}

"""
order by aggregate values of table "github_repositories"
"""
input github_repositories_aggregate_order_by {
  avg: github_repositories_avg_order_by
  count: order_by
  max: github_repositories_max_order_by
  min: github_repositories_min_order_by
  stddev: github_repositories_stddev_order_by
  stddev_pop: github_repositories_stddev_pop_order_by
  stddev_samp: github_repositories_stddev_samp_order_by
  sum: github_repositories_sum_order_by
  var_pop: github_repositories_var_pop_order_by
  var_samp: github_repositories_var_samp_order_by
  variance: github_repositories_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_append_input {
  traits: jsonb
}

"""
input type for inserting array relation for remote table "github_repositories"
"""
input github_repositories_arr_rel_insert_input {
  data: [github_repositories_insert_input!]!

  """upsert condition"""
  on_conflict: github_repositories_on_conflict
}

"""
order by avg() on columns of table "github_repositories"
"""
input github_repositories_avg_order_by {
  github_id: order_by
}

"""
Boolean expression to filter rows from the table "github_repositories". All fields are combined with a logical 'AND'.
"""
input github_repositories_bool_exp {
  _and: [github_repositories_bool_exp!]
  _not: github_repositories_bool_exp
  _or: [github_repositories_bool_exp!]
  default_branch: String_comparison_exp
  git_url: String_comparison_exp
  github_id: Int_comparison_exp
  github_node_id: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  traits: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "github_repositories"
"""
enum github_repositories_constraint {
  """
  unique or primary key constraint on columns "github_id"
  """
  github_repositories_github_id_key

  """
  unique or primary key constraint on columns "github_node_id"
  """
  github_repositories_github_node_id_key

  """
  unique or primary key constraint on columns "id"
  """
  github_repositories_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input github_repositories_delete_at_path_input {
  traits: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input github_repositories_delete_elem_input {
  traits: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input github_repositories_delete_key_input {
  traits: String
}

"""
input type for incrementing numeric columns in table "github_repositories"
"""
input github_repositories_inc_input {
  github_id: Int
}

"""
input type for inserting data into table "github_repositories"
"""
input github_repositories_insert_input {
  default_branch: String
  git_url: String
  github_id: Int
  github_node_id: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  traits: jsonb
}

"""
order by max() on columns of table "github_repositories"
"""
input github_repositories_max_order_by {
  default_branch: order_by
  git_url: order_by
  github_id: order_by
  github_node_id: order_by
  id: order_by
  project_id: order_by
}

"""
order by min() on columns of table "github_repositories"
"""
input github_repositories_min_order_by {
  default_branch: order_by
  git_url: order_by
  github_id: order_by
  github_node_id: order_by
  id: order_by
  project_id: order_by
}

"""
response of any mutation on the table "github_repositories"
"""
type github_repositories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [github_repositories!]!
}

"""
input type for inserting object relation for remote table "github_repositories"
"""
input github_repositories_obj_rel_insert_input {
  data: github_repositories_insert_input!

  """upsert condition"""
  on_conflict: github_repositories_on_conflict
}

"""
on_conflict condition type for table "github_repositories"
"""
input github_repositories_on_conflict {
  constraint: github_repositories_constraint!
  update_columns: [github_repositories_update_column!]! = []
  where: github_repositories_bool_exp
}

"""Ordering options when selecting data from "github_repositories"."""
input github_repositories_order_by {
  default_branch: order_by
  git_url: order_by
  github_id: order_by
  github_node_id: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  traits: order_by
}

"""primary key columns input for table: github_repositories"""
input github_repositories_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input github_repositories_prepend_input {
  traits: jsonb
}

"""
select columns of table "github_repositories"
"""
enum github_repositories_select_column {
  """column name"""
  default_branch

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  traits
}

"""
input type for updating data in table "github_repositories"
"""
input github_repositories_set_input {
  default_branch: String
  git_url: String
  github_id: Int
  github_node_id: String
  project_id: uuid
  traits: jsonb
}

"""
order by stddev() on columns of table "github_repositories"
"""
input github_repositories_stddev_order_by {
  github_id: order_by
}

"""
order by stddev_pop() on columns of table "github_repositories"
"""
input github_repositories_stddev_pop_order_by {
  github_id: order_by
}

"""
order by stddev_samp() on columns of table "github_repositories"
"""
input github_repositories_stddev_samp_order_by {
  github_id: order_by
}

"""
order by sum() on columns of table "github_repositories"
"""
input github_repositories_sum_order_by {
  github_id: order_by
}

"""
update columns of table "github_repositories"
"""
enum github_repositories_update_column {
  """column name"""
  default_branch

  """column name"""
  git_url

  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  project_id

  """column name"""
  traits
}

"""
order by var_pop() on columns of table "github_repositories"
"""
input github_repositories_var_pop_order_by {
  github_id: order_by
}

"""
order by var_samp() on columns of table "github_repositories"
"""
input github_repositories_var_samp_order_by {
  github_id: order_by
}

"""
order by variance() on columns of table "github_repositories"
"""
input github_repositories_variance_order_by {
  github_id: order_by
}

"""
columns and relationships of "guide_related_guides"
"""
type guide_related_guides {
  created_at: timestamptz!
  from_guide_id: uuid!
  id: uuid!
  to_guide_unique_id: String!
  updated_at: timestamptz!
}

"""
input type for inserting array relation for remote table "guide_related_guides"
"""
input guide_related_guides_arr_rel_insert_input {
  data: [guide_related_guides_insert_input!]!

  """upsert condition"""
  on_conflict: guide_related_guides_on_conflict
}

"""
Boolean expression to filter rows from the table "guide_related_guides". All fields are combined with a logical 'AND'.
"""
input guide_related_guides_bool_exp {
  _and: [guide_related_guides_bool_exp!]
  _not: guide_related_guides_bool_exp
  _or: [guide_related_guides_bool_exp!]
  created_at: timestamptz_comparison_exp
  from_guide_id: uuid_comparison_exp
  id: uuid_comparison_exp
  to_guide_unique_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "guide_related_guides"
"""
enum guide_related_guides_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  guide_related_guides_pkey

  """
  unique or primary key constraint on columns "to_guide_unique_id", "from_guide_id"
  """
  guide_related_guides_unique
}

"""
input type for inserting data into table "guide_related_guides"
"""
input guide_related_guides_insert_input {
  created_at: timestamptz
  from_guide_id: uuid
  guide: guides_obj_rel_insert_input
  id: uuid
  parent_guide: guides_obj_rel_insert_input
  to_guide_unique_id: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "guide_related_guides"
"""
type guide_related_guides_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [guide_related_guides!]!
}

"""
on_conflict condition type for table "guide_related_guides"
"""
input guide_related_guides_on_conflict {
  constraint: guide_related_guides_constraint!
  update_columns: [guide_related_guides_update_column!]! = []
  where: guide_related_guides_bool_exp
}

"""Ordering options when selecting data from "guide_related_guides"."""
input guide_related_guides_order_by {
  created_at: order_by
  from_guide_id: order_by
  id: order_by
  to_guide_unique_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: guide_related_guides"""
input guide_related_guides_pk_columns_input {
  id: uuid!
}

"""
select columns of table "guide_related_guides"
"""
enum guide_related_guides_select_column {
  """column name"""
  created_at

  """column name"""
  from_guide_id

  """column name"""
  id

  """column name"""
  to_guide_unique_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "guide_related_guides"
"""
input guide_related_guides_set_input {
  created_at: timestamptz
  from_guide_id: uuid
  id: uuid
  to_guide_unique_id: String
  updated_at: timestamptz
}

"""
update columns of table "guide_related_guides"
"""
enum guide_related_guides_update_column {
  """column name"""
  created_at

  """column name"""
  from_guide_id

  """column name"""
  id

  """column name"""
  to_guide_unique_id

  """column name"""
  updated_at
}

"""
columns and relationships of "guide_vulnerabilities"
"""
type guide_vulnerabilities {
  created_at: timestamptz!
  guide_id: uuid!
  id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  vulnerability: vulnerability!
  vulnerability_id: uuid!
}

"""
order by aggregate values of table "guide_vulnerabilities"
"""
input guide_vulnerabilities_aggregate_order_by {
  count: order_by
  max: guide_vulnerabilities_max_order_by
  min: guide_vulnerabilities_min_order_by
}

"""
input type for inserting array relation for remote table "guide_vulnerabilities"
"""
input guide_vulnerabilities_arr_rel_insert_input {
  data: [guide_vulnerabilities_insert_input!]!

  """upsert condition"""
  on_conflict: guide_vulnerabilities_on_conflict
}

"""
Boolean expression to filter rows from the table "guide_vulnerabilities". All fields are combined with a logical 'AND'.
"""
input guide_vulnerabilities_bool_exp {
  _and: [guide_vulnerabilities_bool_exp!]
  _not: guide_vulnerabilities_bool_exp
  _or: [guide_vulnerabilities_bool_exp!]
  created_at: timestamptz_comparison_exp
  guide_id: uuid_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "guide_vulnerabilities"
"""
enum guide_vulnerabilities_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  guide_vulnerabilities_pkey

  """
  unique or primary key constraint on columns "vulnerability_id", "guide_id"
  """
  guide_vulnerabilities_unique
}

"""
input type for inserting data into table "guide_vulnerabilities"
"""
input guide_vulnerabilities_insert_input {
  created_at: timestamptz
  guide: guides_obj_rel_insert_input
  guide_id: uuid
  id: uuid
  updated_at: timestamptz
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "guide_vulnerabilities"
"""
input guide_vulnerabilities_max_order_by {
  created_at: order_by
  guide_id: order_by
  id: order_by
  updated_at: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "guide_vulnerabilities"
"""
input guide_vulnerabilities_min_order_by {
  created_at: order_by
  guide_id: order_by
  id: order_by
  updated_at: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "guide_vulnerabilities"
"""
type guide_vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [guide_vulnerabilities!]!
}

"""
on_conflict condition type for table "guide_vulnerabilities"
"""
input guide_vulnerabilities_on_conflict {
  constraint: guide_vulnerabilities_constraint!
  update_columns: [guide_vulnerabilities_update_column!]! = []
  where: guide_vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "guide_vulnerabilities"."""
input guide_vulnerabilities_order_by {
  created_at: order_by
  guide_id: order_by
  id: order_by
  updated_at: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: guide_vulnerabilities"""
input guide_vulnerabilities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "guide_vulnerabilities"
"""
enum guide_vulnerabilities_select_column {
  """column name"""
  created_at

  """column name"""
  guide_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "guide_vulnerabilities"
"""
input guide_vulnerabilities_set_input {
  created_at: timestamptz
  guide_id: uuid
  id: uuid
  updated_at: timestamptz
  vulnerability_id: uuid
}

"""
update columns of table "guide_vulnerabilities"
"""
enum guide_vulnerabilities_update_column {
  """column name"""
  created_at

  """column name"""
  guide_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  vulnerability_id
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input guides_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "guides". All fields are combined with a logical 'AND'.
"""
input guides_bool_exp {
  _and: [guides_bool_exp!]
  _not: guides_bool_exp
  _or: [guides_bool_exp!]
}

"""
unique or primary key constraints on table "guides"
"""
enum guides_constraint {
  """
  unique or primary key constraint on columns "data_source_link"
  """
  guides_data_source_link_key

  """
  unique or primary key constraint on columns "guide_unique_id"
  """
  guides_guide_unique_id_key

  """
  unique or primary key constraint on columns "id"
  """
  guides_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input guides_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input guides_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input guides_delete_key_input {
  metadata: String
}

"""
input type for incrementing numeric columns in table "guides"
"""
input guides_inc_input {
  metadata_schema_version: Int
}

"""
input type for inserting data into table "guides"
"""
input guides_insert_input {
  body: String
  created_at: timestamptz
  data_source_link: String
  guide_unique_id: String
  guide_vulnerabilities: guide_vulnerabilities_arr_rel_insert_input
  id: uuid
  metadata: jsonb
  metadata_schema_version: Int
  related_guides: guide_related_guides_arr_rel_insert_input
  severity: severity_enum
  summary: String
  tags: _text
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "guides"
"""
type guides_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
}

"""
input type for inserting object relation for remote table "guides"
"""
input guides_obj_rel_insert_input {
  data: guides_insert_input!

  """upsert condition"""
  on_conflict: guides_on_conflict
}

"""
on_conflict condition type for table "guides"
"""
input guides_on_conflict {
  constraint: guides_constraint!
  update_columns: [guides_update_column!]! = []
  where: guides_bool_exp
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input guides_prepend_input {
  metadata: jsonb
}

"""
input type for updating data in table "guides"
"""
input guides_set_input {
  body: String
  created_at: timestamptz
  data_source_link: String
  guide_unique_id: String
  id: uuid
  metadata: jsonb
  metadata_schema_version: Int
  severity: severity_enum
  summary: String
  tags: _text
  title: String
  updated_at: timestamptz
}

"""
update columns of table "guides"
"""
enum guides_update_column {
  """column name"""
  body

  """column name"""
  created_at

  """column name"""
  data_source_link

  """column name"""
  guide_unique_id

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  metadata_schema_version

  """column name"""
  severity

  """column name"""
  summary

  """column name"""
  tags

  """column name"""
  title

  """column name"""
  updated_at
}

"""
columns and relationships of "identities"
"""
type identities {
  created_at: timestamp!
  id: uuid!

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!
  nid: uuid
  schema_id: String!
  state: String!
  state_changed_at: timestamp
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamp!

  """An object relationship"""
  user: users
}

"""
Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
"""
input identities_bool_exp {
  _and: [identities_bool_exp!]
  _not: identities_bool_exp
  _or: [identities_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity_verifiable_addresses: identity_verifiable_addresses_bool_exp
  nid: uuid_comparison_exp
  schema_id: String_comparison_exp
  state: String_comparison_exp
  state_changed_at: timestamp_comparison_exp
  traits: jsonb_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
}

"""Ordering options when selecting data from "identities"."""
input identities_order_by {
  created_at: order_by
  id: order_by
  identity_verifiable_addresses_aggregate: identity_verifiable_addresses_aggregate_order_by
  nid: order_by
  schema_id: order_by
  state: order_by
  state_changed_at: order_by
  traits: order_by
  updated_at: order_by
  user: users_order_by
}

"""
select columns of table "identities"
"""
enum identities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
columns and relationships of "identity_verifiable_addresses"
"""
type identity_verifiable_addresses {
  created_at: timestamp!
  id: uuid!

  """An object relationship"""
  identity: identities!
  identity_id: uuid!
  nid: uuid
  status: String!
  updated_at: timestamp!
  value: String!
  verified: Boolean!
  verified_at: timestamp
  via: String!
}

"""
order by aggregate values of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_aggregate_order_by {
  count: order_by
  max: identity_verifiable_addresses_max_order_by
  min: identity_verifiable_addresses_min_order_by
}

"""
Boolean expression to filter rows from the table "identity_verifiable_addresses". All fields are combined with a logical 'AND'.
"""
input identity_verifiable_addresses_bool_exp {
  _and: [identity_verifiable_addresses_bool_exp!]
  _not: identity_verifiable_addresses_bool_exp
  _or: [identity_verifiable_addresses_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  identity: identities_bool_exp
  identity_id: uuid_comparison_exp
  nid: uuid_comparison_exp
  status: String_comparison_exp
  updated_at: timestamp_comparison_exp
  value: String_comparison_exp
  verified: Boolean_comparison_exp
  verified_at: timestamp_comparison_exp
  via: String_comparison_exp
}

"""
order by max() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_max_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""
order by min() on columns of table "identity_verifiable_addresses"
"""
input identity_verifiable_addresses_min_order_by {
  created_at: order_by
  id: order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified_at: order_by
  via: order_by
}

"""
Ordering options when selecting data from "identity_verifiable_addresses".
"""
input identity_verifiable_addresses_order_by {
  created_at: order_by
  id: order_by
  identity: identities_order_by
  identity_id: order_by
  nid: order_by
  status: order_by
  updated_at: order_by
  value: order_by
  verified: order_by
  verified_at: order_by
  via: order_by
}

"""
select columns of table "identity_verifiable_addresses"
"""
enum identity_verifiable_addresses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  identity_id

  """column name"""
  nid

  """column name"""
  status

  """column name"""
  updated_at

  """column name"""
  value

  """column name"""
  verified

  """column name"""
  verified_at

  """column name"""
  via
}

"""
columns and relationships of "ignored_vulnerabilities"
"""
type ignored_vulnerabilities {
  """An object relationship"""
  creator: identities
  creator_id: uuid
  id: uuid!
  locations(
    """JSON select path"""
    path: String
  ): jsonb!
  note: String!

  """An object relationship"""
  project: projects!
  project_id: uuid!

  """An object relationship"""
  vulnerability: vulnerability!
  vulnerability_id: uuid!
}

"""
order by aggregate values of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_aggregate_order_by {
  count: order_by
  max: ignored_vulnerabilities_max_order_by
  min: ignored_vulnerabilities_min_order_by
}

"""
Boolean expression to filter rows from the table "ignored_vulnerabilities". All fields are combined with a logical 'AND'.
"""
input ignored_vulnerabilities_bool_exp {
  _and: [ignored_vulnerabilities_bool_exp!]
  _not: ignored_vulnerabilities_bool_exp
  _or: [ignored_vulnerabilities_bool_exp!]
  creator: identities_bool_exp
  creator_id: uuid_comparison_exp
  id: uuid_comparison_exp
  locations: jsonb_comparison_exp
  note: String_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
order by max() on columns of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_max_order_by {
  creator_id: order_by
  id: order_by
  note: order_by
  project_id: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "ignored_vulnerabilities"
"""
input ignored_vulnerabilities_min_order_by {
  creator_id: order_by
  id: order_by
  note: order_by
  project_id: order_by
  vulnerability_id: order_by
}

"""Ordering options when selecting data from "ignored_vulnerabilities"."""
input ignored_vulnerabilities_order_by {
  creator: identities_order_by
  creator_id: order_by
  id: order_by
  locations: order_by
  note: order_by
  project: projects_order_by
  project_id: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""
select columns of table "ignored_vulnerabilities"
"""
enum ignored_vulnerabilities_select_column {
  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  locations

  """column name"""
  note

  """column name"""
  project_id

  """column name"""
  vulnerability_id
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "latest_builds"
"""
type latest_builds {
  agent_access_token: uuid
  build_number: Int
  created_at: timestamp
  existing_github_review_id: String
  git_branch: String
  git_hash: String
  git_remote: String
  id: uuid
  project_id: uuid
  pull_request_id: String
  s3_url: String
  source_type: builds_source_type
}

"""
Boolean expression to filter rows from the table "latest_builds". All fields are combined with a logical 'AND'.
"""
input latest_builds_bool_exp {
  _and: [latest_builds_bool_exp!]
  _not: latest_builds_bool_exp
  _or: [latest_builds_bool_exp!]
  agent_access_token: uuid_comparison_exp
  build_number: Int_comparison_exp
  created_at: timestamp_comparison_exp
  existing_github_review_id: String_comparison_exp
  git_branch: String_comparison_exp
  git_hash: String_comparison_exp
  git_remote: String_comparison_exp
  id: uuid_comparison_exp
  project_id: uuid_comparison_exp
  pull_request_id: String_comparison_exp
  s3_url: String_comparison_exp
  source_type: builds_source_type_comparison_exp
}

"""Ordering options when selecting data from "latest_builds"."""
input latest_builds_order_by {
  agent_access_token: order_by
  build_number: order_by
  created_at: order_by
  existing_github_review_id: order_by
  git_branch: order_by
  git_hash: order_by
  git_remote: order_by
  id: order_by
  project_id: order_by
  pull_request_id: order_by
  s3_url: order_by
  source_type: order_by
}

"""
select columns of table "latest_builds"
"""
enum latest_builds_select_column {
  """column name"""
  agent_access_token

  """column name"""
  build_number

  """column name"""
  created_at

  """column name"""
  existing_github_review_id

  """column name"""
  git_branch

  """column name"""
  git_hash

  """column name"""
  git_remote

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  pull_request_id

  """column name"""
  s3_url

  """column name"""
  source_type
}

scalar license_source

"""
Boolean expression to compare columns of type "license_source". All fields are combined with logical 'AND'.
"""
input license_source_comparison_exp {
  _eq: license_source
  _gt: license_source
  _gte: license_source
  _in: [license_source!]
  _is_null: Boolean
  _lt: license_source
  _lte: license_source
  _neq: license_source
  _nin: [license_source!]
}

"""
direct dependencies of builds with pointers to their location in the merkel tree table
"""
type manifest_dependency {
  """An object relationship"""
  manifest_dependency_node: manifest_dependency_node!

  """entrypoint to dep tree"""
  manifest_dependency_node_id: uuid!
  manifest_id: uuid!

  """An object relationship"""
  resolved_manifest: resolved_manifest!
}

"""
order by aggregate values of table "manifest_dependency"
"""
input manifest_dependency_aggregate_order_by {
  count: order_by
  max: manifest_dependency_max_order_by
  min: manifest_dependency_min_order_by
}

"""
input type for inserting array relation for remote table "manifest_dependency"
"""
input manifest_dependency_arr_rel_insert_input {
  data: [manifest_dependency_insert_input!]!

  """upsert condition"""
  on_conflict: manifest_dependency_on_conflict
}

"""
Boolean expression to filter rows from the table "manifest_dependency". All fields are combined with a logical 'AND'.
"""
input manifest_dependency_bool_exp {
  _and: [manifest_dependency_bool_exp!]
  _not: manifest_dependency_bool_exp
  _or: [manifest_dependency_bool_exp!]
  manifest_dependency_node: manifest_dependency_node_bool_exp
  manifest_dependency_node_id: uuid_comparison_exp
  manifest_id: uuid_comparison_exp
  resolved_manifest: resolved_manifest_bool_exp
}

"""
unique or primary key constraints on table "manifest_dependency"
"""
enum manifest_dependency_constraint {
  """
  unique or primary key constraint on columns "manifest_dependency_node_id", "manifest_id"
  """
  manifest_dependency_manifest_id_manifest_dependency_node_id_idx
}

"""
columns and relationships of "manifest_dependency_edge"
"""
type manifest_dependency_edge {
  """An object relationship"""
  child: manifest_dependency_node!
  child_id: uuid!

  """An object relationship"""
  parent: manifest_dependency_node!
  parent_id: uuid!
}

"""
order by aggregate values of table "manifest_dependency_edge"
"""
input manifest_dependency_edge_aggregate_order_by {
  count: order_by
  max: manifest_dependency_edge_max_order_by
  min: manifest_dependency_edge_min_order_by
}

"""
input type for inserting array relation for remote table "manifest_dependency_edge"
"""
input manifest_dependency_edge_arr_rel_insert_input {
  data: [manifest_dependency_edge_insert_input!]!

  """upsert condition"""
  on_conflict: manifest_dependency_edge_on_conflict
}

"""
Boolean expression to filter rows from the table "manifest_dependency_edge". All fields are combined with a logical 'AND'.
"""
input manifest_dependency_edge_bool_exp {
  _and: [manifest_dependency_edge_bool_exp!]
  _not: manifest_dependency_edge_bool_exp
  _or: [manifest_dependency_edge_bool_exp!]
  child: manifest_dependency_node_bool_exp
  child_id: uuid_comparison_exp
  parent: manifest_dependency_node_bool_exp
  parent_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "manifest_dependency_edge"
"""
enum manifest_dependency_edge_constraint {
  """
  unique or primary key constraint on columns "child_id", "parent_id"
  """
  manifest_dependency_edge_parent_id_child_id_idx
}

"""
input type for inserting data into table "manifest_dependency_edge"
"""
input manifest_dependency_edge_insert_input {
  child: manifest_dependency_node_obj_rel_insert_input
  child_id: uuid
  parent: manifest_dependency_node_obj_rel_insert_input
  parent_id: uuid
}

"""
order by max() on columns of table "manifest_dependency_edge"
"""
input manifest_dependency_edge_max_order_by {
  child_id: order_by
  parent_id: order_by
}

"""
order by min() on columns of table "manifest_dependency_edge"
"""
input manifest_dependency_edge_min_order_by {
  child_id: order_by
  parent_id: order_by
}

"""
response of any mutation on the table "manifest_dependency_edge"
"""
type manifest_dependency_edge_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifest_dependency_edge!]!
}

"""
on_conflict condition type for table "manifest_dependency_edge"
"""
input manifest_dependency_edge_on_conflict {
  constraint: manifest_dependency_edge_constraint!
  update_columns: [manifest_dependency_edge_update_column!]! = []
  where: manifest_dependency_edge_bool_exp
}

"""Ordering options when selecting data from "manifest_dependency_edge"."""
input manifest_dependency_edge_order_by {
  child: manifest_dependency_node_order_by
  child_id: order_by
  parent: manifest_dependency_node_order_by
  parent_id: order_by
}

"""
select columns of table "manifest_dependency_edge"
"""
enum manifest_dependency_edge_select_column {
  """column name"""
  child_id

  """column name"""
  parent_id
}

"""
input type for updating data in table "manifest_dependency_edge"
"""
input manifest_dependency_edge_set_input {
  child_id: uuid
  parent_id: uuid
}

"""
update columns of table "manifest_dependency_edge"
"""
enum manifest_dependency_edge_update_column {
  """column name"""
  child_id

  """column name"""
  parent_id
}

"""
input type for inserting data into table "manifest_dependency"
"""
input manifest_dependency_insert_input {
  manifest_dependency_node: manifest_dependency_node_obj_rel_insert_input

  """entrypoint to dep tree"""
  manifest_dependency_node_id: uuid
  manifest_id: uuid
  resolved_manifest: resolved_manifest_obj_rel_insert_input
}

"""
order by max() on columns of table "manifest_dependency"
"""
input manifest_dependency_max_order_by {
  """entrypoint to dep tree"""
  manifest_dependency_node_id: order_by
  manifest_id: order_by
}

"""
order by min() on columns of table "manifest_dependency"
"""
input manifest_dependency_min_order_by {
  """entrypoint to dep tree"""
  manifest_dependency_node_id: order_by
  manifest_id: order_by
}

"""
response of any mutation on the table "manifest_dependency"
"""
type manifest_dependency_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifest_dependency!]!
}

"""
columns and relationships of "manifest_dependency_node"
"""
type manifest_dependency_node {
  """An array relationship"""
  child_edges(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!

  """
  A computed field, executes function "manifest_dependency_node_child_edges_recursive"
  """
  child_edges_recursive(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]

  """
  merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
  """
  id: uuid!
  labels(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  parent_edges(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!
  range: String!

  """An object relationship"""
  release: package_release!
  release_id: uuid!
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input manifest_dependency_node_append_input {
  labels: jsonb
}

"""
Boolean expression to filter rows from the table "manifest_dependency_node". All fields are combined with a logical 'AND'.
"""
input manifest_dependency_node_bool_exp {
  _and: [manifest_dependency_node_bool_exp!]
  _not: manifest_dependency_node_bool_exp
  _or: [manifest_dependency_node_bool_exp!]
  child_edges: manifest_dependency_edge_bool_exp
  child_edges_recursive: manifest_dependency_edge_bool_exp
  id: uuid_comparison_exp
  labels: jsonb_comparison_exp
  parent_edges: manifest_dependency_edge_bool_exp
  range: String_comparison_exp
  release: package_release_bool_exp
  release_id: uuid_comparison_exp
}

input manifest_dependency_node_child_edges_recursive_args {
  root_node: manifest_dependency_node_scalar
}

"""
unique or primary key constraints on table "manifest_dependency_node"
"""
enum manifest_dependency_node_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  manifest_dependency_node_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input manifest_dependency_node_delete_at_path_input {
  labels: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input manifest_dependency_node_delete_elem_input {
  labels: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input manifest_dependency_node_delete_key_input {
  labels: String
}

"""
input type for inserting data into table "manifest_dependency_node"
"""
input manifest_dependency_node_insert_input {
  child_edges: manifest_dependency_edge_arr_rel_insert_input

  """
  merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
  """
  id: uuid
  labels: jsonb
  parent_edges: manifest_dependency_edge_arr_rel_insert_input
  range: String
  release: package_release_obj_rel_insert_input
  release_id: uuid
}

"""
response of any mutation on the table "manifest_dependency_node"
"""
type manifest_dependency_node_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifest_dependency_node!]!
}

"""
input type for inserting object relation for remote table "manifest_dependency_node"
"""
input manifest_dependency_node_obj_rel_insert_input {
  data: manifest_dependency_node_insert_input!

  """upsert condition"""
  on_conflict: manifest_dependency_node_on_conflict
}

"""
on_conflict condition type for table "manifest_dependency_node"
"""
input manifest_dependency_node_on_conflict {
  constraint: manifest_dependency_node_constraint!
  update_columns: [manifest_dependency_node_update_column!]! = []
  where: manifest_dependency_node_bool_exp
}

"""Ordering options when selecting data from "manifest_dependency_node"."""
input manifest_dependency_node_order_by {
  child_edges_aggregate: manifest_dependency_edge_aggregate_order_by
  child_edges_recursive_aggregate: manifest_dependency_edge_aggregate_order_by
  id: order_by
  labels: order_by
  parent_edges_aggregate: manifest_dependency_edge_aggregate_order_by
  range: order_by
  release: package_release_order_by
  release_id: order_by
}

"""primary key columns input for table: manifest_dependency_node"""
input manifest_dependency_node_pk_columns_input {
  """
  merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
  """
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input manifest_dependency_node_prepend_input {
  labels: jsonb
}

scalar manifest_dependency_node_scalar

"""
select columns of table "manifest_dependency_node"
"""
enum manifest_dependency_node_select_column {
  """column name"""
  id

  """column name"""
  labels

  """column name"""
  range

  """column name"""
  release_id
}

"""
input type for updating data in table "manifest_dependency_node"
"""
input manifest_dependency_node_set_input {
  """
  merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
  """
  id: uuid
  labels: jsonb
  range: String
  release_id: uuid
}

"""
update columns of table "manifest_dependency_node"
"""
enum manifest_dependency_node_update_column {
  """column name"""
  id

  """column name"""
  labels

  """column name"""
  range

  """column name"""
  release_id
}

"""
on_conflict condition type for table "manifest_dependency"
"""
input manifest_dependency_on_conflict {
  constraint: manifest_dependency_constraint!
  update_columns: [manifest_dependency_update_column!]! = []
  where: manifest_dependency_bool_exp
}

"""Ordering options when selecting data from "manifest_dependency"."""
input manifest_dependency_order_by {
  manifest_dependency_node: manifest_dependency_node_order_by
  manifest_dependency_node_id: order_by
  manifest_id: order_by
  resolved_manifest: resolved_manifest_order_by
}

"""
select columns of table "manifest_dependency"
"""
enum manifest_dependency_select_column {
  """column name"""
  manifest_dependency_node_id

  """column name"""
  manifest_id
}

"""
input type for updating data in table "manifest_dependency"
"""
input manifest_dependency_set_input {
  """entrypoint to dep tree"""
  manifest_dependency_node_id: uuid
  manifest_id: uuid
}

"""
update columns of table "manifest_dependency"
"""
enum manifest_dependency_update_column {
  """column name"""
  manifest_dependency_node_id

  """column name"""
  manifest_id
}

"""
columns and relationships of "manifests"
"""
type manifests {
  """An object relationship"""
  build: builds
  build_id: uuid
  created_at: timestamp!
  filename: String!
  id: uuid!
  message: String

  """An object relationship"""
  project: projects!
  project_id: uuid!
  s3_key: String!
  s3_url: String!
  status: String
}

"""
order by aggregate values of table "manifests"
"""
input manifests_aggregate_order_by {
  count: order_by
  max: manifests_max_order_by
  min: manifests_min_order_by
}

"""
input type for inserting array relation for remote table "manifests"
"""
input manifests_arr_rel_insert_input {
  data: [manifests_insert_input!]!

  """upsert condition"""
  on_conflict: manifests_on_conflict
}

"""
Boolean expression to filter rows from the table "manifests". All fields are combined with a logical 'AND'.
"""
input manifests_bool_exp {
  _and: [manifests_bool_exp!]
  _not: manifests_bool_exp
  _or: [manifests_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  filename: String_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  s3_key: String_comparison_exp
  s3_url: String_comparison_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "manifests"
"""
enum manifests_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  manifests_pkey

  """
  unique or primary key constraint on columns "s3_url"
  """
  manifests_s3_url_key
}

"""
input type for inserting data into table "manifests"
"""
input manifests_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project: projects_obj_rel_insert_input
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
order by max() on columns of table "manifests"
"""
input manifests_max_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""
order by min() on columns of table "manifests"
"""
input manifests_min_order_by {
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""
response of any mutation on the table "manifests"
"""
type manifests_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [manifests!]!
}

"""
on_conflict condition type for table "manifests"
"""
input manifests_on_conflict {
  constraint: manifests_constraint!
  update_columns: [manifests_update_column!]! = []
  where: manifests_bool_exp
}

"""Ordering options when selecting data from "manifests"."""
input manifests_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  filename: order_by
  id: order_by
  message: order_by
  project: projects_order_by
  project_id: order_by
  s3_key: order_by
  s3_url: order_by
  status: order_by
}

"""primary key columns input for table: manifests"""
input manifests_pk_columns_input {
  id: uuid!
}

"""
select columns of table "manifests"
"""
enum manifests_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""
input type for updating data in table "manifests"
"""
input manifests_set_input {
  build_id: uuid
  created_at: timestamp
  filename: String
  id: uuid
  message: String
  project_id: uuid
  s3_key: String
  s3_url: String
  status: String
}

"""
update columns of table "manifests"
"""
enum manifests_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  message

  """column name"""
  project_id

  """column name"""
  s3_key

  """column name"""
  s3_url

  """column name"""
  status
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "build_dependency_relationship"
  """
  delete_build_dependency_relationship(
    """filter the rows which have to be deleted"""
    where: build_dependency_relationship_bool_exp!
  ): build_dependency_relationship_mutation_response

  """
  delete single row from the table: "build_dependency_relationship"
  """
  delete_build_dependency_relationship_by_pk(id: uuid!): build_dependency_relationship

  """
  delete data from the table: "builds"
  """
  delete_builds(
    """filter the rows which have to be deleted"""
    where: builds_bool_exp!
  ): builds_mutation_response

  """
  delete single row from the table: "builds"
  """
  delete_builds_by_pk(id: uuid!): builds

  """
  delete data from the table: "guide_related_guides"
  """
  delete_guide_related_guides(
    """filter the rows which have to be deleted"""
    where: guide_related_guides_bool_exp!
  ): guide_related_guides_mutation_response

  """
  delete single row from the table: "guide_related_guides"
  """
  delete_guide_related_guides_by_pk(id: uuid!): guide_related_guides

  """
  delete data from the table: "manifests"
  """
  delete_manifests(
    """filter the rows which have to be deleted"""
    where: manifests_bool_exp!
  ): manifests_mutation_response

  """
  delete single row from the table: "manifests"
  """
  delete_manifests_by_pk(id: uuid!): manifests

  """
  delete data from the table: "package.package"
  """
  delete_package(
    """filter the rows which have to be deleted"""
    where: package_bool_exp!
  ): package_mutation_response

  """
  delete single row from the table: "package.package"
  """
  delete_package_by_pk(id: uuid!): package

  """
  delete data from the table: "vulnerability.range"
  """
  delete_vulnerability_range(
    """filter the rows which have to be deleted"""
    where: vulnerability_range_bool_exp!
  ): vulnerability_range_mutation_response

  """
  delete single row from the table: "vulnerability.range"
  """
  delete_vulnerability_range_by_pk(id: uuid!): vulnerability_range

  """
  insert data into the table: "build_dependency_relationship"
  """
  insert_build_dependency_relationship(
    """the rows to be inserted"""
    objects: [build_dependency_relationship_insert_input!]!

    """upsert condition"""
    on_conflict: build_dependency_relationship_on_conflict
  ): build_dependency_relationship_mutation_response

  """
  insert a single row into the table: "build_dependency_relationship"
  """
  insert_build_dependency_relationship_one(
    """the row to be inserted"""
    object: build_dependency_relationship_insert_input!

    """upsert condition"""
    on_conflict: build_dependency_relationship_on_conflict
  ): build_dependency_relationship

  """
  insert data into the table: "builds"
  """
  insert_builds(
    """the rows to be inserted"""
    objects: [builds_insert_input!]!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds_mutation_response

  """
  insert a single row into the table: "builds"
  """
  insert_builds_one(
    """the row to be inserted"""
    object: builds_insert_input!

    """upsert condition"""
    on_conflict: builds_on_conflict
  ): builds

  """
  insert data into the table: "findings"
  """
  insert_findings(
    """the rows to be inserted"""
    objects: [findings_insert_input!]!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings_mutation_response

  """
  insert a single row into the table: "findings"
  """
  insert_findings_one(
    """the row to be inserted"""
    object: findings_insert_input!

    """upsert condition"""
    on_conflict: findings_on_conflict
  ): findings

  """
  insert data into the table: "github_repositories"
  """
  insert_github_repositories(
    """the rows to be inserted"""
    objects: [github_repositories_insert_input!]!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories_mutation_response

  """
  insert a single row into the table: "github_repositories"
  """
  insert_github_repositories_one(
    """the row to be inserted"""
    object: github_repositories_insert_input!

    """upsert condition"""
    on_conflict: github_repositories_on_conflict
  ): github_repositories

  """
  insert data into the table: "guide_related_guides"
  """
  insert_guide_related_guides(
    """the rows to be inserted"""
    objects: [guide_related_guides_insert_input!]!

    """upsert condition"""
    on_conflict: guide_related_guides_on_conflict
  ): guide_related_guides_mutation_response

  """
  insert a single row into the table: "guide_related_guides"
  """
  insert_guide_related_guides_one(
    """the row to be inserted"""
    object: guide_related_guides_insert_input!

    """upsert condition"""
    on_conflict: guide_related_guides_on_conflict
  ): guide_related_guides

  """
  insert data into the table: "guide_vulnerabilities"
  """
  insert_guide_vulnerabilities(
    """the rows to be inserted"""
    objects: [guide_vulnerabilities_insert_input!]!

    """upsert condition"""
    on_conflict: guide_vulnerabilities_on_conflict
  ): guide_vulnerabilities_mutation_response

  """
  insert a single row into the table: "guide_vulnerabilities"
  """
  insert_guide_vulnerabilities_one(
    """the row to be inserted"""
    object: guide_vulnerabilities_insert_input!

    """upsert condition"""
    on_conflict: guide_vulnerabilities_on_conflict
  ): guide_vulnerabilities

  """
  insert data into the table: "guides"
  """
  insert_guides(
    """the rows to be inserted"""
    objects: [guides_insert_input!]!

    """upsert condition"""
    on_conflict: guides_on_conflict
  ): guides_mutation_response

  """
  insert data into the table: "manifest_dependency"
  """
  insert_manifest_dependency(
    """the rows to be inserted"""
    objects: [manifest_dependency_insert_input!]!

    """upsert condition"""
    on_conflict: manifest_dependency_on_conflict
  ): manifest_dependency_mutation_response

  """
  insert data into the table: "manifest_dependency_edge"
  """
  insert_manifest_dependency_edge(
    """the rows to be inserted"""
    objects: [manifest_dependency_edge_insert_input!]!

    """upsert condition"""
    on_conflict: manifest_dependency_edge_on_conflict
  ): manifest_dependency_edge_mutation_response

  """
  insert a single row into the table: "manifest_dependency_edge"
  """
  insert_manifest_dependency_edge_one(
    """the row to be inserted"""
    object: manifest_dependency_edge_insert_input!

    """upsert condition"""
    on_conflict: manifest_dependency_edge_on_conflict
  ): manifest_dependency_edge

  """
  insert data into the table: "manifest_dependency_node"
  """
  insert_manifest_dependency_node(
    """the rows to be inserted"""
    objects: [manifest_dependency_node_insert_input!]!

    """upsert condition"""
    on_conflict: manifest_dependency_node_on_conflict
  ): manifest_dependency_node_mutation_response

  """
  insert a single row into the table: "manifest_dependency_node"
  """
  insert_manifest_dependency_node_one(
    """the row to be inserted"""
    object: manifest_dependency_node_insert_input!

    """upsert condition"""
    on_conflict: manifest_dependency_node_on_conflict
  ): manifest_dependency_node

  """
  insert a single row into the table: "manifest_dependency"
  """
  insert_manifest_dependency_one(
    """the row to be inserted"""
    object: manifest_dependency_insert_input!

    """upsert condition"""
    on_conflict: manifest_dependency_on_conflict
  ): manifest_dependency

  """
  insert data into the table: "manifests"
  """
  insert_manifests(
    """the rows to be inserted"""
    objects: [manifests_insert_input!]!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests_mutation_response

  """
  insert a single row into the table: "manifests"
  """
  insert_manifests_one(
    """the row to be inserted"""
    object: manifests_insert_input!

    """upsert condition"""
    on_conflict: manifests_on_conflict
  ): manifests

  """
  insert data into the table: "organization_user"
  """
  insert_organization_user(
    """the rows to be inserted"""
    objects: [organization_user_insert_input!]!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user_mutation_response

  """
  insert a single row into the table: "organization_user"
  """
  insert_organization_user_one(
    """the row to be inserted"""
    object: organization_user_insert_input!

    """upsert condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "package.package"
  """
  insert_package(
    """the rows to be inserted"""
    objects: [package_insert_input!]!

    """upsert condition"""
    on_conflict: package_on_conflict
  ): package_mutation_response

  """
  insert data into the table: "package.license"
  """
  insert_package_license(
    """the rows to be inserted"""
    objects: [package_license_insert_input!]!

    """upsert condition"""
    on_conflict: package_license_on_conflict
  ): package_license_mutation_response

  """
  insert a single row into the table: "package.license"
  """
  insert_package_license_one(
    """the row to be inserted"""
    object: package_license_insert_input!

    """upsert condition"""
    on_conflict: package_license_on_conflict
  ): package_license

  """
  insert data into the table: "package.maintainer"
  """
  insert_package_maintainer(
    """the rows to be inserted"""
    objects: [package_maintainer_insert_input!]!

    """upsert condition"""
    on_conflict: package_maintainer_on_conflict
  ): package_maintainer_mutation_response

  """
  insert a single row into the table: "package.maintainer"
  """
  insert_package_maintainer_one(
    """the row to be inserted"""
    object: package_maintainer_insert_input!

    """upsert condition"""
    on_conflict: package_maintainer_on_conflict
  ): package_maintainer

  """
  insert a single row into the table: "package.package"
  """
  insert_package_one(
    """the row to be inserted"""
    object: package_insert_input!

    """upsert condition"""
    on_conflict: package_on_conflict
  ): package

  """
  insert data into the table: "package.package_maintainer"
  """
  insert_package_package_maintainer(
    """the rows to be inserted"""
    objects: [package_package_maintainer_insert_input!]!

    """upsert condition"""
    on_conflict: package_package_maintainer_on_conflict
  ): package_package_maintainer_mutation_response

  """
  insert a single row into the table: "package.package_maintainer"
  """
  insert_package_package_maintainer_one(
    """the row to be inserted"""
    object: package_package_maintainer_insert_input!

    """upsert condition"""
    on_conflict: package_package_maintainer_on_conflict
  ): package_package_maintainer

  """
  insert data into the table: "package.release"
  """
  insert_package_release(
    """the rows to be inserted"""
    objects: [package_release_insert_input!]!

    """upsert condition"""
    on_conflict: package_release_on_conflict
  ): package_release_mutation_response

  """
  insert data into the table: "package.release_dependency"
  """
  insert_package_release_dependency(
    """the rows to be inserted"""
    objects: [package_release_dependency_insert_input!]!

    """upsert condition"""
    on_conflict: package_release_dependency_on_conflict
  ): package_release_dependency_mutation_response

  """
  insert a single row into the table: "package.release_dependency"
  """
  insert_package_release_dependency_one(
    """the row to be inserted"""
    object: package_release_dependency_insert_input!

    """upsert condition"""
    on_conflict: package_release_dependency_on_conflict
  ): package_release_dependency

  """
  insert data into the table: "package.release_license"
  """
  insert_package_release_license(
    """the rows to be inserted"""
    objects: [package_release_license_insert_input!]!

    """upsert condition"""
    on_conflict: package_release_license_on_conflict
  ): package_release_license_mutation_response

  """
  insert a single row into the table: "package.release_license"
  """
  insert_package_release_license_one(
    """the row to be inserted"""
    object: package_release_license_insert_input!

    """upsert condition"""
    on_conflict: package_release_license_on_conflict
  ): package_release_license

  """
  insert a single row into the table: "package.release"
  """
  insert_package_release_one(
    """the row to be inserted"""
    object: package_release_insert_input!

    """upsert condition"""
    on_conflict: package_release_on_conflict
  ): package_release

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "resolved_manifest"
  """
  insert_resolved_manifest(
    """the rows to be inserted"""
    objects: [resolved_manifest_insert_input!]!

    """upsert condition"""
    on_conflict: resolved_manifest_on_conflict
  ): resolved_manifest_mutation_response

  """
  insert a single row into the table: "resolved_manifest"
  """
  insert_resolved_manifest_one(
    """the row to be inserted"""
    object: resolved_manifest_insert_input!

    """upsert condition"""
    on_conflict: resolved_manifest_on_conflict
  ): resolved_manifest

  """
  insert data into the table: "scans"
  """
  insert_scans(
    """the rows to be inserted"""
    objects: [scans_insert_input!]!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans_mutation_response

  """
  insert a single row into the table: "scans"
  """
  insert_scans_one(
    """the row to be inserted"""
    object: scans_insert_input!

    """upsert condition"""
    on_conflict: scans_on_conflict
  ): scans

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "vulnerability.vulnerability"
  """
  insert_vulnerability(
    """the rows to be inserted"""
    objects: [vulnerability_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_on_conflict
  ): vulnerability_mutation_response

  """
  insert data into the table: "vulnerability.affected"
  """
  insert_vulnerability_affected(
    """the rows to be inserted"""
    objects: [vulnerability_affected_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_affected_on_conflict
  ): vulnerability_affected_mutation_response

  """
  insert a single row into the table: "vulnerability.affected"
  """
  insert_vulnerability_affected_one(
    """the row to be inserted"""
    object: vulnerability_affected_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_affected_on_conflict
  ): vulnerability_affected

  """
  insert data into the table: "vulnerability.affected_range_event"
  """
  insert_vulnerability_affected_range_event(
    """the rows to be inserted"""
    objects: [vulnerability_affected_range_event_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_affected_range_event_on_conflict
  ): vulnerability_affected_range_event_mutation_response

  """
  insert a single row into the table: "vulnerability.affected_range_event"
  """
  insert_vulnerability_affected_range_event_one(
    """the row to be inserted"""
    object: vulnerability_affected_range_event_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_affected_range_event_on_conflict
  ): vulnerability_affected_range_event

  """
  insert data into the table: "vulnerability.affected_version"
  """
  insert_vulnerability_affected_version(
    """the rows to be inserted"""
    objects: [vulnerability_affected_version_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_affected_version_on_conflict
  ): vulnerability_affected_version_mutation_response

  """
  insert a single row into the table: "vulnerability.affected_version"
  """
  insert_vulnerability_affected_version_one(
    """the row to be inserted"""
    object: vulnerability_affected_version_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_affected_version_on_conflict
  ): vulnerability_affected_version

  """
  insert data into the table: "vulnerability.credit"
  """
  insert_vulnerability_credit(
    """the rows to be inserted"""
    objects: [vulnerability_credit_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_credit_on_conflict
  ): vulnerability_credit_mutation_response

  """
  insert a single row into the table: "vulnerability.credit"
  """
  insert_vulnerability_credit_one(
    """the row to be inserted"""
    object: vulnerability_credit_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_credit_on_conflict
  ): vulnerability_credit

  """
  insert data into the table: "vulnerability.equivalent"
  """
  insert_vulnerability_equivalent(
    """the rows to be inserted"""
    objects: [vulnerability_equivalent_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_equivalent_on_conflict
  ): vulnerability_equivalent_mutation_response

  """
  insert a single row into the table: "vulnerability.equivalent"
  """
  insert_vulnerability_equivalent_one(
    """the row to be inserted"""
    object: vulnerability_equivalent_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_equivalent_on_conflict
  ): vulnerability_equivalent

  """
  insert a single row into the table: "vulnerability.vulnerability"
  """
  insert_vulnerability_one(
    """the row to be inserted"""
    object: vulnerability_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_on_conflict
  ): vulnerability

  """
  insert data into the table: "vulnerability.range"
  """
  insert_vulnerability_range(
    """the rows to be inserted"""
    objects: [vulnerability_range_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_range_on_conflict
  ): vulnerability_range_mutation_response

  """
  insert a single row into the table: "vulnerability.range"
  """
  insert_vulnerability_range_one(
    """the row to be inserted"""
    object: vulnerability_range_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_range_on_conflict
  ): vulnerability_range

  """
  insert data into the table: "vulnerability.reference"
  """
  insert_vulnerability_reference(
    """the rows to be inserted"""
    objects: [vulnerability_reference_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_reference_on_conflict
  ): vulnerability_reference_mutation_response

  """
  insert a single row into the table: "vulnerability.reference"
  """
  insert_vulnerability_reference_one(
    """the row to be inserted"""
    object: vulnerability_reference_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_reference_on_conflict
  ): vulnerability_reference

  """
  insert data into the table: "vulnerability.severity"
  """
  insert_vulnerability_severity(
    """the rows to be inserted"""
    objects: [vulnerability_severity_insert_input!]!

    """upsert condition"""
    on_conflict: vulnerability_severity_on_conflict
  ): vulnerability_severity_mutation_response

  """
  insert a single row into the table: "vulnerability.severity"
  """
  insert_vulnerability_severity_one(
    """the row to be inserted"""
    object: vulnerability_severity_insert_input!

    """upsert condition"""
    on_conflict: vulnerability_severity_on_conflict
  ): vulnerability_severity

  """
  insert data into the table: "webhook_cache"
  """
  insert_webhook_cache(
    """the rows to be inserted"""
    objects: [webhook_cache_insert_input!]!

    """upsert condition"""
    on_conflict: webhook_cache_on_conflict
  ): webhook_cache_mutation_response

  """
  insert a single row into the table: "webhook_cache"
  """
  insert_webhook_cache_one(
    """the row to be inserted"""
    object: webhook_cache_insert_input!

    """upsert condition"""
    on_conflict: webhook_cache_on_conflict
  ): webhook_cache

  """ get s3 presigned url for manifest upload, used only by the frontend """
  presignManifestUpload(project_id: uuid!): PresignedUrlResponse

  """
  update data of the table: "build_dependency_relationship"
  """
  update_build_dependency_relationship(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: build_dependency_relationship_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: build_dependency_relationship_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: build_dependency_relationship_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: build_dependency_relationship_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: build_dependency_relationship_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: build_dependency_relationship_set_input

    """filter the rows which have to be updated"""
    where: build_dependency_relationship_bool_exp!
  ): build_dependency_relationship_mutation_response

  """
  update single row of the table: "build_dependency_relationship"
  """
  update_build_dependency_relationship_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: build_dependency_relationship_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: build_dependency_relationship_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: build_dependency_relationship_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: build_dependency_relationship_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: build_dependency_relationship_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: build_dependency_relationship_set_input
    pk_columns: build_dependency_relationship_pk_columns_input!
  ): build_dependency_relationship

  """
  update data of the table: "builds"
  """
  update_builds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: builds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: builds_set_input

    """filter the rows which have to be updated"""
    where: builds_bool_exp!
  ): builds_mutation_response

  """
  update single row of the table: "builds"
  """
  update_builds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: builds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: builds_set_input
    pk_columns: builds_pk_columns_input!
  ): builds

  """
  update data of the table: "findings"
  """
  update_findings(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input

    """filter the rows which have to be updated"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  update single row of the table: "findings"
  """
  update_findings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input
    pk_columns: findings_pk_columns_input!
  ): findings

  """
  update data of the table: "github_repositories"
  """
  update_github_repositories(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: github_repositories_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: github_repositories_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: github_repositories_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: github_repositories_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: github_repositories_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: github_repositories_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: github_repositories_set_input

    """filter the rows which have to be updated"""
    where: github_repositories_bool_exp!
  ): github_repositories_mutation_response

  """
  update single row of the table: "github_repositories"
  """
  update_github_repositories_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: github_repositories_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: github_repositories_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: github_repositories_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: github_repositories_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: github_repositories_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: github_repositories_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: github_repositories_set_input
    pk_columns: github_repositories_pk_columns_input!
  ): github_repositories

  """
  update data of the table: "guide_related_guides"
  """
  update_guide_related_guides(
    """sets the columns of the filtered rows to the given values"""
    _set: guide_related_guides_set_input

    """filter the rows which have to be updated"""
    where: guide_related_guides_bool_exp!
  ): guide_related_guides_mutation_response

  """
  update single row of the table: "guide_related_guides"
  """
  update_guide_related_guides_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: guide_related_guides_set_input
    pk_columns: guide_related_guides_pk_columns_input!
  ): guide_related_guides

  """
  update data of the table: "guide_vulnerabilities"
  """
  update_guide_vulnerabilities(
    """sets the columns of the filtered rows to the given values"""
    _set: guide_vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: guide_vulnerabilities_bool_exp!
  ): guide_vulnerabilities_mutation_response

  """
  update single row of the table: "guide_vulnerabilities"
  """
  update_guide_vulnerabilities_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: guide_vulnerabilities_set_input
    pk_columns: guide_vulnerabilities_pk_columns_input!
  ): guide_vulnerabilities

  """
  update data of the table: "guides"
  """
  update_guides(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: guides_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: guides_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: guides_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: guides_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: guides_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: guides_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: guides_set_input

    """filter the rows which have to be updated"""
    where: guides_bool_exp!
  ): guides_mutation_response

  """
  update data of the table: "manifest_dependency"
  """
  update_manifest_dependency(
    """sets the columns of the filtered rows to the given values"""
    _set: manifest_dependency_set_input

    """filter the rows which have to be updated"""
    where: manifest_dependency_bool_exp!
  ): manifest_dependency_mutation_response

  """
  update data of the table: "manifest_dependency_edge"
  """
  update_manifest_dependency_edge(
    """sets the columns of the filtered rows to the given values"""
    _set: manifest_dependency_edge_set_input

    """filter the rows which have to be updated"""
    where: manifest_dependency_edge_bool_exp!
  ): manifest_dependency_edge_mutation_response

  """
  update data of the table: "manifest_dependency_node"
  """
  update_manifest_dependency_node(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: manifest_dependency_node_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: manifest_dependency_node_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: manifest_dependency_node_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: manifest_dependency_node_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: manifest_dependency_node_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: manifest_dependency_node_set_input

    """filter the rows which have to be updated"""
    where: manifest_dependency_node_bool_exp!
  ): manifest_dependency_node_mutation_response

  """
  update single row of the table: "manifest_dependency_node"
  """
  update_manifest_dependency_node_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: manifest_dependency_node_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: manifest_dependency_node_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: manifest_dependency_node_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: manifest_dependency_node_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: manifest_dependency_node_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: manifest_dependency_node_set_input
    pk_columns: manifest_dependency_node_pk_columns_input!
  ): manifest_dependency_node

  """
  update data of the table: "manifests"
  """
  update_manifests(
    """sets the columns of the filtered rows to the given values"""
    _set: manifests_set_input

    """filter the rows which have to be updated"""
    where: manifests_bool_exp!
  ): manifests_mutation_response

  """
  update single row of the table: "manifests"
  """
  update_manifests_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: manifests_set_input
    pk_columns: manifests_pk_columns_input!
  ): manifests

  """
  update data of the table: "organization_user"
  """
  update_organization_user(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input

    """filter the rows which have to be updated"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  update single row of the table: "organization_user"
  """
  update_organization_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input
    pk_columns: organization_user_pk_columns_input!
  ): organization_user

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input

    """filter the rows which have to be updated"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update data of the table: "package.package"
  """
  update_package(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_set_input

    """filter the rows which have to be updated"""
    where: package_bool_exp!
  ): package_mutation_response

  """
  update single row of the table: "package.package"
  """
  update_package_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_set_input
    pk_columns: package_pk_columns_input!
  ): package

  """
  update data of the table: "package.license"
  """
  update_package_license(
    """sets the columns of the filtered rows to the given values"""
    _set: package_license_set_input

    """filter the rows which have to be updated"""
    where: package_license_bool_exp!
  ): package_license_mutation_response

  """
  update single row of the table: "package.license"
  """
  update_package_license_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: package_license_set_input
    pk_columns: package_license_pk_columns_input!
  ): package_license

  """
  update data of the table: "package.maintainer"
  """
  update_package_maintainer(
    """sets the columns of the filtered rows to the given values"""
    _set: package_maintainer_set_input

    """filter the rows which have to be updated"""
    where: package_maintainer_bool_exp!
  ): package_maintainer_mutation_response

  """
  update single row of the table: "package.maintainer"
  """
  update_package_maintainer_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: package_maintainer_set_input
    pk_columns: package_maintainer_pk_columns_input!
  ): package_maintainer

  """
  update data of the table: "package.package_maintainer"
  """
  update_package_package_maintainer(
    """sets the columns of the filtered rows to the given values"""
    _set: package_package_maintainer_set_input

    """filter the rows which have to be updated"""
    where: package_package_maintainer_bool_exp!
  ): package_package_maintainer_mutation_response

  """
  update data of the table: "package.release"
  """
  update_package_release(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_release_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_release_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_release_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_release_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_release_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_release_set_input

    """filter the rows which have to be updated"""
    where: package_release_bool_exp!
  ): package_release_mutation_response

  """
  update single row of the table: "package.release"
  """
  update_package_release_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_release_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_release_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_release_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_release_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_release_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_release_set_input
    pk_columns: package_release_pk_columns_input!
  ): package_release

  """
  update data of the table: "package.release_dependency"
  """
  update_package_release_dependency(
    """sets the columns of the filtered rows to the given values"""
    _set: package_release_dependency_set_input

    """filter the rows which have to be updated"""
    where: package_release_dependency_bool_exp!
  ): package_release_dependency_mutation_response

  """
  update single row of the table: "package.release_dependency"
  """
  update_package_release_dependency_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: package_release_dependency_set_input
    pk_columns: package_release_dependency_pk_columns_input!
  ): package_release_dependency

  """
  update data of the table: "package.release_license"
  """
  update_package_release_license(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_release_license_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_release_license_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_release_license_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_release_license_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_release_license_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_release_license_set_input

    """filter the rows which have to be updated"""
    where: package_release_license_bool_exp!
  ): package_release_license_mutation_response

  """
  update single row of the table: "package.release_license"
  """
  update_package_release_license_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: package_release_license_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: package_release_license_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: package_release_license_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: package_release_license_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: package_release_license_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: package_release_license_set_input
    pk_columns: package_release_license_pk_columns_input!
  ): package_release_license

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "resolved_manifest"
  """
  update_resolved_manifest(
    """sets the columns of the filtered rows to the given values"""
    _set: resolved_manifest_set_input

    """filter the rows which have to be updated"""
    where: resolved_manifest_bool_exp!
  ): resolved_manifest_mutation_response

  """
  update single row of the table: "resolved_manifest"
  """
  update_resolved_manifest_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: resolved_manifest_set_input
    pk_columns: resolved_manifest_pk_columns_input!
  ): resolved_manifest

  """
  update data of the table: "scans"
  """
  update_scans(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scans_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input

    """filter the rows which have to be updated"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  update single row of the table: "scans"
  """
  update_scans_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scans_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input
    pk_columns: scans_pk_columns_input!
  ): scans

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "vulnerability.vulnerability"
  """
  update_vulnerability(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerability_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_bool_exp!
  ): vulnerability_mutation_response

  """
  update data of the table: "vulnerability.affected"
  """
  update_vulnerability_affected(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_affected_bool_exp!
  ): vulnerability_affected_mutation_response

  """
  update single row of the table: "vulnerability.affected"
  """
  update_vulnerability_affected_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_set_input
    pk_columns: vulnerability_affected_pk_columns_input!
  ): vulnerability_affected

  """
  update data of the table: "vulnerability.affected_range_event"
  """
  update_vulnerability_affected_range_event(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_range_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_range_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_range_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_range_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_range_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_range_event_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_affected_range_event_bool_exp!
  ): vulnerability_affected_range_event_mutation_response

  """
  update single row of the table: "vulnerability.affected_range_event"
  """
  update_vulnerability_affected_range_event_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_range_event_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_range_event_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_range_event_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_range_event_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_range_event_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_range_event_set_input
    pk_columns: vulnerability_affected_range_event_pk_columns_input!
  ): vulnerability_affected_range_event

  """
  update data of the table: "vulnerability.affected_version"
  """
  update_vulnerability_affected_version(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_version_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_version_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_version_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_version_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_version_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_version_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_affected_version_bool_exp!
  ): vulnerability_affected_version_mutation_response

  """
  update single row of the table: "vulnerability.affected_version"
  """
  update_vulnerability_affected_version_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_affected_version_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_affected_version_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_affected_version_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_affected_version_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_affected_version_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_affected_version_set_input
    pk_columns: vulnerability_affected_version_pk_columns_input!
  ): vulnerability_affected_version

  """
  update single row of the table: "vulnerability.vulnerability"
  """
  update_vulnerability_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: vulnerability_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: vulnerability_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: vulnerability_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: vulnerability_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerability_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: vulnerability_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_set_input
    pk_columns: vulnerability_pk_columns_input!
  ): vulnerability

  """
  update data of the table: "vulnerability.credit"
  """
  update_vulnerability_credit(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_credit_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_credit_bool_exp!
  ): vulnerability_credit_mutation_response

  """
  update single row of the table: "vulnerability.credit"
  """
  update_vulnerability_credit_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_credit_set_input
    pk_columns: vulnerability_credit_pk_columns_input!
  ): vulnerability_credit

  """
  update data of the table: "vulnerability.equivalent"
  """
  update_vulnerability_equivalent(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_equivalent_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_equivalent_bool_exp!
  ): vulnerability_equivalent_mutation_response

  """
  update data of the table: "vulnerability.range"
  """
  update_vulnerability_range(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_range_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_range_bool_exp!
  ): vulnerability_range_mutation_response

  """
  update single row of the table: "vulnerability.range"
  """
  update_vulnerability_range_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_range_set_input
    pk_columns: vulnerability_range_pk_columns_input!
  ): vulnerability_range

  """
  update data of the table: "vulnerability.reference"
  """
  update_vulnerability_reference(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_reference_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_reference_bool_exp!
  ): vulnerability_reference_mutation_response

  """
  update single row of the table: "vulnerability.reference"
  """
  update_vulnerability_reference_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_reference_set_input
    pk_columns: vulnerability_reference_pk_columns_input!
  ): vulnerability_reference

  """
  update data of the table: "vulnerability.severity"
  """
  update_vulnerability_severity(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_severity_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_severity_bool_exp!
  ): vulnerability_severity_mutation_response

  """
  update single row of the table: "vulnerability.severity"
  """
  update_vulnerability_severity_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_severity_set_input
    pk_columns: vulnerability_severity_pk_columns_input!
  ): vulnerability_severity

  """
  update data of the table: "webhook_cache"
  """
  update_webhook_cache(
    """sets the columns of the filtered rows to the given values"""
    _set: webhook_cache_set_input

    """filter the rows which have to be updated"""
    where: webhook_cache_bool_exp!
  ): webhook_cache_mutation_response

  """
  update single row of the table: "webhook_cache"
  """
  update_webhook_cache_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: webhook_cache_set_input
    pk_columns: webhook_cache_pk_columns_input!
  ): webhook_cache
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""join table"""
type organization_user {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  organization: organizations!
  organization_id: uuid!
  role: organization_user_role!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
order by aggregate values of table "organization_user"
"""
input organization_user_aggregate_order_by {
  count: order_by
  max: organization_user_max_order_by
  min: organization_user_min_order_by
}

"""
input type for inserting array relation for remote table "organization_user"
"""
input organization_user_arr_rel_insert_input {
  data: [organization_user_insert_input!]!

  """upsert condition"""
  on_conflict: organization_user_on_conflict
}

"""
Boolean expression to filter rows from the table "organization_user". All fields are combined with a logical 'AND'.
"""
input organization_user_bool_exp {
  _and: [organization_user_bool_exp!]
  _not: organization_user_bool_exp
  _or: [organization_user_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  role: organization_user_role_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organization_user"
"""
enum organization_user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  organization_user_pkey

  """
  unique or primary key constraint on columns "user_id", "organization_id"
  """
  organization_user_user_id_organization_id_key
}

"""
input type for inserting data into table "organization_user"
"""
input organization_user_insert_input {
  created_at: timestamptz
  id: uuid
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  role: organization_user_role
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""
order by max() on columns of table "organization_user"
"""
input organization_user_max_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  role: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "organization_user"
"""
input organization_user_min_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  role: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "organization_user"
"""
type organization_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization_user!]!
}

"""
on_conflict condition type for table "organization_user"
"""
input organization_user_on_conflict {
  constraint: organization_user_constraint!
  update_columns: [organization_user_update_column!]! = []
  where: organization_user_bool_exp
}

"""Ordering options when selecting data from "organization_user"."""
input organization_user_order_by {
  created_at: order_by
  id: order_by
  organization: organizations_order_by
  organization_id: order_by
  role: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: organization_user"""
input organization_user_pk_columns_input {
  id: uuid!
}

scalar organization_user_role

"""
Boolean expression to compare columns of type "organization_user_role". All fields are combined with logical 'AND'.
"""
input organization_user_role_comparison_exp {
  _eq: organization_user_role
  _gt: organization_user_role
  _gte: organization_user_role
  _in: [organization_user_role!]
  _is_null: Boolean
  _lt: organization_user_role
  _lte: organization_user_role
  _neq: organization_user_role
  _nin: [organization_user_role!]
}

"""
select columns of table "organization_user"
"""
enum organization_user_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  role

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "organization_user"
"""
input organization_user_set_input {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  role: organization_user_role
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "organization_user"
"""
enum organization_user_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  role

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "organizations"
"""
type organizations {
  createdAt: timestamp!

  """An object relationship"""
  creator: users
  creator_id: uuid
  github_id: Int
  github_node_id: String
  id: uuid!
  installation_id: Int
  name: String!

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """An object relationship"""
  settings: settings!
  settings_id: uuid!
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

"""aggregate avg on columns"""
type organizations_avg_fields {
  github_id: Float
  installation_id: Float
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  createdAt: timestamp_comparison_exp
  creator: users_bool_exp
  creator_id: uuid_comparison_exp
  github_id: Int_comparison_exp
  github_node_id: String_comparison_exp
  id: uuid_comparison_exp
  installation_id: Int_comparison_exp
  name: String_comparison_exp
  organization_users: organization_user_bool_exp
  projects: projects_bool_exp
  settings: settings_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """
  unique or primary key constraint on columns "github_id"
  """
  organizations_github_id_key

  """
  unique or primary key constraint on columns "github_node_id"
  """
  organizations_github_node_id_key

  """
  unique or primary key constraint on columns "id"
  """
  organizations_pkey
}

"""
input type for incrementing numeric columns in table "organizations"
"""
input organizations_inc_input {
  github_id: Int
  installation_id: Int
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  createdAt: timestamp
  creator: users_obj_rel_insert_input
  creator_id: uuid
  github_id: Int
  github_node_id: String
  github_owner_type: String
  id: uuid
  installation_id: Int
  name: String
  organization_users: organization_user_arr_rel_insert_input
  projects: projects_arr_rel_insert_input
  settings_id: uuid
}

"""aggregate max on columns"""
type organizations_max_fields {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  github_node_id: String
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""aggregate min on columns"""
type organizations_min_fields {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  github_node_id: String
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!

  """upsert condition"""
  on_conflict: organizations_on_conflict
}

"""
on_conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

"""Ordering options when selecting data from "organizations"."""
input organizations_order_by {
  createdAt: order_by
  creator: users_order_by
  creator_id: order_by
  github_id: order_by
  github_node_id: order_by
  id: order_by
  installation_id: order_by
  name: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
  projects_aggregate: projects_aggregate_order_by
  settings: settings_order_by
  settings_id: order_by
}

"""primary key columns input for table: organizations"""
input organizations_pk_columns_input {
  id: uuid!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """column name"""
  createdAt

  """column name"""
  creator_id

  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  id

  """column name"""
  installation_id

  """column name"""
  name

  """column name"""
  settings_id
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  createdAt: timestamp
  creator_id: uuid
  github_id: Int
  github_node_id: String
  github_owner_type: String
  id: uuid
  installation_id: Int
  name: String
  settings_id: uuid
}

"""aggregate stddev on columns"""
type organizations_stddev_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate stddev_pop on columns"""
type organizations_stddev_pop_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate stddev_samp on columns"""
type organizations_stddev_samp_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate sum on columns"""
type organizations_sum_fields {
  github_id: Int
  installation_id: Int
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """column name"""
  createdAt

  """column name"""
  creator_id

  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  github_owner_type

  """column name"""
  id

  """column name"""
  installation_id

  """column name"""
  name

  """column name"""
  settings_id
}

"""aggregate var_pop on columns"""
type organizations_var_pop_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate var_samp on columns"""
type organizations_var_samp_fields {
  github_id: Float
  installation_id: Float
}

"""aggregate variance on columns"""
type organizations_variance_fields {
  github_id: Float
  installation_id: Float
}

"""
columns and relationships of "package.package"
"""
type package {
  """An array relationship"""
  affected_by_vulnerability(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_bool_exp
  ): [vulnerability_affected!]!
  custom_registry: String!
  description: String
  id: uuid!
  last_failed_fetch: timestamptz
  last_successful_fetch: timestamptz
  name: String!

  """An array relationship"""
  package_maintainers(
    """distinct select on columns"""
    distinct_on: [package_package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_package_maintainer_bool_exp
  ): [package_package_maintainer!]!
  package_manager: package_manager!

  """An array relationship"""
  releases(
    """distinct select on columns"""
    distinct_on: [package_release_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_order_by!]

    """filter the rows returned"""
    where: package_release_bool_exp
  ): [package_release!]!
  upstream_data(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "package.package"
"""
type package_aggregate {
  aggregate: package_aggregate_fields
  nodes: [package!]!
}

"""
aggregate fields of "package.package"
"""
type package_aggregate_fields {
  count(columns: [package_select_column!], distinct: Boolean): Int!
  max: package_max_fields
  min: package_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input package_append_input {
  upstream_data: jsonb
}

"""
Boolean expression to filter rows from the table "package.package". All fields are combined with a logical 'AND'.
"""
input package_bool_exp {
  _and: [package_bool_exp!]
  _not: package_bool_exp
  _or: [package_bool_exp!]
  affected_by_vulnerability: vulnerability_affected_bool_exp
  custom_registry: String_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  last_failed_fetch: timestamptz_comparison_exp
  last_successful_fetch: timestamptz_comparison_exp
  name: String_comparison_exp
  package_maintainers: package_package_maintainer_bool_exp
  package_manager: package_manager_comparison_exp
  releases: package_release_bool_exp
  upstream_data: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "package.package"
"""
enum package_constraint {
  """
  unique or primary key constraint on columns "name", "package_manager", "custom_registry"
  """
  package_package_manager_custom_registry_name_idx

  """
  unique or primary key constraint on columns "id"
  """
  package_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input package_delete_at_path_input {
  upstream_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input package_delete_elem_input {
  upstream_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input package_delete_key_input {
  upstream_data: String
}

"""
input type for inserting data into table "package.package"
"""
input package_insert_input {
  affected_by_vulnerability: vulnerability_affected_arr_rel_insert_input
  custom_registry: String
  description: String
  id: uuid
  last_failed_fetch: timestamptz
  last_successful_fetch: timestamptz
  name: String
  package_maintainers: package_package_maintainer_arr_rel_insert_input
  package_manager: package_manager
  releases: package_release_arr_rel_insert_input
  upstream_data: jsonb
}

"""
columns and relationships of "package.license"
"""
type package_license {
  id: uuid!
  name: String!

  """An array relationship"""
  release_licenses(
    """distinct select on columns"""
    distinct_on: [package_release_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_license_order_by!]

    """filter the rows returned"""
    where: package_release_license_bool_exp
  ): [package_release_license!]!
}

"""
Boolean expression to filter rows from the table "package.license". All fields are combined with a logical 'AND'.
"""
input package_license_bool_exp {
  _and: [package_license_bool_exp!]
  _not: package_license_bool_exp
  _or: [package_license_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  release_licenses: package_release_license_bool_exp
}

"""
unique or primary key constraints on table "package.license"
"""
enum package_license_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  license_name_idx

  """
  unique or primary key constraint on columns "id"
  """
  license_pkey
}

"""
input type for inserting data into table "package.license"
"""
input package_license_insert_input {
  id: uuid
  name: String
  release_licenses: package_release_license_arr_rel_insert_input
}

"""
response of any mutation on the table "package.license"
"""
type package_license_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_license!]!
}

"""
input type for inserting object relation for remote table "package.license"
"""
input package_license_obj_rel_insert_input {
  data: package_license_insert_input!

  """upsert condition"""
  on_conflict: package_license_on_conflict
}

"""
on_conflict condition type for table "package.license"
"""
input package_license_on_conflict {
  constraint: package_license_constraint!
  update_columns: [package_license_update_column!]! = []
  where: package_license_bool_exp
}

"""Ordering options when selecting data from "package.license"."""
input package_license_order_by {
  id: order_by
  name: order_by
  release_licenses_aggregate: package_release_license_aggregate_order_by
}

"""primary key columns input for table: package_license"""
input package_license_pk_columns_input {
  id: uuid!
}

"""
select columns of table "package.license"
"""
enum package_license_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "package.license"
"""
input package_license_set_input {
  id: uuid
  name: String
}

"""
update columns of table "package.license"
"""
enum package_license_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
columns and relationships of "package.maintainer"
"""
type package_maintainer {
  email: String!
  id: uuid!
  name: String

  """An array relationship"""
  package_maintainers(
    """distinct select on columns"""
    distinct_on: [package_package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_package_maintainer_bool_exp
  ): [package_package_maintainer!]!
  package_manager: package_manager

  """An array relationship"""
  published_releases(
    """distinct select on columns"""
    distinct_on: [package_release_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_order_by!]

    """filter the rows returned"""
    where: package_release_bool_exp
  ): [package_release!]!
}

"""
Boolean expression to filter rows from the table "package.maintainer". All fields are combined with a logical 'AND'.
"""
input package_maintainer_bool_exp {
  _and: [package_maintainer_bool_exp!]
  _not: package_maintainer_bool_exp
  _or: [package_maintainer_bool_exp!]
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  package_maintainers: package_package_maintainer_bool_exp
  package_manager: package_manager_comparison_exp
  published_releases: package_release_bool_exp
}

"""
unique or primary key constraints on table "package.maintainer"
"""
enum package_maintainer_constraint {
  """
  unique or primary key constraint on columns "email", "package_manager"
  """
  maintainer_package_manager_email_idx

  """
  unique or primary key constraint on columns "id"
  """
  maintainer_pkey
}

"""
input type for inserting data into table "package.maintainer"
"""
input package_maintainer_insert_input {
  email: String
  id: uuid
  name: String
  package_maintainers: package_package_maintainer_arr_rel_insert_input
  package_manager: package_manager
  published_releases: package_release_arr_rel_insert_input
}

"""
response of any mutation on the table "package.maintainer"
"""
type package_maintainer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_maintainer!]!
}

"""
input type for inserting object relation for remote table "package.maintainer"
"""
input package_maintainer_obj_rel_insert_input {
  data: package_maintainer_insert_input!

  """upsert condition"""
  on_conflict: package_maintainer_on_conflict
}

"""
on_conflict condition type for table "package.maintainer"
"""
input package_maintainer_on_conflict {
  constraint: package_maintainer_constraint!
  update_columns: [package_maintainer_update_column!]! = []
  where: package_maintainer_bool_exp
}

"""Ordering options when selecting data from "package.maintainer"."""
input package_maintainer_order_by {
  email: order_by
  id: order_by
  name: order_by
  package_maintainers_aggregate: package_package_maintainer_aggregate_order_by
  package_manager: order_by
  published_releases_aggregate: package_release_aggregate_order_by
}

"""primary key columns input for table: package_maintainer"""
input package_maintainer_pk_columns_input {
  id: uuid!
}

"""
select columns of table "package.maintainer"
"""
enum package_maintainer_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  package_manager
}

"""
input type for updating data in table "package.maintainer"
"""
input package_maintainer_set_input {
  email: String
  id: uuid
  name: String
  package_manager: package_manager
}

"""
update columns of table "package.maintainer"
"""
enum package_maintainer_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  package_manager
}

scalar package_manager

"""
Boolean expression to compare columns of type "package_manager". All fields are combined with logical 'AND'.
"""
input package_manager_comparison_exp {
  _eq: package_manager
  _gt: package_manager
  _gte: package_manager
  _in: [package_manager!]
  _is_null: Boolean
  _lt: package_manager
  _lte: package_manager
  _neq: package_manager
  _nin: [package_manager!]
}

"""aggregate max on columns"""
type package_max_fields {
  custom_registry: String
  description: String
  id: uuid
  last_failed_fetch: timestamptz
  last_successful_fetch: timestamptz
  name: String
  package_manager: package_manager
}

"""aggregate min on columns"""
type package_min_fields {
  custom_registry: String
  description: String
  id: uuid
  last_failed_fetch: timestamptz
  last_successful_fetch: timestamptz
  name: String
  package_manager: package_manager
}

"""
response of any mutation on the table "package.package"
"""
type package_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package!]!
}

"""
input type for inserting object relation for remote table "package.package"
"""
input package_obj_rel_insert_input {
  data: package_insert_input!

  """upsert condition"""
  on_conflict: package_on_conflict
}

"""
on_conflict condition type for table "package.package"
"""
input package_on_conflict {
  constraint: package_constraint!
  update_columns: [package_update_column!]! = []
  where: package_bool_exp
}

"""Ordering options when selecting data from "package.package"."""
input package_order_by {
  affected_by_vulnerability_aggregate: vulnerability_affected_aggregate_order_by
  custom_registry: order_by
  description: order_by
  id: order_by
  last_failed_fetch: order_by
  last_successful_fetch: order_by
  name: order_by
  package_maintainers_aggregate: package_package_maintainer_aggregate_order_by
  package_manager: order_by
  releases_aggregate: package_release_aggregate_order_by
  upstream_data: order_by
}

"""
columns and relationships of "package.package_maintainer"
"""
type package_package_maintainer {
  """An object relationship"""
  maintainer: package_maintainer
  maintainer_id: uuid

  """An object relationship"""
  package: package
  package_id: uuid
}

"""
order by aggregate values of table "package.package_maintainer"
"""
input package_package_maintainer_aggregate_order_by {
  count: order_by
  max: package_package_maintainer_max_order_by
  min: package_package_maintainer_min_order_by
}

"""
input type for inserting array relation for remote table "package.package_maintainer"
"""
input package_package_maintainer_arr_rel_insert_input {
  data: [package_package_maintainer_insert_input!]!

  """upsert condition"""
  on_conflict: package_package_maintainer_on_conflict
}

"""
Boolean expression to filter rows from the table "package.package_maintainer". All fields are combined with a logical 'AND'.
"""
input package_package_maintainer_bool_exp {
  _and: [package_package_maintainer_bool_exp!]
  _not: package_package_maintainer_bool_exp
  _or: [package_package_maintainer_bool_exp!]
  maintainer: package_maintainer_bool_exp
  maintainer_id: uuid_comparison_exp
  package: package_bool_exp
  package_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "package.package_maintainer"
"""
enum package_package_maintainer_constraint {
  """
  unique or primary key constraint on columns "maintainer_id", "package_id"
  """
  package_maintainer_package_id_maintainer_id_idx
}

"""
input type for inserting data into table "package.package_maintainer"
"""
input package_package_maintainer_insert_input {
  maintainer: package_maintainer_obj_rel_insert_input
  maintainer_id: uuid
  package: package_obj_rel_insert_input
  package_id: uuid
}

"""
order by max() on columns of table "package.package_maintainer"
"""
input package_package_maintainer_max_order_by {
  maintainer_id: order_by
  package_id: order_by
}

"""
order by min() on columns of table "package.package_maintainer"
"""
input package_package_maintainer_min_order_by {
  maintainer_id: order_by
  package_id: order_by
}

"""
response of any mutation on the table "package.package_maintainer"
"""
type package_package_maintainer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_package_maintainer!]!
}

"""
on_conflict condition type for table "package.package_maintainer"
"""
input package_package_maintainer_on_conflict {
  constraint: package_package_maintainer_constraint!
  update_columns: [package_package_maintainer_update_column!]! = []
  where: package_package_maintainer_bool_exp
}

"""
Ordering options when selecting data from "package.package_maintainer".
"""
input package_package_maintainer_order_by {
  maintainer: package_maintainer_order_by
  maintainer_id: order_by
  package: package_order_by
  package_id: order_by
}

"""
select columns of table "package.package_maintainer"
"""
enum package_package_maintainer_select_column {
  """column name"""
  maintainer_id

  """column name"""
  package_id
}

"""
input type for updating data in table "package.package_maintainer"
"""
input package_package_maintainer_set_input {
  maintainer_id: uuid
  package_id: uuid
}

"""
update columns of table "package.package_maintainer"
"""
enum package_package_maintainer_update_column {
  """column name"""
  maintainer_id

  """column name"""
  package_id
}

"""primary key columns input for table: package"""
input package_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input package_prepend_input {
  upstream_data: jsonb
}

"""
columns and relationships of "package.release"
"""
type package_release {
  blob_hash: String

  """An array relationship"""
  build_dependency_relationships(
    """distinct select on columns"""
    distinct_on: [build_dependency_relationship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [build_dependency_relationship_order_by!]

    """filter the rows returned"""
    where: build_dependency_relationship_bool_exp
  ): [build_dependency_relationship!]!
  fetched_time: timestamptz
  id: uuid!
  mirrored_blob_url: String
  observed_time: timestamptz!

  """An object relationship"""
  package: package!
  package_id: uuid!

  """An object relationship"""
  publishing_maintainer: package_maintainer
  publishing_maintainer_id: uuid

  """An array relationship"""
  release_dependencies(
    """distinct select on columns"""
    distinct_on: [package_release_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_dependency_order_by!]

    """filter the rows returned"""
    where: package_release_dependency_bool_exp
  ): [package_release_dependency!]!

  """An array relationship"""
  release_dependents(
    """distinct select on columns"""
    distinct_on: [package_release_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_dependency_order_by!]

    """filter the rows returned"""
    where: package_release_dependency_bool_exp
  ): [package_release_dependency!]!

  """An array relationship"""
  release_licenses(
    """distinct select on columns"""
    distinct_on: [package_release_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_license_order_by!]

    """filter the rows returned"""
    where: package_release_license_bool_exp
  ): [package_release_license!]!
  release_time: timestamptz
  upstream_blob_url: String
  upstream_data(
    """JSON select path"""
    path: String
  ): jsonb
  version: String!
}

"""
order by aggregate values of table "package.release"
"""
input package_release_aggregate_order_by {
  count: order_by
  max: package_release_max_order_by
  min: package_release_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input package_release_append_input {
  upstream_data: jsonb
}

"""
input type for inserting array relation for remote table "package.release"
"""
input package_release_arr_rel_insert_input {
  data: [package_release_insert_input!]!

  """upsert condition"""
  on_conflict: package_release_on_conflict
}

"""
Boolean expression to filter rows from the table "package.release". All fields are combined with a logical 'AND'.
"""
input package_release_bool_exp {
  _and: [package_release_bool_exp!]
  _not: package_release_bool_exp
  _or: [package_release_bool_exp!]
  blob_hash: String_comparison_exp
  build_dependency_relationships: build_dependency_relationship_bool_exp
  fetched_time: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mirrored_blob_url: String_comparison_exp
  observed_time: timestamptz_comparison_exp
  package: package_bool_exp
  package_id: uuid_comparison_exp
  publishing_maintainer: package_maintainer_bool_exp
  publishing_maintainer_id: uuid_comparison_exp
  release_dependencies: package_release_dependency_bool_exp
  release_dependents: package_release_dependency_bool_exp
  release_licenses: package_release_license_bool_exp
  release_time: timestamptz_comparison_exp
  upstream_blob_url: String_comparison_exp
  upstream_data: jsonb_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "package.release"
"""
enum package_release_constraint {
  """
  unique or primary key constraint on columns "package_id", "version"
  """
  release_package_id_version_idx

  """
  unique or primary key constraint on columns "id"
  """
  release_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input package_release_delete_at_path_input {
  upstream_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input package_release_delete_elem_input {
  upstream_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input package_release_delete_key_input {
  upstream_data: String
}

"""
columns and relationships of "package.release_dependency"
"""
type package_release_dependency {
  """An object relationship"""
  dependency_package: package
  dependency_package_id: uuid

  """An object relationship"""
  dependency_release: package_release
  dependency_release_id: uuid
  id: uuid!
  package_name: String!
  package_version_query: String!

  """An object relationship"""
  release: package_release!
  release_id: uuid!
}

"""
order by aggregate values of table "package.release_dependency"
"""
input package_release_dependency_aggregate_order_by {
  count: order_by
  max: package_release_dependency_max_order_by
  min: package_release_dependency_min_order_by
}

"""
input type for inserting array relation for remote table "package.release_dependency"
"""
input package_release_dependency_arr_rel_insert_input {
  data: [package_release_dependency_insert_input!]!

  """upsert condition"""
  on_conflict: package_release_dependency_on_conflict
}

"""
Boolean expression to filter rows from the table "package.release_dependency". All fields are combined with a logical 'AND'.
"""
input package_release_dependency_bool_exp {
  _and: [package_release_dependency_bool_exp!]
  _not: package_release_dependency_bool_exp
  _or: [package_release_dependency_bool_exp!]
  dependency_package: package_bool_exp
  dependency_package_id: uuid_comparison_exp
  dependency_release: package_release_bool_exp
  dependency_release_id: uuid_comparison_exp
  id: uuid_comparison_exp
  package_name: String_comparison_exp
  package_version_query: String_comparison_exp
  release: package_release_bool_exp
  release_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "package.release_dependency"
"""
enum package_release_dependency_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  release_dependency_pkey

  """
  unique or primary key constraint on columns "package_version_query", "package_name", "release_id"
  """
  release_dependency_release_id_package_name_package_version__idx
}

"""
input type for inserting data into table "package.release_dependency"
"""
input package_release_dependency_insert_input {
  dependency_package: package_obj_rel_insert_input
  dependency_package_id: uuid
  dependency_release: package_release_obj_rel_insert_input
  dependency_release_id: uuid
  id: uuid
  package_name: String
  package_version_query: String
  release: package_release_obj_rel_insert_input
  release_id: uuid
}

"""
order by max() on columns of table "package.release_dependency"
"""
input package_release_dependency_max_order_by {
  dependency_package_id: order_by
  dependency_release_id: order_by
  id: order_by
  package_name: order_by
  package_version_query: order_by
  release_id: order_by
}

"""
order by min() on columns of table "package.release_dependency"
"""
input package_release_dependency_min_order_by {
  dependency_package_id: order_by
  dependency_release_id: order_by
  id: order_by
  package_name: order_by
  package_version_query: order_by
  release_id: order_by
}

"""
response of any mutation on the table "package.release_dependency"
"""
type package_release_dependency_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_release_dependency!]!
}

"""
on_conflict condition type for table "package.release_dependency"
"""
input package_release_dependency_on_conflict {
  constraint: package_release_dependency_constraint!
  update_columns: [package_release_dependency_update_column!]! = []
  where: package_release_dependency_bool_exp
}

"""
Ordering options when selecting data from "package.release_dependency".
"""
input package_release_dependency_order_by {
  dependency_package: package_order_by
  dependency_package_id: order_by
  dependency_release: package_release_order_by
  dependency_release_id: order_by
  id: order_by
  package_name: order_by
  package_version_query: order_by
  release: package_release_order_by
  release_id: order_by
}

"""primary key columns input for table: package_release_dependency"""
input package_release_dependency_pk_columns_input {
  id: uuid!
}

"""
select columns of table "package.release_dependency"
"""
enum package_release_dependency_select_column {
  """column name"""
  dependency_package_id

  """column name"""
  dependency_release_id

  """column name"""
  id

  """column name"""
  package_name

  """column name"""
  package_version_query

  """column name"""
  release_id
}

"""
input type for updating data in table "package.release_dependency"
"""
input package_release_dependency_set_input {
  dependency_package_id: uuid
  dependency_release_id: uuid
  id: uuid
  package_name: String
  package_version_query: String
  release_id: uuid
}

"""
update columns of table "package.release_dependency"
"""
enum package_release_dependency_update_column {
  """column name"""
  dependency_package_id

  """column name"""
  dependency_release_id

  """column name"""
  id

  """column name"""
  package_name

  """column name"""
  package_version_query

  """column name"""
  release_id
}

"""
input type for inserting data into table "package.release"
"""
input package_release_insert_input {
  blob_hash: String
  build_dependency_relationships: build_dependency_relationship_arr_rel_insert_input
  fetched_time: timestamptz
  id: uuid
  mirrored_blob_url: String
  observed_time: timestamptz
  package: package_obj_rel_insert_input
  package_id: uuid
  publishing_maintainer: package_maintainer_obj_rel_insert_input
  publishing_maintainer_id: uuid
  release_dependencies: package_release_dependency_arr_rel_insert_input
  release_dependents: package_release_dependency_arr_rel_insert_input
  release_licenses: package_release_license_arr_rel_insert_input
  release_time: timestamptz
  upstream_blob_url: String
  upstream_data: jsonb
  version: String
}

"""
columns and relationships of "package.release_license"
"""
type package_release_license {
  id: uuid!

  """An object relationship"""
  license: package_license!
  license_id: uuid!
  release_id: uuid!
  scan_metadata(
    """JSON select path"""
    path: String
  ): jsonb
  scan_time: timestamptz!
  source: license_source!
}

"""
order by aggregate values of table "package.release_license"
"""
input package_release_license_aggregate_order_by {
  count: order_by
  max: package_release_license_max_order_by
  min: package_release_license_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input package_release_license_append_input {
  scan_metadata: jsonb
}

"""
input type for inserting array relation for remote table "package.release_license"
"""
input package_release_license_arr_rel_insert_input {
  data: [package_release_license_insert_input!]!

  """upsert condition"""
  on_conflict: package_release_license_on_conflict
}

"""
Boolean expression to filter rows from the table "package.release_license". All fields are combined with a logical 'AND'.
"""
input package_release_license_bool_exp {
  _and: [package_release_license_bool_exp!]
  _not: package_release_license_bool_exp
  _or: [package_release_license_bool_exp!]
  id: uuid_comparison_exp
  license: package_license_bool_exp
  license_id: uuid_comparison_exp
  release_id: uuid_comparison_exp
  scan_metadata: jsonb_comparison_exp
  scan_time: timestamptz_comparison_exp
  source: license_source_comparison_exp
}

"""
unique or primary key constraints on table "package.release_license"
"""
enum package_release_license_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  release_license_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input package_release_license_delete_at_path_input {
  scan_metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input package_release_license_delete_elem_input {
  scan_metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input package_release_license_delete_key_input {
  scan_metadata: String
}

"""
input type for inserting data into table "package.release_license"
"""
input package_release_license_insert_input {
  id: uuid
  license: package_license_obj_rel_insert_input
  license_id: uuid
  release_id: uuid
  scan_metadata: jsonb
  scan_time: timestamptz
  source: license_source
}

"""
order by max() on columns of table "package.release_license"
"""
input package_release_license_max_order_by {
  id: order_by
  license_id: order_by
  release_id: order_by
  scan_time: order_by
  source: order_by
}

"""
order by min() on columns of table "package.release_license"
"""
input package_release_license_min_order_by {
  id: order_by
  license_id: order_by
  release_id: order_by
  scan_time: order_by
  source: order_by
}

"""
response of any mutation on the table "package.release_license"
"""
type package_release_license_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_release_license!]!
}

"""
on_conflict condition type for table "package.release_license"
"""
input package_release_license_on_conflict {
  constraint: package_release_license_constraint!
  update_columns: [package_release_license_update_column!]! = []
  where: package_release_license_bool_exp
}

"""Ordering options when selecting data from "package.release_license"."""
input package_release_license_order_by {
  id: order_by
  license: package_license_order_by
  license_id: order_by
  release_id: order_by
  scan_metadata: order_by
  scan_time: order_by
  source: order_by
}

"""primary key columns input for table: package_release_license"""
input package_release_license_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input package_release_license_prepend_input {
  scan_metadata: jsonb
}

"""
select columns of table "package.release_license"
"""
enum package_release_license_select_column {
  """column name"""
  id

  """column name"""
  license_id

  """column name"""
  release_id

  """column name"""
  scan_metadata

  """column name"""
  scan_time

  """column name"""
  source
}

"""
input type for updating data in table "package.release_license"
"""
input package_release_license_set_input {
  id: uuid
  license_id: uuid
  release_id: uuid
  scan_metadata: jsonb
  scan_time: timestamptz
  source: license_source
}

"""
update columns of table "package.release_license"
"""
enum package_release_license_update_column {
  """column name"""
  id

  """column name"""
  license_id

  """column name"""
  release_id

  """column name"""
  scan_metadata

  """column name"""
  scan_time

  """column name"""
  source
}

"""
order by max() on columns of table "package.release"
"""
input package_release_max_order_by {
  blob_hash: order_by
  fetched_time: order_by
  id: order_by
  mirrored_blob_url: order_by
  observed_time: order_by
  package_id: order_by
  publishing_maintainer_id: order_by
  release_time: order_by
  upstream_blob_url: order_by
  version: order_by
}

"""
order by min() on columns of table "package.release"
"""
input package_release_min_order_by {
  blob_hash: order_by
  fetched_time: order_by
  id: order_by
  mirrored_blob_url: order_by
  observed_time: order_by
  package_id: order_by
  publishing_maintainer_id: order_by
  release_time: order_by
  upstream_blob_url: order_by
  version: order_by
}

"""
response of any mutation on the table "package.release"
"""
type package_release_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_release!]!
}

"""
input type for inserting object relation for remote table "package.release"
"""
input package_release_obj_rel_insert_input {
  data: package_release_insert_input!

  """upsert condition"""
  on_conflict: package_release_on_conflict
}

"""
on_conflict condition type for table "package.release"
"""
input package_release_on_conflict {
  constraint: package_release_constraint!
  update_columns: [package_release_update_column!]! = []
  where: package_release_bool_exp
}

"""Ordering options when selecting data from "package.release"."""
input package_release_order_by {
  blob_hash: order_by
  build_dependency_relationships_aggregate: build_dependency_relationship_aggregate_order_by
  fetched_time: order_by
  id: order_by
  mirrored_blob_url: order_by
  observed_time: order_by
  package: package_order_by
  package_id: order_by
  publishing_maintainer: package_maintainer_order_by
  publishing_maintainer_id: order_by
  release_dependencies_aggregate: package_release_dependency_aggregate_order_by
  release_dependents_aggregate: package_release_dependency_aggregate_order_by
  release_licenses_aggregate: package_release_license_aggregate_order_by
  release_time: order_by
  upstream_blob_url: order_by
  upstream_data: order_by
  version: order_by
}

"""primary key columns input for table: package_release"""
input package_release_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input package_release_prepend_input {
  upstream_data: jsonb
}

"""
select columns of table "package.release"
"""
enum package_release_select_column {
  """column name"""
  blob_hash

  """column name"""
  fetched_time

  """column name"""
  id

  """column name"""
  mirrored_blob_url

  """column name"""
  observed_time

  """column name"""
  package_id

  """column name"""
  publishing_maintainer_id

  """column name"""
  release_time

  """column name"""
  upstream_blob_url

  """column name"""
  upstream_data

  """column name"""
  version
}

"""
input type for updating data in table "package.release"
"""
input package_release_set_input {
  blob_hash: String
  fetched_time: timestamptz
  id: uuid
  mirrored_blob_url: String
  observed_time: timestamptz
  package_id: uuid
  publishing_maintainer_id: uuid
  release_time: timestamptz
  upstream_blob_url: String
  upstream_data: jsonb
  version: String
}

"""
update columns of table "package.release"
"""
enum package_release_update_column {
  """column name"""
  blob_hash

  """column name"""
  fetched_time

  """column name"""
  id

  """column name"""
  mirrored_blob_url

  """column name"""
  observed_time

  """column name"""
  package_id

  """column name"""
  publishing_maintainer_id

  """column name"""
  release_time

  """column name"""
  upstream_blob_url

  """column name"""
  upstream_data

  """column name"""
  version
}

"""
select columns of table "package.package"
"""
enum package_select_column {
  """column name"""
  custom_registry

  """column name"""
  description

  """column name"""
  id

  """column name"""
  last_failed_fetch

  """column name"""
  last_successful_fetch

  """column name"""
  name

  """column name"""
  package_manager

  """column name"""
  upstream_data
}

"""
input type for updating data in table "package.package"
"""
input package_set_input {
  custom_registry: String
  description: String
  id: uuid
  last_failed_fetch: timestamptz
  last_successful_fetch: timestamptz
  name: String
  package_manager: package_manager
  upstream_data: jsonb
}

"""
update columns of table "package.package"
"""
enum package_update_column {
  """column name"""
  custom_registry

  """column name"""
  description

  """column name"""
  id

  """column name"""
  last_failed_fetch

  """column name"""
  last_successful_fetch

  """column name"""
  name

  """column name"""
  package_manager

  """column name"""
  upstream_data
}

"""
columns and relationships of "project_access_tokens"
"""
type project_access_tokens {
  access_token: uuid!

  """An object relationship"""
  created_by_user: identities
  id: uuid!

  """An object relationship"""
  project: projects!
  project_uuid: uuid!
}

"""
order by aggregate values of table "project_access_tokens"
"""
input project_access_tokens_aggregate_order_by {
  count: order_by
  max: project_access_tokens_max_order_by
  min: project_access_tokens_min_order_by
}

"""
Boolean expression to filter rows from the table "project_access_tokens". All fields are combined with a logical 'AND'.
"""
input project_access_tokens_bool_exp {
  _and: [project_access_tokens_bool_exp!]
  _not: project_access_tokens_bool_exp
  _or: [project_access_tokens_bool_exp!]
  access_token: uuid_comparison_exp
  created_by_user: identities_bool_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_uuid: uuid_comparison_exp
}

"""
order by max() on columns of table "project_access_tokens"
"""
input project_access_tokens_max_order_by {
  access_token: order_by
  id: order_by
  project_uuid: order_by
}

"""
order by min() on columns of table "project_access_tokens"
"""
input project_access_tokens_min_order_by {
  access_token: order_by
  id: order_by
  project_uuid: order_by
}

"""Ordering options when selecting data from "project_access_tokens"."""
input project_access_tokens_order_by {
  access_token: order_by
  created_by_user: identities_order_by
  id: order_by
  project: projects_order_by
  project_uuid: order_by
}

"""
select columns of table "project_access_tokens"
"""
enum project_access_tokens_select_column {
  """column name"""
  access_token

  """column name"""
  id

  """column name"""
  project_uuid
}

"""
columns and relationships of "projects"
"""
type projects {
  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!
  created_at: timestamp!

  """An array relationship"""
  default_branch_builds(
    """distinct select on columns"""
    distinct_on: [default_branch_builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_branch_builds_order_by!]

    """filter the rows returned"""
    where: default_branch_builds_bool_exp
  ): [default_branch_builds!]!

  """An array relationship"""
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """An object relationship"""
  github_repository: github_repositories
  id: uuid!

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!
  name: String!

  """An object relationship"""
  organization: organizations
  organization_id: uuid

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!
  repo: String

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """An object relationship"""
  settings: settings!
  settings_id: uuid!
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  builds: builds_bool_exp
  created_at: timestamp_comparison_exp
  default_branch_builds: default_branch_builds_bool_exp
  github_repositories: github_repositories_bool_exp
  github_repository: github_repositories_bool_exp
  id: uuid_comparison_exp
  ignored_vulnerabilities: ignored_vulnerabilities_bool_exp
  manifests: manifests_bool_exp
  name: String_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  project_access_tokens: project_access_tokens_bool_exp
  repo: String_comparison_exp
  reports: project_access_tokens_bool_exp
  settings: settings_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """
  unique or primary key constraint on columns "name", "organization_id"
  """
  projects_name_organization_id_key

  """
  unique or primary key constraint on columns "id"
  """
  projects_pkey
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  builds: builds_arr_rel_insert_input
  created_at: timestamp
  default_branch_builds: default_branch_builds_arr_rel_insert_input
  github_repositories: github_repositories_arr_rel_insert_input
  github_repository: github_repositories_obj_rel_insert_input
  id: uuid
  manifests: manifests_arr_rel_insert_input
  name: String
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
on_conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  builds_aggregate: builds_aggregate_order_by
  created_at: order_by
  default_branch_builds_aggregate: default_branch_builds_aggregate_order_by
  github_repositories_aggregate: github_repositories_aggregate_order_by
  github_repository: github_repositories_order_by
  id: order_by
  ignored_vulnerabilities_aggregate: ignored_vulnerabilities_aggregate_order_by
  manifests_aggregate: manifests_aggregate_order_by
  name: order_by
  organization: organizations_order_by
  organization_id: order_by
  project_access_tokens_aggregate: project_access_tokens_aggregate_order_by
  repo: order_by
  reports_aggregate: project_access_tokens_aggregate_order_by
  settings: settings_order_by
  settings_id: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: uuid!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

type query_root {
  authenticatedRepoCloneUrl(repoGithubId: Int!): AuthenticatedRepoCloneUrlOutput

  """
  fetch data from the table: "build_dependency_relationship"
  """
  build_dependency_relationship(
    """distinct select on columns"""
    distinct_on: [build_dependency_relationship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [build_dependency_relationship_order_by!]

    """filter the rows returned"""
    where: build_dependency_relationship_bool_exp
  ): [build_dependency_relationship!]!

  """
  fetch data from the table: "build_dependency_relationship" using primary key columns
  """
  build_dependency_relationship_by_pk(id: uuid!): build_dependency_relationship

  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!

  """fetch data from the table: "builds" using primary key columns"""
  builds_by_pk(id: uuid!): builds

  """An array relationship"""
  default_branch_builds(
    """distinct select on columns"""
    distinct_on: [default_branch_builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_branch_builds_order_by!]

    """filter the rows returned"""
    where: default_branch_builds_bool_exp
  ): [default_branch_builds!]!
  fakeQueryToHackHasuraBeingABuggyMess: String

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings

  """An array relationship"""
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """
  fetch data from the table: "github_repositories" using primary key columns
  """
  github_repositories_by_pk(id: uuid!): github_repositories

  """
  fetch data from the table: "guide_related_guides"
  """
  guide_related_guides(
    """distinct select on columns"""
    distinct_on: [guide_related_guides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [guide_related_guides_order_by!]

    """filter the rows returned"""
    where: guide_related_guides_bool_exp
  ): [guide_related_guides!]!

  """
  fetch data from the table: "guide_related_guides" using primary key columns
  """
  guide_related_guides_by_pk(id: uuid!): guide_related_guides

  """An array relationship"""
  guide_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [guide_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [guide_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: guide_vulnerabilities_bool_exp
  ): [guide_vulnerabilities!]!

  """
  fetch data from the table: "guide_vulnerabilities" using primary key columns
  """
  guide_vulnerabilities_by_pk(id: uuid!): guide_vulnerabilities

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """
  fetch data from the table: "identity_verifiable_addresses" using primary key columns
  """
  identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """
  fetch data from the table: "ignored_vulnerabilities" using primary key columns
  """
  ignored_vulnerabilities_by_pk(id: uuid!): ignored_vulnerabilities

  """
  fetch data from the table: "latest_builds"
  """
  latest_builds(
    """distinct select on columns"""
    distinct_on: [latest_builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [latest_builds_order_by!]

    """filter the rows returned"""
    where: latest_builds_bool_exp
  ): [latest_builds!]!

  """
  fetch data from the table: "manifest_dependency"
  """
  manifest_dependency(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_bool_exp
  ): [manifest_dependency!]!

  """
  fetch data from the table: "manifest_dependency_edge"
  """
  manifest_dependency_edge(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!

  """
  fetch data from the table: "manifest_dependency_node"
  """
  manifest_dependency_node(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_node_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_node_bool_exp
  ): [manifest_dependency_node!]!

  """
  fetch data from the table: "manifest_dependency_node" using primary key columns
  """
  manifest_dependency_node_by_pk(
    """
    merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
    """
    id: uuid!
  ): manifest_dependency_node

  """
  execute function "manifest_dependency_node_child_edges_recursive" which returns "manifest_dependency_edge"
  """
  manifest_dependency_node_child_edges_recursive(
    """
    input parameters for function "manifest_dependency_node_child_edges_recursive"
    """
    args: manifest_dependency_node_child_edges_recursive_args!

    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """fetch data from the table: "manifests" using primary key columns"""
  manifests_by_pk(id: uuid!): manifests

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table: "package.package"
  """
  package(
    """distinct select on columns"""
    distinct_on: [package_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_order_by!]

    """filter the rows returned"""
    where: package_bool_exp
  ): [package!]!

  """
  fetch aggregated fields from the table: "package.package"
  """
  package_aggregate(
    """distinct select on columns"""
    distinct_on: [package_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_order_by!]

    """filter the rows returned"""
    where: package_bool_exp
  ): package_aggregate!

  """fetch data from the table: "package.package" using primary key columns"""
  package_by_pk(id: uuid!): package

  """
  fetch data from the table: "package.license"
  """
  package_license(
    """distinct select on columns"""
    distinct_on: [package_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_license_order_by!]

    """filter the rows returned"""
    where: package_license_bool_exp
  ): [package_license!]!

  """fetch data from the table: "package.license" using primary key columns"""
  package_license_by_pk(id: uuid!): package_license

  """
  fetch data from the table: "package.maintainer"
  """
  package_maintainer(
    """distinct select on columns"""
    distinct_on: [package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_maintainer_bool_exp
  ): [package_maintainer!]!

  """
  fetch data from the table: "package.maintainer" using primary key columns
  """
  package_maintainer_by_pk(id: uuid!): package_maintainer

  """
  fetch data from the table: "package.package_maintainer"
  """
  package_package_maintainer(
    """distinct select on columns"""
    distinct_on: [package_package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_package_maintainer_bool_exp
  ): [package_package_maintainer!]!

  """
  fetch data from the table: "package.release"
  """
  package_release(
    """distinct select on columns"""
    distinct_on: [package_release_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_order_by!]

    """filter the rows returned"""
    where: package_release_bool_exp
  ): [package_release!]!

  """fetch data from the table: "package.release" using primary key columns"""
  package_release_by_pk(id: uuid!): package_release

  """
  fetch data from the table: "package.release_dependency"
  """
  package_release_dependency(
    """distinct select on columns"""
    distinct_on: [package_release_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_dependency_order_by!]

    """filter the rows returned"""
    where: package_release_dependency_bool_exp
  ): [package_release_dependency!]!

  """
  fetch data from the table: "package.release_dependency" using primary key columns
  """
  package_release_dependency_by_pk(id: uuid!): package_release_dependency

  """
  fetch data from the table: "package.release_license"
  """
  package_release_license(
    """distinct select on columns"""
    distinct_on: [package_release_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_license_order_by!]

    """filter the rows returned"""
    where: package_release_license_bool_exp
  ): [package_release_license!]!

  """
  fetch data from the table: "package.release_license" using primary key columns
  """
  package_release_license_by_pk(id: uuid!): package_release_license

  """ get s3 presigned url for manifest upload, used by the CLI """
  presignSbomUpload(buildId: uuid!, orgId: uuid!): SbomUploadUrlOutput

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """
  fetch data from the table: "project_access_tokens" using primary key columns
  """
  project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """
  fetch data from the table: "resolved_manifest"
  """
  resolved_manifest(
    """distinct select on columns"""
    distinct_on: [resolved_manifest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resolved_manifest_order_by!]

    """filter the rows returned"""
    where: resolved_manifest_bool_exp
  ): [resolved_manifest!]!

  """
  fetch data from the table: "resolved_manifest" using primary key columns
  """
  resolved_manifest_by_pk(id: uuid!): resolved_manifest
  sbomUrl(buildId: uuid!): String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "vulnerability.vulnerability"
  """
  vulnerability(
    """distinct select on columns"""
    distinct_on: [vulnerability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_order_by!]

    """filter the rows returned"""
    where: vulnerability_bool_exp
  ): [vulnerability!]!

  """
  fetch data from the table: "vulnerability.affected"
  """
  vulnerability_affected(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_bool_exp
  ): [vulnerability_affected!]!

  """
  fetch data from the table: "vulnerability.affected" using primary key columns
  """
  vulnerability_affected_by_pk(id: uuid!): vulnerability_affected

  """
  fetch data from the table: "vulnerability.affected_range_event"
  """
  vulnerability_affected_range_event(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_range_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_range_event_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_range_event_bool_exp
  ): [vulnerability_affected_range_event!]!

  """
  fetch data from the table: "vulnerability.affected_range_event" using primary key columns
  """
  vulnerability_affected_range_event_by_pk(id: uuid!): vulnerability_affected_range_event

  """
  fetch data from the table: "vulnerability.affected_version"
  """
  vulnerability_affected_version(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_version_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_version_bool_exp
  ): [vulnerability_affected_version!]!

  """
  fetch data from the table: "vulnerability.affected_version" using primary key columns
  """
  vulnerability_affected_version_by_pk(id: uuid!): vulnerability_affected_version

  """
  fetch data from the table: "vulnerability.vulnerability" using primary key columns
  """
  vulnerability_by_pk(id: uuid!): vulnerability

  """
  fetch data from the table: "vulnerability.credit"
  """
  vulnerability_credit(
    """distinct select on columns"""
    distinct_on: [vulnerability_credit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_credit_order_by!]

    """filter the rows returned"""
    where: vulnerability_credit_bool_exp
  ): [vulnerability_credit!]!

  """
  fetch data from the table: "vulnerability.credit" using primary key columns
  """
  vulnerability_credit_by_pk(id: uuid!): vulnerability_credit

  """
  fetch data from the table: "vulnerability.equivalent"
  """
  vulnerability_equivalent(
    """distinct select on columns"""
    distinct_on: [vulnerability_equivalent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_equivalent_order_by!]

    """filter the rows returned"""
    where: vulnerability_equivalent_bool_exp
  ): [vulnerability_equivalent!]!

  """
  fetch data from the table: "vulnerability.range"
  """
  vulnerability_range(
    """distinct select on columns"""
    distinct_on: [vulnerability_range_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_range_order_by!]

    """filter the rows returned"""
    where: vulnerability_range_bool_exp
  ): [vulnerability_range!]!

  """
  fetch data from the table: "vulnerability.range" using primary key columns
  """
  vulnerability_range_by_pk(id: uuid!): vulnerability_range

  """
  fetch data from the table: "vulnerability.reference"
  """
  vulnerability_reference(
    """distinct select on columns"""
    distinct_on: [vulnerability_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_reference_order_by!]

    """filter the rows returned"""
    where: vulnerability_reference_bool_exp
  ): [vulnerability_reference!]!

  """
  fetch data from the table: "vulnerability.reference" using primary key columns
  """
  vulnerability_reference_by_pk(id: uuid!): vulnerability_reference

  """
  fetch data from the table: "vulnerability.severity"
  """
  vulnerability_severity(
    """distinct select on columns"""
    distinct_on: [vulnerability_severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_severity_order_by!]

    """filter the rows returned"""
    where: vulnerability_severity_bool_exp
  ): [vulnerability_severity!]!

  """
  fetch data from the table: "vulnerability.severity" using primary key columns
  """
  vulnerability_severity_by_pk(id: uuid!): vulnerability_severity

  """
  fetch data from the table: "webhook_cache"
  """
  webhook_cache(
    """distinct select on columns"""
    distinct_on: [webhook_cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [webhook_cache_order_by!]

    """filter the rows returned"""
    where: webhook_cache_bool_exp
  ): [webhook_cache!]!

  """fetch data from the table: "webhook_cache" using primary key columns"""
  webhook_cache_by_pk(delivery_id: uuid!): webhook_cache
}

scalar reference_type

"""
Boolean expression to compare columns of type "reference_type". All fields are combined with logical 'AND'.
"""
input reference_type_comparison_exp {
  _eq: reference_type
  _gt: reference_type
  _gte: reference_type
  _in: [reference_type!]
  _is_null: Boolean
  _lt: reference_type
  _lte: reference_type
  _neq: reference_type
  _nin: [reference_type!]
}

"""
columns and relationships of "resolved_manifest"
"""
type resolved_manifest {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  id: uuid!

  """An array relationship"""
  manifest_dependencies(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_bool_exp
  ): [manifest_dependency!]!

  """
  path in repo of manifest file. empty string if the ecosystem does not have a manifest file.
  """
  path: String
}

"""
order by aggregate values of table "resolved_manifest"
"""
input resolved_manifest_aggregate_order_by {
  count: order_by
  max: resolved_manifest_max_order_by
  min: resolved_manifest_min_order_by
}

"""
input type for inserting array relation for remote table "resolved_manifest"
"""
input resolved_manifest_arr_rel_insert_input {
  data: [resolved_manifest_insert_input!]!

  """upsert condition"""
  on_conflict: resolved_manifest_on_conflict
}

"""
Boolean expression to filter rows from the table "resolved_manifest". All fields are combined with a logical 'AND'.
"""
input resolved_manifest_bool_exp {
  _and: [resolved_manifest_bool_exp!]
  _not: resolved_manifest_bool_exp
  _or: [resolved_manifest_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  id: uuid_comparison_exp
  manifest_dependencies: manifest_dependency_bool_exp
  path: String_comparison_exp
}

"""
unique or primary key constraints on table "resolved_manifest"
"""
enum resolved_manifest_constraint {
  """
  unique or primary key constraint on columns "build_id", "path"
  """
  manifest_build_id_path_idx

  """
  unique or primary key constraint on columns "id"
  """
  manifest_pkey
}

"""
input type for inserting data into table "resolved_manifest"
"""
input resolved_manifest_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  id: uuid
  manifest_dependencies: manifest_dependency_arr_rel_insert_input

  """
  path in repo of manifest file. empty string if the ecosystem does not have a manifest file.
  """
  path: String
}

"""
order by max() on columns of table "resolved_manifest"
"""
input resolved_manifest_max_order_by {
  build_id: order_by
  id: order_by

  """
  path in repo of manifest file. empty string if the ecosystem does not have a manifest file.
  """
  path: order_by
}

"""
order by min() on columns of table "resolved_manifest"
"""
input resolved_manifest_min_order_by {
  build_id: order_by
  id: order_by

  """
  path in repo of manifest file. empty string if the ecosystem does not have a manifest file.
  """
  path: order_by
}

"""
response of any mutation on the table "resolved_manifest"
"""
type resolved_manifest_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [resolved_manifest!]!
}

"""
input type for inserting object relation for remote table "resolved_manifest"
"""
input resolved_manifest_obj_rel_insert_input {
  data: resolved_manifest_insert_input!

  """upsert condition"""
  on_conflict: resolved_manifest_on_conflict
}

"""
on_conflict condition type for table "resolved_manifest"
"""
input resolved_manifest_on_conflict {
  constraint: resolved_manifest_constraint!
  update_columns: [resolved_manifest_update_column!]! = []
  where: resolved_manifest_bool_exp
}

"""Ordering options when selecting data from "resolved_manifest"."""
input resolved_manifest_order_by {
  build: builds_order_by
  build_id: order_by
  id: order_by
  manifest_dependencies_aggregate: manifest_dependency_aggregate_order_by
  path: order_by
}

"""primary key columns input for table: resolved_manifest"""
input resolved_manifest_pk_columns_input {
  id: uuid!
}

"""
select columns of table "resolved_manifest"
"""
enum resolved_manifest_select_column {
  """column name"""
  build_id

  """column name"""
  id

  """column name"""
  path
}

"""
input type for updating data in table "resolved_manifest"
"""
input resolved_manifest_set_input {
  build_id: uuid
  id: uuid

  """
  path in repo of manifest file. empty string if the ecosystem does not have a manifest file.
  """
  path: String
}

"""
update columns of table "resolved_manifest"
"""
enum resolved_manifest_update_column {
  """column name"""
  build_id

  """column name"""
  id

  """column name"""
  path
}

"""An individual time a scan was run on a build"""
type scans {
  """An object relationship"""
  build: builds!
  build_id: uuid!
  created_at: timestamp!
  db_date: date!
  distro_name: String!
  distro_version: String!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!
  grype_version: String!
  id: uuid!
  scan_number: Int
  source_type: String!
  target: String!
}

"""
order by aggregate values of table "scans"
"""
input scans_aggregate_order_by {
  avg: scans_avg_order_by
  count: order_by
  max: scans_max_order_by
  min: scans_min_order_by
  stddev: scans_stddev_order_by
  stddev_pop: scans_stddev_pop_order_by
  stddev_samp: scans_stddev_samp_order_by
  sum: scans_sum_order_by
  var_pop: scans_var_pop_order_by
  var_samp: scans_var_samp_order_by
  variance: scans_variance_order_by
}

"""
input type for inserting array relation for remote table "scans"
"""
input scans_arr_rel_insert_input {
  data: [scans_insert_input!]!

  """upsert condition"""
  on_conflict: scans_on_conflict
}

"""
order by avg() on columns of table "scans"
"""
input scans_avg_order_by {
  scan_number: order_by
}

"""
Boolean expression to filter rows from the table "scans". All fields are combined with a logical 'AND'.
"""
input scans_bool_exp {
  _and: [scans_bool_exp!]
  _not: scans_bool_exp
  _or: [scans_bool_exp!]
  build: builds_bool_exp
  build_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  db_date: date_comparison_exp
  distro_name: String_comparison_exp
  distro_version: String_comparison_exp
  findings: findings_bool_exp
  grype_version: String_comparison_exp
  id: uuid_comparison_exp
  scan_number: Int_comparison_exp
  source_type: String_comparison_exp
  target: String_comparison_exp
}

"""
unique or primary key constraints on table "scans"
"""
enum scans_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  scans_pkey

  """
  unique or primary key constraint on columns "scan_number", "build_id"
  """
  scans_scan_number_build_id_key
}

"""
input type for incrementing numeric columns in table "scans"
"""
input scans_inc_input {
  scan_number: Int
}

"""
input type for inserting data into table "scans"
"""
input scans_insert_input {
  build: builds_obj_rel_insert_input
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  findings: findings_arr_rel_insert_input
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""
order by max() on columns of table "scans"
"""
input scans_max_order_by {
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""
order by min() on columns of table "scans"
"""
input scans_min_order_by {
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""
response of any mutation on the table "scans"
"""
type scans_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [scans!]!
}

"""
input type for inserting object relation for remote table "scans"
"""
input scans_obj_rel_insert_input {
  data: scans_insert_input!

  """upsert condition"""
  on_conflict: scans_on_conflict
}

"""
on_conflict condition type for table "scans"
"""
input scans_on_conflict {
  constraint: scans_constraint!
  update_columns: [scans_update_column!]! = []
  where: scans_bool_exp
}

"""Ordering options when selecting data from "scans"."""
input scans_order_by {
  build: builds_order_by
  build_id: order_by
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  findings_aggregate: findings_aggregate_order_by
  grype_version: order_by
  id: order_by
  scan_number: order_by
  source_type: order_by
  target: order_by
}

"""primary key columns input for table: scans"""
input scans_pk_columns_input {
  id: uuid!
}

"""
select columns of table "scans"
"""
enum scans_select_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  scan_number

  """column name"""
  source_type

  """column name"""
  target
}

"""
input type for updating data in table "scans"
"""
input scans_set_input {
  build_id: uuid
  created_at: timestamp
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  scan_number: Int
  source_type: String
  target: String
}

"""
order by stddev() on columns of table "scans"
"""
input scans_stddev_order_by {
  scan_number: order_by
}

"""
order by stddev_pop() on columns of table "scans"
"""
input scans_stddev_pop_order_by {
  scan_number: order_by
}

"""
order by stddev_samp() on columns of table "scans"
"""
input scans_stddev_samp_order_by {
  scan_number: order_by
}

"""
order by sum() on columns of table "scans"
"""
input scans_sum_order_by {
  scan_number: order_by
}

"""
update columns of table "scans"
"""
enum scans_update_column {
  """column name"""
  build_id

  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  scan_number

  """column name"""
  source_type

  """column name"""
  target
}

"""
order by var_pop() on columns of table "scans"
"""
input scans_var_pop_order_by {
  scan_number: order_by
}

"""
order by var_samp() on columns of table "scans"
"""
input scans_var_samp_order_by {
  scan_number: order_by
}

"""
order by variance() on columns of table "scans"
"""
input scans_variance_order_by {
  scan_number: order_by
}

"""
columns and relationships of "settings"
"""
type settings {
  created_at: timestamp!
  id: uuid!

  """An object relationship"""
  organization: organizations
  pr_check_enabled: Boolean
  pr_feedback_disabled: Boolean

  """An object relationship"""
  project: projects
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  pr_check_enabled: Boolean_comparison_exp
  pr_feedback_disabled: Boolean_comparison_exp
  project: projects_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  created_at: order_by
  id: order_by
  organization: organizations_order_by
  pr_check_enabled: order_by
  pr_feedback_disabled: order_by
  project: projects_order_by
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  pr_check_enabled

  """column name"""
  pr_feedback_disabled
}

scalar severity_enum

"""
Boolean expression to compare columns of type "severity_enum". All fields are combined with logical 'AND'.
"""
input severity_enum_comparison_exp {
  _eq: severity_enum
  _gt: severity_enum
  _gte: severity_enum
  _in: [severity_enum!]
  _is_null: Boolean
  _lt: severity_enum
  _lte: severity_enum
  _neq: severity_enum
  _nin: [severity_enum!]
}

type subscription_root {
  """
  fetch data from the table: "build_dependency_relationship"
  """
  build_dependency_relationship(
    """distinct select on columns"""
    distinct_on: [build_dependency_relationship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [build_dependency_relationship_order_by!]

    """filter the rows returned"""
    where: build_dependency_relationship_bool_exp
  ): [build_dependency_relationship!]!

  """
  fetch data from the table: "build_dependency_relationship" using primary key columns
  """
  build_dependency_relationship_by_pk(id: uuid!): build_dependency_relationship

  """An array relationship"""
  builds(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): [builds!]!

  """An aggregate relationship"""
  builds_aggregate(
    """distinct select on columns"""
    distinct_on: [builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [builds_order_by!]

    """filter the rows returned"""
    where: builds_bool_exp
  ): builds_aggregate!

  """fetch data from the table: "builds" using primary key columns"""
  builds_by_pk(id: uuid!): builds

  """An array relationship"""
  default_branch_builds(
    """distinct select on columns"""
    distinct_on: [default_branch_builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_branch_builds_order_by!]

    """filter the rows returned"""
    where: default_branch_builds_bool_exp
  ): [default_branch_builds!]!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings

  """An array relationship"""
  github_repositories(
    """distinct select on columns"""
    distinct_on: [github_repositories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [github_repositories_order_by!]

    """filter the rows returned"""
    where: github_repositories_bool_exp
  ): [github_repositories!]!

  """
  fetch data from the table: "github_repositories" using primary key columns
  """
  github_repositories_by_pk(id: uuid!): github_repositories

  """
  fetch data from the table: "guide_related_guides"
  """
  guide_related_guides(
    """distinct select on columns"""
    distinct_on: [guide_related_guides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [guide_related_guides_order_by!]

    """filter the rows returned"""
    where: guide_related_guides_bool_exp
  ): [guide_related_guides!]!

  """
  fetch data from the table: "guide_related_guides" using primary key columns
  """
  guide_related_guides_by_pk(id: uuid!): guide_related_guides

  """An array relationship"""
  guide_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [guide_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [guide_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: guide_vulnerabilities_bool_exp
  ): [guide_vulnerabilities!]!

  """
  fetch data from the table: "guide_vulnerabilities" using primary key columns
  """
  guide_vulnerabilities_by_pk(id: uuid!): guide_vulnerabilities

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """An array relationship"""
  identity_verifiable_addresses(
    """distinct select on columns"""
    distinct_on: [identity_verifiable_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_verifiable_addresses_order_by!]

    """filter the rows returned"""
    where: identity_verifiable_addresses_bool_exp
  ): [identity_verifiable_addresses!]!

  """
  fetch data from the table: "identity_verifiable_addresses" using primary key columns
  """
  identity_verifiable_addresses_by_pk(id: uuid!): identity_verifiable_addresses

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!

  """
  fetch data from the table: "ignored_vulnerabilities" using primary key columns
  """
  ignored_vulnerabilities_by_pk(id: uuid!): ignored_vulnerabilities

  """
  fetch data from the table: "latest_builds"
  """
  latest_builds(
    """distinct select on columns"""
    distinct_on: [latest_builds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [latest_builds_order_by!]

    """filter the rows returned"""
    where: latest_builds_bool_exp
  ): [latest_builds!]!

  """
  fetch data from the table: "manifest_dependency"
  """
  manifest_dependency(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_bool_exp
  ): [manifest_dependency!]!

  """
  fetch data from the table: "manifest_dependency_edge"
  """
  manifest_dependency_edge(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!

  """
  fetch data from the table: "manifest_dependency_node"
  """
  manifest_dependency_node(
    """distinct select on columns"""
    distinct_on: [manifest_dependency_node_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_node_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_node_bool_exp
  ): [manifest_dependency_node!]!

  """
  fetch data from the table: "manifest_dependency_node" using primary key columns
  """
  manifest_dependency_node_by_pk(
    """
    merkle tree hash of dependency relationship and its transitive dependencies. not a random UUID.
    """
    id: uuid!
  ): manifest_dependency_node

  """
  execute function "manifest_dependency_node_child_edges_recursive" which returns "manifest_dependency_edge"
  """
  manifest_dependency_node_child_edges_recursive(
    """
    input parameters for function "manifest_dependency_node_child_edges_recursive"
    """
    args: manifest_dependency_node_child_edges_recursive_args!

    """distinct select on columns"""
    distinct_on: [manifest_dependency_edge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifest_dependency_edge_order_by!]

    """filter the rows returned"""
    where: manifest_dependency_edge_bool_exp
  ): [manifest_dependency_edge!]!

  """An array relationship"""
  manifests(
    """distinct select on columns"""
    distinct_on: [manifests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manifests_order_by!]

    """filter the rows returned"""
    where: manifests_bool_exp
  ): [manifests!]!

  """fetch data from the table: "manifests" using primary key columns"""
  manifests_by_pk(id: uuid!): manifests

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table: "package.package"
  """
  package(
    """distinct select on columns"""
    distinct_on: [package_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_order_by!]

    """filter the rows returned"""
    where: package_bool_exp
  ): [package!]!

  """
  fetch aggregated fields from the table: "package.package"
  """
  package_aggregate(
    """distinct select on columns"""
    distinct_on: [package_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_order_by!]

    """filter the rows returned"""
    where: package_bool_exp
  ): package_aggregate!

  """fetch data from the table: "package.package" using primary key columns"""
  package_by_pk(id: uuid!): package

  """
  fetch data from the table: "package.license"
  """
  package_license(
    """distinct select on columns"""
    distinct_on: [package_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_license_order_by!]

    """filter the rows returned"""
    where: package_license_bool_exp
  ): [package_license!]!

  """fetch data from the table: "package.license" using primary key columns"""
  package_license_by_pk(id: uuid!): package_license

  """
  fetch data from the table: "package.maintainer"
  """
  package_maintainer(
    """distinct select on columns"""
    distinct_on: [package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_maintainer_bool_exp
  ): [package_maintainer!]!

  """
  fetch data from the table: "package.maintainer" using primary key columns
  """
  package_maintainer_by_pk(id: uuid!): package_maintainer

  """
  fetch data from the table: "package.package_maintainer"
  """
  package_package_maintainer(
    """distinct select on columns"""
    distinct_on: [package_package_maintainer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_package_maintainer_order_by!]

    """filter the rows returned"""
    where: package_package_maintainer_bool_exp
  ): [package_package_maintainer!]!

  """
  fetch data from the table: "package.release"
  """
  package_release(
    """distinct select on columns"""
    distinct_on: [package_release_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_order_by!]

    """filter the rows returned"""
    where: package_release_bool_exp
  ): [package_release!]!

  """fetch data from the table: "package.release" using primary key columns"""
  package_release_by_pk(id: uuid!): package_release

  """
  fetch data from the table: "package.release_dependency"
  """
  package_release_dependency(
    """distinct select on columns"""
    distinct_on: [package_release_dependency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_dependency_order_by!]

    """filter the rows returned"""
    where: package_release_dependency_bool_exp
  ): [package_release_dependency!]!

  """
  fetch data from the table: "package.release_dependency" using primary key columns
  """
  package_release_dependency_by_pk(id: uuid!): package_release_dependency

  """
  fetch data from the table: "package.release_license"
  """
  package_release_license(
    """distinct select on columns"""
    distinct_on: [package_release_license_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_release_license_order_by!]

    """filter the rows returned"""
    where: package_release_license_bool_exp
  ): [package_release_license!]!

  """
  fetch data from the table: "package.release_license" using primary key columns
  """
  package_release_license_by_pk(id: uuid!): package_release_license

  """An array relationship"""
  project_access_tokens(
    """distinct select on columns"""
    distinct_on: [project_access_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_access_tokens_order_by!]

    """filter the rows returned"""
    where: project_access_tokens_bool_exp
  ): [project_access_tokens!]!

  """
  fetch data from the table: "project_access_tokens" using primary key columns
  """
  project_access_tokens_by_pk(id: uuid!): project_access_tokens

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """
  fetch data from the table: "resolved_manifest"
  """
  resolved_manifest(
    """distinct select on columns"""
    distinct_on: [resolved_manifest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resolved_manifest_order_by!]

    """filter the rows returned"""
    where: resolved_manifest_bool_exp
  ): [resolved_manifest!]!

  """
  fetch data from the table: "resolved_manifest" using primary key columns
  """
  resolved_manifest_by_pk(id: uuid!): resolved_manifest

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "vulnerability.vulnerability"
  """
  vulnerability(
    """distinct select on columns"""
    distinct_on: [vulnerability_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_order_by!]

    """filter the rows returned"""
    where: vulnerability_bool_exp
  ): [vulnerability!]!

  """
  fetch data from the table: "vulnerability.affected"
  """
  vulnerability_affected(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_bool_exp
  ): [vulnerability_affected!]!

  """
  fetch data from the table: "vulnerability.affected" using primary key columns
  """
  vulnerability_affected_by_pk(id: uuid!): vulnerability_affected

  """
  fetch data from the table: "vulnerability.affected_range_event"
  """
  vulnerability_affected_range_event(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_range_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_range_event_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_range_event_bool_exp
  ): [vulnerability_affected_range_event!]!

  """
  fetch data from the table: "vulnerability.affected_range_event" using primary key columns
  """
  vulnerability_affected_range_event_by_pk(id: uuid!): vulnerability_affected_range_event

  """
  fetch data from the table: "vulnerability.affected_version"
  """
  vulnerability_affected_version(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_version_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_version_bool_exp
  ): [vulnerability_affected_version!]!

  """
  fetch data from the table: "vulnerability.affected_version" using primary key columns
  """
  vulnerability_affected_version_by_pk(id: uuid!): vulnerability_affected_version

  """
  fetch data from the table: "vulnerability.vulnerability" using primary key columns
  """
  vulnerability_by_pk(id: uuid!): vulnerability

  """
  fetch data from the table: "vulnerability.credit"
  """
  vulnerability_credit(
    """distinct select on columns"""
    distinct_on: [vulnerability_credit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_credit_order_by!]

    """filter the rows returned"""
    where: vulnerability_credit_bool_exp
  ): [vulnerability_credit!]!

  """
  fetch data from the table: "vulnerability.credit" using primary key columns
  """
  vulnerability_credit_by_pk(id: uuid!): vulnerability_credit

  """
  fetch data from the table: "vulnerability.equivalent"
  """
  vulnerability_equivalent(
    """distinct select on columns"""
    distinct_on: [vulnerability_equivalent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_equivalent_order_by!]

    """filter the rows returned"""
    where: vulnerability_equivalent_bool_exp
  ): [vulnerability_equivalent!]!

  """
  fetch data from the table: "vulnerability.range"
  """
  vulnerability_range(
    """distinct select on columns"""
    distinct_on: [vulnerability_range_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_range_order_by!]

    """filter the rows returned"""
    where: vulnerability_range_bool_exp
  ): [vulnerability_range!]!

  """
  fetch data from the table: "vulnerability.range" using primary key columns
  """
  vulnerability_range_by_pk(id: uuid!): vulnerability_range

  """
  fetch data from the table: "vulnerability.reference"
  """
  vulnerability_reference(
    """distinct select on columns"""
    distinct_on: [vulnerability_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_reference_order_by!]

    """filter the rows returned"""
    where: vulnerability_reference_bool_exp
  ): [vulnerability_reference!]!

  """
  fetch data from the table: "vulnerability.reference" using primary key columns
  """
  vulnerability_reference_by_pk(id: uuid!): vulnerability_reference

  """
  fetch data from the table: "vulnerability.severity"
  """
  vulnerability_severity(
    """distinct select on columns"""
    distinct_on: [vulnerability_severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_severity_order_by!]

    """filter the rows returned"""
    where: vulnerability_severity_bool_exp
  ): [vulnerability_severity!]!

  """
  fetch data from the table: "vulnerability.severity" using primary key columns
  """
  vulnerability_severity_by_pk(id: uuid!): vulnerability_severity

  """
  fetch data from the table: "webhook_cache"
  """
  webhook_cache(
    """distinct select on columns"""
    distinct_on: [webhook_cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [webhook_cache_order_by!]

    """filter the rows returned"""
    where: webhook_cache_bool_exp
  ): [webhook_cache!]!

  """fetch data from the table: "webhook_cache" using primary key columns"""
  webhook_cache_by_pk(delivery_id: uuid!): webhook_cache
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar user_role

"""
Boolean expression to compare columns of type "user_role". All fields are combined with logical 'AND'.
"""
input user_role_comparison_exp {
  _eq: user_role
  _gt: user_role
  _gte: user_role
  _in: [user_role!]
  _is_null: Boolean
  _lt: user_role
  _lte: user_role
  _neq: user_role
  _nin: [user_role!]
}

"""
LunaTrace users, identified by their various auth identifiers (ex. github, kratos, etc.)
"""
type users {
  github_id: String
  github_node_id: String
  id: uuid!
  kratos_id: uuid

  """An object relationship"""
  kratos_identity: identities
  role: user_role!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  github_id: String_comparison_exp
  github_node_id: String_comparison_exp
  id: uuid_comparison_exp
  kratos_id: uuid_comparison_exp
  kratos_identity: identities_bool_exp
  role: user_role_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "github_id"
  """
  users_github_id_key

  """
  unique or primary key constraint on columns "github_node_id"
  """
  users_github_node_id_key

  """
  unique or primary key constraint on columns "kratos_id"
  """
  users_kratos_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  github_id: String
  github_node_id: String
  id: uuid
  kratos_id: uuid
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  github_id: order_by
  github_node_id: order_by
  id: order_by
  kratos_id: order_by
  kratos_identity: identities_order_by
  role: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  id

  """column name"""
  kratos_id

  """column name"""
  role
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  github_id: String
  github_node_id: String
  id: uuid
  kratos_id: uuid
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  github_id

  """column name"""
  github_node_id

  """column name"""
  id

  """column name"""
  kratos_id
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "vulnerability.vulnerability"
"""
type vulnerability {
  """An array relationship"""
  affected(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_bool_exp
  ): [vulnerability_affected!]!

  """An array relationship"""
  credits(
    """distinct select on columns"""
    distinct_on: [vulnerability_credit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_credit_order_by!]

    """filter the rows returned"""
    where: vulnerability_credit_bool_exp
  ): [vulnerability_credit!]!
  cvss_score: Float
  database_specific(
    """JSON select path"""
    path: String
  ): jsonb
  details: String

  """An array relationship"""
  equivalents(
    """distinct select on columns"""
    distinct_on: [vulnerability_equivalent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_equivalent_order_by!]

    """filter the rows returned"""
    where: vulnerability_equivalent_bool_exp
  ): [vulnerability_equivalent!]!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An array relationship"""
  guide_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [guide_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [guide_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: guide_vulnerabilities_bool_exp
  ): [guide_vulnerabilities!]!
  id: uuid!

  """An array relationship"""
  ignored_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [ignored_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ignored_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: ignored_vulnerabilities_bool_exp
  ): [ignored_vulnerabilities!]!
  modified: timestamptz!
  published: timestamptz

  """An array relationship"""
  references(
    """distinct select on columns"""
    distinct_on: [vulnerability_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_reference_order_by!]

    """filter the rows returned"""
    where: vulnerability_reference_bool_exp
  ): [vulnerability_reference!]!
  reviewed_by_source: Boolean

  """An array relationship"""
  severities(
    """distinct select on columns"""
    distinct_on: [vulnerability_severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_severity_order_by!]

    """filter the rows returned"""
    where: vulnerability_severity_bool_exp
  ): [vulnerability_severity!]!
  source: String!
  source_id: String!
  summary: String
  upstream_data(
    """JSON select path"""
    path: String
  ): jsonb
  withdrawn: timestamptz
}

"""
columns and relationships of "vulnerability.affected"
"""
type vulnerability_affected {
  """An array relationship"""
  affected_range_events(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_range_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_range_event_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_range_event_bool_exp
  ): [vulnerability_affected_range_event!]!

  """An array relationship"""
  affected_versions(
    """distinct select on columns"""
    distinct_on: [vulnerability_affected_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_affected_version_order_by!]

    """filter the rows returned"""
    where: vulnerability_affected_version_bool_exp
  ): [vulnerability_affected_version!]!
  database_specific(
    """JSON select path"""
    path: String
  ): jsonb
  ecosystem_specific(
    """JSON select path"""
    path: String
  ): jsonb
  id: uuid!

  """An object relationship"""
  package: package!
  package_id: uuid!

  """An array relationship"""
  ranges(
    """distinct select on columns"""
    distinct_on: [vulnerability_range_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_range_order_by!]

    """filter the rows returned"""
    where: vulnerability_range_bool_exp
  ): [vulnerability_range!]!

  """An object relationship"""
  vulnerability: vulnerability!
  vulnerability_id: uuid!
}

"""
order by aggregate values of table "vulnerability.affected"
"""
input vulnerability_affected_aggregate_order_by {
  count: order_by
  max: vulnerability_affected_max_order_by
  min: vulnerability_affected_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_append_input {
  database_specific: jsonb
  ecosystem_specific: jsonb
}

"""
input type for inserting array relation for remote table "vulnerability.affected"
"""
input vulnerability_affected_arr_rel_insert_input {
  data: [vulnerability_affected_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_affected_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.affected". All fields are combined with a logical 'AND'.
"""
input vulnerability_affected_bool_exp {
  _and: [vulnerability_affected_bool_exp!]
  _not: vulnerability_affected_bool_exp
  _or: [vulnerability_affected_bool_exp!]
  affected_range_events: vulnerability_affected_range_event_bool_exp
  affected_versions: vulnerability_affected_version_bool_exp
  database_specific: jsonb_comparison_exp
  ecosystem_specific: jsonb_comparison_exp
  id: uuid_comparison_exp
  package: package_bool_exp
  package_id: uuid_comparison_exp
  ranges: vulnerability_range_bool_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.affected"
"""
enum vulnerability_affected_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  affected_pkey

  """
  unique or primary key constraint on columns "vulnerability_id", "package_id"
  """
  affected_vulnerability_id_package_id_idx
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input vulnerability_affected_delete_at_path_input {
  database_specific: [String!]
  ecosystem_specific: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input vulnerability_affected_delete_elem_input {
  database_specific: Int
  ecosystem_specific: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input vulnerability_affected_delete_key_input {
  database_specific: String
  ecosystem_specific: String
}

"""
input type for inserting data into table "vulnerability.affected"
"""
input vulnerability_affected_insert_input {
  affected_range_events: vulnerability_affected_range_event_arr_rel_insert_input
  affected_versions: vulnerability_affected_version_arr_rel_insert_input
  database_specific: jsonb
  ecosystem_specific: jsonb
  id: uuid
  package: package_obj_rel_insert_input
  package_id: uuid
  ranges: vulnerability_range_arr_rel_insert_input
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "vulnerability.affected"
"""
input vulnerability_affected_max_order_by {
  id: order_by
  package_id: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "vulnerability.affected"
"""
input vulnerability_affected_min_order_by {
  id: order_by
  package_id: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "vulnerability.affected"
"""
type vulnerability_affected_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_affected!]!
}

"""
input type for inserting object relation for remote table "vulnerability.affected"
"""
input vulnerability_affected_obj_rel_insert_input {
  data: vulnerability_affected_insert_input!

  """upsert condition"""
  on_conflict: vulnerability_affected_on_conflict
}

"""
on_conflict condition type for table "vulnerability.affected"
"""
input vulnerability_affected_on_conflict {
  constraint: vulnerability_affected_constraint!
  update_columns: [vulnerability_affected_update_column!]! = []
  where: vulnerability_affected_bool_exp
}

"""Ordering options when selecting data from "vulnerability.affected"."""
input vulnerability_affected_order_by {
  affected_range_events_aggregate: vulnerability_affected_range_event_aggregate_order_by
  affected_versions_aggregate: vulnerability_affected_version_aggregate_order_by
  database_specific: order_by
  ecosystem_specific: order_by
  id: order_by
  package: package_order_by
  package_id: order_by
  ranges_aggregate: vulnerability_range_aggregate_order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: vulnerability_affected"""
input vulnerability_affected_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_prepend_input {
  database_specific: jsonb
  ecosystem_specific: jsonb
}

"""
columns and relationships of "vulnerability.affected_range_event"
"""
type vulnerability_affected_range_event {
  """An object relationship"""
  affected: vulnerability_affected
  affected_id: uuid
  database_specific(
    """JSON select path"""
    path: String
  ): jsonb
  event: String!
  id: uuid!
  type: affected_range_type!
  version: String!
}

"""
order by aggregate values of table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_aggregate_order_by {
  count: order_by
  max: vulnerability_affected_range_event_max_order_by
  min: vulnerability_affected_range_event_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_range_event_append_input {
  database_specific: jsonb
}

"""
input type for inserting array relation for remote table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_arr_rel_insert_input {
  data: [vulnerability_affected_range_event_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_affected_range_event_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.affected_range_event". All fields are combined with a logical 'AND'.
"""
input vulnerability_affected_range_event_bool_exp {
  _and: [vulnerability_affected_range_event_bool_exp!]
  _not: vulnerability_affected_range_event_bool_exp
  _or: [vulnerability_affected_range_event_bool_exp!]
  affected: vulnerability_affected_bool_exp
  affected_id: uuid_comparison_exp
  database_specific: jsonb_comparison_exp
  event: String_comparison_exp
  id: uuid_comparison_exp
  type: affected_range_type_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.affected_range_event"
"""
enum vulnerability_affected_range_event_constraint {
  """
  unique or primary key constraint on columns "type", "affected_id", "event", "version"
  """
  affected_range_event_affected_id_type_event_version_idx

  """
  unique or primary key constraint on columns "id"
  """
  affected_range_event_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input vulnerability_affected_range_event_delete_at_path_input {
  database_specific: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input vulnerability_affected_range_event_delete_elem_input {
  database_specific: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input vulnerability_affected_range_event_delete_key_input {
  database_specific: String
}

"""
input type for inserting data into table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_insert_input {
  affected: vulnerability_affected_obj_rel_insert_input
  affected_id: uuid
  database_specific: jsonb
  event: String
  id: uuid
  type: affected_range_type
  version: String
}

"""
order by max() on columns of table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_max_order_by {
  affected_id: order_by
  event: order_by
  id: order_by
  type: order_by
  version: order_by
}

"""
order by min() on columns of table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_min_order_by {
  affected_id: order_by
  event: order_by
  id: order_by
  type: order_by
  version: order_by
}

"""
response of any mutation on the table "vulnerability.affected_range_event"
"""
type vulnerability_affected_range_event_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_affected_range_event!]!
}

"""
on_conflict condition type for table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_on_conflict {
  constraint: vulnerability_affected_range_event_constraint!
  update_columns: [vulnerability_affected_range_event_update_column!]! = []
  where: vulnerability_affected_range_event_bool_exp
}

"""
Ordering options when selecting data from "vulnerability.affected_range_event".
"""
input vulnerability_affected_range_event_order_by {
  affected: vulnerability_affected_order_by
  affected_id: order_by
  database_specific: order_by
  event: order_by
  id: order_by
  type: order_by
  version: order_by
}

"""
primary key columns input for table: vulnerability_affected_range_event
"""
input vulnerability_affected_range_event_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_range_event_prepend_input {
  database_specific: jsonb
}

"""
select columns of table "vulnerability.affected_range_event"
"""
enum vulnerability_affected_range_event_select_column {
  """column name"""
  affected_id

  """column name"""
  database_specific

  """column name"""
  event

  """column name"""
  id

  """column name"""
  type

  """column name"""
  version
}

"""
input type for updating data in table "vulnerability.affected_range_event"
"""
input vulnerability_affected_range_event_set_input {
  affected_id: uuid
  database_specific: jsonb
  event: String
  id: uuid
  type: affected_range_type
  version: String
}

"""
update columns of table "vulnerability.affected_range_event"
"""
enum vulnerability_affected_range_event_update_column {
  """column name"""
  affected_id

  """column name"""
  database_specific

  """column name"""
  event

  """column name"""
  id

  """column name"""
  type

  """column name"""
  version
}

"""
select columns of table "vulnerability.affected"
"""
enum vulnerability_affected_select_column {
  """column name"""
  database_specific

  """column name"""
  ecosystem_specific

  """column name"""
  id

  """column name"""
  package_id

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "vulnerability.affected"
"""
input vulnerability_affected_set_input {
  database_specific: jsonb
  ecosystem_specific: jsonb
  id: uuid
  package_id: uuid
  vulnerability_id: uuid
}

"""
update columns of table "vulnerability.affected"
"""
enum vulnerability_affected_update_column {
  """column name"""
  database_specific

  """column name"""
  ecosystem_specific

  """column name"""
  id

  """column name"""
  package_id

  """column name"""
  vulnerability_id
}

"""
columns and relationships of "vulnerability.affected_version"
"""
type vulnerability_affected_version {
  """An object relationship"""
  affected: vulnerability_affected
  affected_id: uuid
  database_specific(
    """JSON select path"""
    path: String
  ): jsonb
  id: uuid!
  version: String!
}

"""
order by aggregate values of table "vulnerability.affected_version"
"""
input vulnerability_affected_version_aggregate_order_by {
  count: order_by
  max: vulnerability_affected_version_max_order_by
  min: vulnerability_affected_version_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_version_append_input {
  database_specific: jsonb
}

"""
input type for inserting array relation for remote table "vulnerability.affected_version"
"""
input vulnerability_affected_version_arr_rel_insert_input {
  data: [vulnerability_affected_version_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_affected_version_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.affected_version". All fields are combined with a logical 'AND'.
"""
input vulnerability_affected_version_bool_exp {
  _and: [vulnerability_affected_version_bool_exp!]
  _not: vulnerability_affected_version_bool_exp
  _or: [vulnerability_affected_version_bool_exp!]
  affected: vulnerability_affected_bool_exp
  affected_id: uuid_comparison_exp
  database_specific: jsonb_comparison_exp
  id: uuid_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.affected_version"
"""
enum vulnerability_affected_version_constraint {
  """
  unique or primary key constraint on columns "affected_id", "version"
  """
  affected_version_affected_id_type_version

  """
  unique or primary key constraint on columns "id"
  """
  affected_version_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input vulnerability_affected_version_delete_at_path_input {
  database_specific: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input vulnerability_affected_version_delete_elem_input {
  database_specific: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input vulnerability_affected_version_delete_key_input {
  database_specific: String
}

"""
input type for inserting data into table "vulnerability.affected_version"
"""
input vulnerability_affected_version_insert_input {
  affected: vulnerability_affected_obj_rel_insert_input
  affected_id: uuid
  database_specific: jsonb
  id: uuid
  version: String
}

"""
order by max() on columns of table "vulnerability.affected_version"
"""
input vulnerability_affected_version_max_order_by {
  affected_id: order_by
  id: order_by
  version: order_by
}

"""
order by min() on columns of table "vulnerability.affected_version"
"""
input vulnerability_affected_version_min_order_by {
  affected_id: order_by
  id: order_by
  version: order_by
}

"""
response of any mutation on the table "vulnerability.affected_version"
"""
type vulnerability_affected_version_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_affected_version!]!
}

"""
on_conflict condition type for table "vulnerability.affected_version"
"""
input vulnerability_affected_version_on_conflict {
  constraint: vulnerability_affected_version_constraint!
  update_columns: [vulnerability_affected_version_update_column!]! = []
  where: vulnerability_affected_version_bool_exp
}

"""
Ordering options when selecting data from "vulnerability.affected_version".
"""
input vulnerability_affected_version_order_by {
  affected: vulnerability_affected_order_by
  affected_id: order_by
  database_specific: order_by
  id: order_by
  version: order_by
}

"""primary key columns input for table: vulnerability_affected_version"""
input vulnerability_affected_version_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_affected_version_prepend_input {
  database_specific: jsonb
}

"""
select columns of table "vulnerability.affected_version"
"""
enum vulnerability_affected_version_select_column {
  """column name"""
  affected_id

  """column name"""
  database_specific

  """column name"""
  id

  """column name"""
  version
}

"""
input type for updating data in table "vulnerability.affected_version"
"""
input vulnerability_affected_version_set_input {
  affected_id: uuid
  database_specific: jsonb
  id: uuid
  version: String
}

"""
update columns of table "vulnerability.affected_version"
"""
enum vulnerability_affected_version_update_column {
  """column name"""
  affected_id

  """column name"""
  database_specific

  """column name"""
  id

  """column name"""
  version
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_append_input {
  database_specific: jsonb
  upstream_data: jsonb
}

"""
Boolean expression to filter rows from the table "vulnerability.vulnerability". All fields are combined with a logical 'AND'.
"""
input vulnerability_bool_exp {
  _and: [vulnerability_bool_exp!]
  _not: vulnerability_bool_exp
  _or: [vulnerability_bool_exp!]
  affected: vulnerability_affected_bool_exp
  credits: vulnerability_credit_bool_exp
  cvss_score: Float_comparison_exp
  database_specific: jsonb_comparison_exp
  details: String_comparison_exp
  equivalents: vulnerability_equivalent_bool_exp
  findings: findings_bool_exp
  guide_vulnerabilities: guide_vulnerabilities_bool_exp
  id: uuid_comparison_exp
  ignored_vulnerabilities: ignored_vulnerabilities_bool_exp
  modified: timestamptz_comparison_exp
  published: timestamptz_comparison_exp
  references: vulnerability_reference_bool_exp
  reviewed_by_source: Boolean_comparison_exp
  severities: vulnerability_severity_bool_exp
  source: String_comparison_exp
  source_id: String_comparison_exp
  summary: String_comparison_exp
  upstream_data: jsonb_comparison_exp
  withdrawn: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.vulnerability"
"""
enum vulnerability_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  vulnerability_pkey

  """
  unique or primary key constraint on columns "source", "source_id"
  """
  vulnerability_source_source_id_idx
}

"""
columns and relationships of "vulnerability.credit"
"""
type vulnerability_credit {
  contact: _text
  id: uuid!
  name: String!

  """An object relationship"""
  vulnerability: vulnerability
  vulnerability_id: uuid
}

"""
order by aggregate values of table "vulnerability.credit"
"""
input vulnerability_credit_aggregate_order_by {
  count: order_by
  max: vulnerability_credit_max_order_by
  min: vulnerability_credit_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability.credit"
"""
input vulnerability_credit_arr_rel_insert_input {
  data: [vulnerability_credit_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_credit_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.credit". All fields are combined with a logical 'AND'.
"""
input vulnerability_credit_bool_exp {
  _and: [vulnerability_credit_bool_exp!]
  _not: vulnerability_credit_bool_exp
  _or: [vulnerability_credit_bool_exp!]
  contact: _text_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.credit"
"""
enum vulnerability_credit_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  credit_pkey

  """
  unique or primary key constraint on columns "name", "vulnerability_id"
  """
  credit_vulnerability_id_name
}

"""
input type for inserting data into table "vulnerability.credit"
"""
input vulnerability_credit_insert_input {
  contact: _text
  id: uuid
  name: String
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "vulnerability.credit"
"""
input vulnerability_credit_max_order_by {
  id: order_by
  name: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "vulnerability.credit"
"""
input vulnerability_credit_min_order_by {
  id: order_by
  name: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "vulnerability.credit"
"""
type vulnerability_credit_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_credit!]!
}

"""
on_conflict condition type for table "vulnerability.credit"
"""
input vulnerability_credit_on_conflict {
  constraint: vulnerability_credit_constraint!
  update_columns: [vulnerability_credit_update_column!]! = []
  where: vulnerability_credit_bool_exp
}

"""Ordering options when selecting data from "vulnerability.credit"."""
input vulnerability_credit_order_by {
  contact: order_by
  id: order_by
  name: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: vulnerability_credit"""
input vulnerability_credit_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability.credit"
"""
enum vulnerability_credit_select_column {
  """column name"""
  contact

  """column name"""
  id

  """column name"""
  name

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "vulnerability.credit"
"""
input vulnerability_credit_set_input {
  contact: _text
  id: uuid
  name: String
  vulnerability_id: uuid
}

"""
update columns of table "vulnerability.credit"
"""
enum vulnerability_credit_update_column {
  """column name"""
  contact

  """column name"""
  id

  """column name"""
  name

  """column name"""
  vulnerability_id
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input vulnerability_delete_at_path_input {
  database_specific: [String!]
  upstream_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input vulnerability_delete_elem_input {
  database_specific: Int
  upstream_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input vulnerability_delete_key_input {
  database_specific: String
  upstream_data: String
}

"""
columns and relationships of "vulnerability.equivalent"
"""
type vulnerability_equivalent {
  a: uuid!
  b: uuid!

  """An object relationship"""
  equivalent_vulnerability: vulnerability!

  """An object relationship"""
  vulnerability: vulnerability!
}

"""
order by aggregate values of table "vulnerability.equivalent"
"""
input vulnerability_equivalent_aggregate_order_by {
  count: order_by
  max: vulnerability_equivalent_max_order_by
  min: vulnerability_equivalent_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability.equivalent"
"""
input vulnerability_equivalent_arr_rel_insert_input {
  data: [vulnerability_equivalent_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_equivalent_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.equivalent". All fields are combined with a logical 'AND'.
"""
input vulnerability_equivalent_bool_exp {
  _and: [vulnerability_equivalent_bool_exp!]
  _not: vulnerability_equivalent_bool_exp
  _or: [vulnerability_equivalent_bool_exp!]
  a: uuid_comparison_exp
  b: uuid_comparison_exp
  equivalent_vulnerability: vulnerability_bool_exp
  vulnerability: vulnerability_bool_exp
}

"""
unique or primary key constraints on table "vulnerability.equivalent"
"""
enum vulnerability_equivalent_constraint {
  """
  unique or primary key constraint on columns "a", "b"
  """
  equivalent_a_b_idx
}

"""
input type for inserting data into table "vulnerability.equivalent"
"""
input vulnerability_equivalent_insert_input {
  a: uuid
  b: uuid
  equivalent_vulnerability: vulnerability_obj_rel_insert_input
  vulnerability: vulnerability_obj_rel_insert_input
}

"""
order by max() on columns of table "vulnerability.equivalent"
"""
input vulnerability_equivalent_max_order_by {
  a: order_by
  b: order_by
}

"""
order by min() on columns of table "vulnerability.equivalent"
"""
input vulnerability_equivalent_min_order_by {
  a: order_by
  b: order_by
}

"""
response of any mutation on the table "vulnerability.equivalent"
"""
type vulnerability_equivalent_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_equivalent!]!
}

"""
on_conflict condition type for table "vulnerability.equivalent"
"""
input vulnerability_equivalent_on_conflict {
  constraint: vulnerability_equivalent_constraint!
  update_columns: [vulnerability_equivalent_update_column!]! = []
  where: vulnerability_equivalent_bool_exp
}

"""Ordering options when selecting data from "vulnerability.equivalent"."""
input vulnerability_equivalent_order_by {
  a: order_by
  b: order_by
  equivalent_vulnerability: vulnerability_order_by
  vulnerability: vulnerability_order_by
}

"""
select columns of table "vulnerability.equivalent"
"""
enum vulnerability_equivalent_select_column {
  """column name"""
  a

  """column name"""
  b
}

"""
input type for updating data in table "vulnerability.equivalent"
"""
input vulnerability_equivalent_set_input {
  a: uuid
  b: uuid
}

"""
update columns of table "vulnerability.equivalent"
"""
enum vulnerability_equivalent_update_column {
  """column name"""
  a

  """column name"""
  b
}

"""
input type for incrementing numeric columns in table "vulnerability.vulnerability"
"""
input vulnerability_inc_input {
  cvss_score: Float
}

"""
input type for inserting data into table "vulnerability.vulnerability"
"""
input vulnerability_insert_input {
  affected: vulnerability_affected_arr_rel_insert_input
  credits: vulnerability_credit_arr_rel_insert_input
  cvss_score: Float
  database_specific: jsonb
  details: String
  equivalents: vulnerability_equivalent_arr_rel_insert_input
  findings: findings_arr_rel_insert_input
  guide_vulnerabilities: guide_vulnerabilities_arr_rel_insert_input
  id: uuid
  modified: timestamptz
  published: timestamptz
  references: vulnerability_reference_arr_rel_insert_input
  reviewed_by_source: Boolean
  severities: vulnerability_severity_arr_rel_insert_input
  source: String
  source_id: String
  summary: String
  upstream_data: jsonb
  withdrawn: timestamptz
}

"""
response of any mutation on the table "vulnerability.vulnerability"
"""
type vulnerability_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability!]!
}

"""
input type for inserting object relation for remote table "vulnerability.vulnerability"
"""
input vulnerability_obj_rel_insert_input {
  data: vulnerability_insert_input!

  """upsert condition"""
  on_conflict: vulnerability_on_conflict
}

"""
on_conflict condition type for table "vulnerability.vulnerability"
"""
input vulnerability_on_conflict {
  constraint: vulnerability_constraint!
  update_columns: [vulnerability_update_column!]! = []
  where: vulnerability_bool_exp
}

"""
Ordering options when selecting data from "vulnerability.vulnerability".
"""
input vulnerability_order_by {
  affected_aggregate: vulnerability_affected_aggregate_order_by
  credits_aggregate: vulnerability_credit_aggregate_order_by
  cvss_score: order_by
  database_specific: order_by
  details: order_by
  equivalents_aggregate: vulnerability_equivalent_aggregate_order_by
  findings_aggregate: findings_aggregate_order_by
  guide_vulnerabilities_aggregate: guide_vulnerabilities_aggregate_order_by
  id: order_by
  ignored_vulnerabilities_aggregate: ignored_vulnerabilities_aggregate_order_by
  modified: order_by
  published: order_by
  references_aggregate: vulnerability_reference_aggregate_order_by
  reviewed_by_source: order_by
  severities_aggregate: vulnerability_severity_aggregate_order_by
  source: order_by
  source_id: order_by
  summary: order_by
  upstream_data: order_by
  withdrawn: order_by
}

"""primary key columns input for table: vulnerability"""
input vulnerability_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input vulnerability_prepend_input {
  database_specific: jsonb
  upstream_data: jsonb
}

"""
columns and relationships of "vulnerability.range"
"""
type vulnerability_range {
  """An object relationship"""
  affected: vulnerability_affected!
  affected_id: uuid!
  fixed: String
  id: uuid!
  introduced: String
}

"""
order by aggregate values of table "vulnerability.range"
"""
input vulnerability_range_aggregate_order_by {
  count: order_by
  max: vulnerability_range_max_order_by
  min: vulnerability_range_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability.range"
"""
input vulnerability_range_arr_rel_insert_input {
  data: [vulnerability_range_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_range_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.range". All fields are combined with a logical 'AND'.
"""
input vulnerability_range_bool_exp {
  _and: [vulnerability_range_bool_exp!]
  _not: vulnerability_range_bool_exp
  _or: [vulnerability_range_bool_exp!]
  affected: vulnerability_affected_bool_exp
  affected_id: uuid_comparison_exp
  fixed: String_comparison_exp
  id: uuid_comparison_exp
  introduced: String_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.range"
"""
enum vulnerability_range_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  range_pkey

  """
  unique or primary key constraint on columns "affected_id", "fixed", "introduced"
  """
  range_uniq
}

"""
input type for inserting data into table "vulnerability.range"
"""
input vulnerability_range_insert_input {
  affected: vulnerability_affected_obj_rel_insert_input
  affected_id: uuid
  fixed: String
  id: uuid
  introduced: String
}

"""
order by max() on columns of table "vulnerability.range"
"""
input vulnerability_range_max_order_by {
  affected_id: order_by
  fixed: order_by
  id: order_by
  introduced: order_by
}

"""
order by min() on columns of table "vulnerability.range"
"""
input vulnerability_range_min_order_by {
  affected_id: order_by
  fixed: order_by
  id: order_by
  introduced: order_by
}

"""
response of any mutation on the table "vulnerability.range"
"""
type vulnerability_range_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_range!]!
}

"""
on_conflict condition type for table "vulnerability.range"
"""
input vulnerability_range_on_conflict {
  constraint: vulnerability_range_constraint!
  update_columns: [vulnerability_range_update_column!]! = []
  where: vulnerability_range_bool_exp
}

"""Ordering options when selecting data from "vulnerability.range"."""
input vulnerability_range_order_by {
  affected: vulnerability_affected_order_by
  affected_id: order_by
  fixed: order_by
  id: order_by
  introduced: order_by
}

"""primary key columns input for table: vulnerability_range"""
input vulnerability_range_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability.range"
"""
enum vulnerability_range_select_column {
  """column name"""
  affected_id

  """column name"""
  fixed

  """column name"""
  id

  """column name"""
  introduced
}

"""
input type for updating data in table "vulnerability.range"
"""
input vulnerability_range_set_input {
  affected_id: uuid
  fixed: String
  id: uuid
  introduced: String
}

"""
update columns of table "vulnerability.range"
"""
enum vulnerability_range_update_column {
  """column name"""
  affected_id

  """column name"""
  fixed

  """column name"""
  id

  """column name"""
  introduced
}

"""
columns and relationships of "vulnerability.reference"
"""
type vulnerability_reference {
  id: uuid!
  type: reference_type!
  url: String!

  """An object relationship"""
  vulnerability: vulnerability
  vulnerability_id: uuid
}

"""
order by aggregate values of table "vulnerability.reference"
"""
input vulnerability_reference_aggregate_order_by {
  count: order_by
  max: vulnerability_reference_max_order_by
  min: vulnerability_reference_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability.reference"
"""
input vulnerability_reference_arr_rel_insert_input {
  data: [vulnerability_reference_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_reference_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.reference". All fields are combined with a logical 'AND'.
"""
input vulnerability_reference_bool_exp {
  _and: [vulnerability_reference_bool_exp!]
  _not: vulnerability_reference_bool_exp
  _or: [vulnerability_reference_bool_exp!]
  id: uuid_comparison_exp
  type: reference_type_comparison_exp
  url: String_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.reference"
"""
enum vulnerability_reference_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  reference_pkey

  """
  unique or primary key constraint on columns "type", "vulnerability_id", "url"
  """
  reference_vulnerability_id_type_url_idx
}

"""
input type for inserting data into table "vulnerability.reference"
"""
input vulnerability_reference_insert_input {
  id: uuid
  type: reference_type
  url: String
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "vulnerability.reference"
"""
input vulnerability_reference_max_order_by {
  id: order_by
  type: order_by
  url: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "vulnerability.reference"
"""
input vulnerability_reference_min_order_by {
  id: order_by
  type: order_by
  url: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "vulnerability.reference"
"""
type vulnerability_reference_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_reference!]!
}

"""
on_conflict condition type for table "vulnerability.reference"
"""
input vulnerability_reference_on_conflict {
  constraint: vulnerability_reference_constraint!
  update_columns: [vulnerability_reference_update_column!]! = []
  where: vulnerability_reference_bool_exp
}

"""Ordering options when selecting data from "vulnerability.reference"."""
input vulnerability_reference_order_by {
  id: order_by
  type: order_by
  url: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: vulnerability_reference"""
input vulnerability_reference_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability.reference"
"""
enum vulnerability_reference_select_column {
  """column name"""
  id

  """column name"""
  type

  """column name"""
  url

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "vulnerability.reference"
"""
input vulnerability_reference_set_input {
  id: uuid
  type: reference_type
  url: String
  vulnerability_id: uuid
}

"""
update columns of table "vulnerability.reference"
"""
enum vulnerability_reference_update_column {
  """column name"""
  id

  """column name"""
  type

  """column name"""
  url

  """column name"""
  vulnerability_id
}

"""
select columns of table "vulnerability.vulnerability"
"""
enum vulnerability_select_column {
  """column name"""
  cvss_score

  """column name"""
  database_specific

  """column name"""
  details

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  published

  """column name"""
  reviewed_by_source

  """column name"""
  source

  """column name"""
  source_id

  """column name"""
  summary

  """column name"""
  upstream_data

  """column name"""
  withdrawn
}

"""
input type for updating data in table "vulnerability.vulnerability"
"""
input vulnerability_set_input {
  cvss_score: Float
  database_specific: jsonb
  details: String
  id: uuid
  modified: timestamptz
  published: timestamptz
  reviewed_by_source: Boolean
  source: String
  source_id: String
  summary: String
  upstream_data: jsonb
  withdrawn: timestamptz
}

"""
columns and relationships of "vulnerability.severity"
"""
type vulnerability_severity {
  id: uuid!
  score: String!
  source: String!
  type: String!

  """An object relationship"""
  vulnerability: vulnerability
  vulnerability_id: uuid
}

"""
order by aggregate values of table "vulnerability.severity"
"""
input vulnerability_severity_aggregate_order_by {
  count: order_by
  max: vulnerability_severity_max_order_by
  min: vulnerability_severity_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability.severity"
"""
input vulnerability_severity_arr_rel_insert_input {
  data: [vulnerability_severity_insert_input!]!

  """upsert condition"""
  on_conflict: vulnerability_severity_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability.severity". All fields are combined with a logical 'AND'.
"""
input vulnerability_severity_bool_exp {
  _and: [vulnerability_severity_bool_exp!]
  _not: vulnerability_severity_bool_exp
  _or: [vulnerability_severity_bool_exp!]
  id: uuid_comparison_exp
  score: String_comparison_exp
  source: String_comparison_exp
  type: String_comparison_exp
  vulnerability: vulnerability_bool_exp
  vulnerability_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "vulnerability.severity"
"""
enum vulnerability_severity_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  severity_pkey

  """
  unique or primary key constraint on columns "source", "type", "vulnerability_id"
  """
  severity_vulnerability_id_source_type_idx
}

"""
input type for inserting data into table "vulnerability.severity"
"""
input vulnerability_severity_insert_input {
  id: uuid
  score: String
  source: String
  type: String
  vulnerability: vulnerability_obj_rel_insert_input
  vulnerability_id: uuid
}

"""
order by max() on columns of table "vulnerability.severity"
"""
input vulnerability_severity_max_order_by {
  id: order_by
  score: order_by
  source: order_by
  type: order_by
  vulnerability_id: order_by
}

"""
order by min() on columns of table "vulnerability.severity"
"""
input vulnerability_severity_min_order_by {
  id: order_by
  score: order_by
  source: order_by
  type: order_by
  vulnerability_id: order_by
}

"""
response of any mutation on the table "vulnerability.severity"
"""
type vulnerability_severity_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_severity!]!
}

"""
on_conflict condition type for table "vulnerability.severity"
"""
input vulnerability_severity_on_conflict {
  constraint: vulnerability_severity_constraint!
  update_columns: [vulnerability_severity_update_column!]! = []
  where: vulnerability_severity_bool_exp
}

"""Ordering options when selecting data from "vulnerability.severity"."""
input vulnerability_severity_order_by {
  id: order_by
  score: order_by
  source: order_by
  type: order_by
  vulnerability: vulnerability_order_by
  vulnerability_id: order_by
}

"""primary key columns input for table: vulnerability_severity"""
input vulnerability_severity_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability.severity"
"""
enum vulnerability_severity_select_column {
  """column name"""
  id

  """column name"""
  score

  """column name"""
  source

  """column name"""
  type

  """column name"""
  vulnerability_id
}

"""
input type for updating data in table "vulnerability.severity"
"""
input vulnerability_severity_set_input {
  id: uuid
  score: String
  source: String
  type: String
  vulnerability_id: uuid
}

"""
update columns of table "vulnerability.severity"
"""
enum vulnerability_severity_update_column {
  """column name"""
  id

  """column name"""
  score

  """column name"""
  source

  """column name"""
  type

  """column name"""
  vulnerability_id
}

"""
update columns of table "vulnerability.vulnerability"
"""
enum vulnerability_update_column {
  """column name"""
  cvss_score

  """column name"""
  database_specific

  """column name"""
  details

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  published

  """column name"""
  reviewed_by_source

  """column name"""
  source

  """column name"""
  source_id

  """column name"""
  summary

  """column name"""
  upstream_data

  """column name"""
  withdrawn
}

"""
columns and relationships of "webhook_cache"
"""
type webhook_cache {
  created_at: timestamp!
  data(
    """JSON select path"""
    path: String
  ): jsonb!
  delivery_id: uuid!
  event_type: String!
  installation_id: Int
  signature_256: String!
  sqs_message_id: String
}

"""
Boolean expression to filter rows from the table "webhook_cache". All fields are combined with a logical 'AND'.
"""
input webhook_cache_bool_exp {
  _and: [webhook_cache_bool_exp!]
  _not: webhook_cache_bool_exp
  _or: [webhook_cache_bool_exp!]
  created_at: timestamp_comparison_exp
  data: jsonb_comparison_exp
  delivery_id: uuid_comparison_exp
  event_type: String_comparison_exp
  installation_id: Int_comparison_exp
  signature_256: String_comparison_exp
  sqs_message_id: String_comparison_exp
}

"""
unique or primary key constraints on table "webhook_cache"
"""
enum webhook_cache_constraint {
  """
  unique or primary key constraint on columns "delivery_id"
  """
  webhook_cache_pkey
}

"""
input type for inserting data into table "webhook_cache"
"""
input webhook_cache_insert_input {
  created_at: timestamp
  data: jsonb
  delivery_id: uuid
  event_type: String
  installation_id: Int
  signature_256: String
  sqs_message_id: String
}

"""
response of any mutation on the table "webhook_cache"
"""
type webhook_cache_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [webhook_cache!]!
}

"""
on_conflict condition type for table "webhook_cache"
"""
input webhook_cache_on_conflict {
  constraint: webhook_cache_constraint!
  update_columns: [webhook_cache_update_column!]! = []
  where: webhook_cache_bool_exp
}

"""Ordering options when selecting data from "webhook_cache"."""
input webhook_cache_order_by {
  created_at: order_by
  data: order_by
  delivery_id: order_by
  event_type: order_by
  installation_id: order_by
  signature_256: order_by
  sqs_message_id: order_by
}

"""primary key columns input for table: webhook_cache"""
input webhook_cache_pk_columns_input {
  delivery_id: uuid!
}

"""
select columns of table "webhook_cache"
"""
enum webhook_cache_select_column {
  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  delivery_id

  """column name"""
  event_type

  """column name"""
  installation_id

  """column name"""
  signature_256

  """column name"""
  sqs_message_id
}

"""
input type for updating data in table "webhook_cache"
"""
input webhook_cache_set_input {
  sqs_message_id: String
}

"""
update columns of table "webhook_cache"
"""
enum webhook_cache_update_column {
  """column name"""
  sqs_message_id
}