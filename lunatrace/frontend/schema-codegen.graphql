schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "findings"
"""
type findings {
  id: uuid!
  language: String!
  locations: _text!
  matcher: String!
  package_name: String!

  """An object relationship"""
  package_version: package_versions
  package_version_id: uuid
  purl: String!

  """An object relationship"""
  report: reports
  report_id: uuid
  type: String!
  version: String!
  version_matcher: String!
  virtual_path: String

  """An object relationship"""
  vulnerability: vulnerabilities
  vulnerability_id: uuid

  """An object relationship"""
  vulnerability_package: vulnerability_packages
  vulnerability_package_id: uuid
}

"""
aggregated selection of "findings"
"""
type findings_aggregate {
  aggregate: findings_aggregate_fields
  nodes: [findings!]!
}

"""
aggregate fields of "findings"
"""
type findings_aggregate_fields {
  count(columns: [findings_select_column!], distinct: Boolean): Int!
  max: findings_max_fields
  min: findings_min_fields
}

"""
order by aggregate values of table "findings"
"""
input findings_aggregate_order_by {
  count: order_by
  max: findings_max_order_by
  min: findings_min_order_by
}

"""
input type for inserting array relation for remote table "findings"
"""
input findings_arr_rel_insert_input {
  data: [findings_insert_input!]!

  """on conflict condition"""
  on_conflict: findings_on_conflict
}

"""
Boolean expression to filter rows from the table "findings". All fields are combined with a logical 'AND'.
"""
input findings_bool_exp {
  _and: [findings_bool_exp!]
  _not: findings_bool_exp
  _or: [findings_bool_exp!]
  id: uuid_comparison_exp
  language: String_comparison_exp
  locations: _text_comparison_exp
  matcher: String_comparison_exp
  package_name: String_comparison_exp
  package_version: package_versions_bool_exp
  package_version_id: uuid_comparison_exp
  purl: String_comparison_exp
  report: reports_bool_exp
  report_id: uuid_comparison_exp
  type: String_comparison_exp
  version: String_comparison_exp
  version_matcher: String_comparison_exp
  virtual_path: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerability_id: uuid_comparison_exp
  vulnerability_package: vulnerability_packages_bool_exp
  vulnerability_package_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "findings"
"""
enum findings_constraint {
  """unique or primary key constraint"""
  findings_pkey
}

"""
input type for inserting data into table "findings"
"""
input findings_insert_input {
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version: package_versions_obj_rel_insert_input
  package_version_id: uuid
  purl: String
  report: reports_obj_rel_insert_input
  report_id: uuid
  type: String
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerability_id: uuid
  vulnerability_package: vulnerability_packages_obj_rel_insert_input
  vulnerability_package_id: uuid
}

"""aggregate max on columns"""
type findings_max_fields {
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  report_id: uuid
  type: String
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by max() on columns of table "findings"
"""
input findings_max_order_by {
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  report_id: order_by
  type: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""aggregate min on columns"""
type findings_min_fields {
  id: uuid
  language: String
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  report_id: uuid
  type: String
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
order by min() on columns of table "findings"
"""
input findings_min_order_by {
  id: order_by
  language: order_by
  matcher: order_by
  package_name: order_by
  package_version_id: order_by
  purl: order_by
  report_id: order_by
  type: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability_id: order_by
  vulnerability_package_id: order_by
}

"""
response of any mutation on the table "findings"
"""
type findings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [findings!]!
}

"""
on conflict condition type for table "findings"
"""
input findings_on_conflict {
  constraint: findings_constraint!
  update_columns: [findings_update_column!]! = []
  where: findings_bool_exp
}

"""Ordering options when selecting data from "findings"."""
input findings_order_by {
  id: order_by
  language: order_by
  locations: order_by
  matcher: order_by
  package_name: order_by
  package_version: package_versions_order_by
  package_version_id: order_by
  purl: order_by
  report: reports_order_by
  report_id: order_by
  type: order_by
  version: order_by
  version_matcher: order_by
  virtual_path: order_by
  vulnerability: vulnerabilities_order_by
  vulnerability_id: order_by
  vulnerability_package: vulnerability_packages_order_by
  vulnerability_package_id: order_by
}

"""primary key columns input for table: findings"""
input findings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "findings"
"""
enum findings_select_column {
  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  report_id

  """column name"""
  type

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

"""
input type for updating data in table "findings"
"""
input findings_set_input {
  id: uuid
  language: String
  locations: _text
  matcher: String
  package_name: String
  package_version_id: uuid
  purl: String
  report_id: uuid
  type: String
  version: String
  version_matcher: String
  virtual_path: String
  vulnerability_id: uuid
  vulnerability_package_id: uuid
}

"""
update columns of table "findings"
"""
enum findings_update_column {
  """column name"""
  id

  """column name"""
  language

  """column name"""
  locations

  """column name"""
  matcher

  """column name"""
  package_name

  """column name"""
  package_version_id

  """column name"""
  purl

  """column name"""
  report_id

  """column name"""
  type

  """column name"""
  version

  """column name"""
  version_matcher

  """column name"""
  virtual_path

  """column name"""
  vulnerability_id

  """column name"""
  vulnerability_package_id
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "findings"
  """
  delete_findings(
    """filter the rows which have to be deleted"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  delete single row from the table: "findings"
  """
  delete_findings_by_pk(id: uuid!): findings

  """
  delete data from the table: "organization_user"
  """
  delete_organization_user(
    """filter the rows which have to be deleted"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  delete single row from the table: "organization_user"
  """
  delete_organization_user_by_pk(id: uuid!): organization_user

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """filter the rows which have to be deleted"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(id: uuid!): organizations

  """
  delete data from the table: "package_versions"
  """
  delete_package_versions(
    """filter the rows which have to be deleted"""
    where: package_versions_bool_exp!
  ): package_versions_mutation_response

  """
  delete single row from the table: "package_versions"
  """
  delete_package_versions_by_pk(id: uuid!): package_versions

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: uuid!): projects

  """
  delete data from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: related_vulnerabilities_bool_exp!
  ): related_vulnerabilities_mutation_response

  """
  delete single row from the table: "related_vulnerabilities"
  """
  delete_related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """
  delete data from the table: "reports"
  """
  delete_reports(
    """filter the rows which have to be deleted"""
    where: reports_bool_exp!
  ): reports_mutation_response

  """
  delete single row from the table: "reports"
  """
  delete_reports_by_pk(id: uuid!): reports

  """
  delete data from the table: "sboms"
  """
  delete_sboms(
    """filter the rows which have to be deleted"""
    where: sboms_bool_exp!
  ): sboms_mutation_response

  """
  delete single row from the table: "sboms"
  """
  delete_sboms_by_pk(id: uuid!): sboms

  """
  delete data from the table: "scans"
  """
  delete_scans(
    """filter the rows which have to be deleted"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  delete single row from the table: "scans"
  """
  delete_scans_by_pk(id: uuid!): scans

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(id: uuid!): settings

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  delete data from the table: "vulnerabilities"
  """
  delete_vulnerabilities(
    """filter the rows which have to be deleted"""
    where: vulnerabilities_bool_exp!
  ): vulnerabilities_mutation_response

  """
  delete single row from the table: "vulnerabilities"
  """
  delete_vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """
  delete data from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages(
    """filter the rows which have to be deleted"""
    where: vulnerability_packages_bool_exp!
  ): vulnerability_packages_mutation_response

  """
  delete single row from the table: "vulnerability_packages"
  """
  delete_vulnerability_packages_by_pk(id: uuid!): vulnerability_packages

  """
  insert data into the table: "findings"
  """
  insert_findings(
    """the rows to be inserted"""
    objects: [findings_insert_input!]!

    """on conflict condition"""
    on_conflict: findings_on_conflict
  ): findings_mutation_response

  """
  insert a single row into the table: "findings"
  """
  insert_findings_one(
    """the row to be inserted"""
    object: findings_insert_input!

    """on conflict condition"""
    on_conflict: findings_on_conflict
  ): findings

  """
  insert data into the table: "organization_user"
  """
  insert_organization_user(
    """the rows to be inserted"""
    objects: [organization_user_insert_input!]!

    """on conflict condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user_mutation_response

  """
  insert a single row into the table: "organization_user"
  """
  insert_organization_user_one(
    """the row to be inserted"""
    object: organization_user_insert_input!

    """on conflict condition"""
    on_conflict: organization_user_on_conflict
  ): organization_user

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """on conflict condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """on conflict condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "package_versions"
  """
  insert_package_versions(
    """the rows to be inserted"""
    objects: [package_versions_insert_input!]!

    """on conflict condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions_mutation_response

  """
  insert a single row into the table: "package_versions"
  """
  insert_package_versions_one(
    """the row to be inserted"""
    object: package_versions_insert_input!

    """on conflict condition"""
    on_conflict: package_versions_on_conflict
  ): package_versions

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities(
    """the rows to be inserted"""
    objects: [related_vulnerabilities_insert_input!]!

    """on conflict condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities_mutation_response

  """
  insert a single row into the table: "related_vulnerabilities"
  """
  insert_related_vulnerabilities_one(
    """the row to be inserted"""
    object: related_vulnerabilities_insert_input!

    """on conflict condition"""
    on_conflict: related_vulnerabilities_on_conflict
  ): related_vulnerabilities

  """
  insert data into the table: "reports"
  """
  insert_reports(
    """the rows to be inserted"""
    objects: [reports_insert_input!]!

    """on conflict condition"""
    on_conflict: reports_on_conflict
  ): reports_mutation_response

  """
  insert a single row into the table: "reports"
  """
  insert_reports_one(
    """the row to be inserted"""
    object: reports_insert_input!

    """on conflict condition"""
    on_conflict: reports_on_conflict
  ): reports

  """
  insert data into the table: "sboms"
  """
  insert_sboms(
    """the rows to be inserted"""
    objects: [sboms_insert_input!]!

    """on conflict condition"""
    on_conflict: sboms_on_conflict
  ): sboms_mutation_response

  """
  insert a single row into the table: "sboms"
  """
  insert_sboms_one(
    """the row to be inserted"""
    object: sboms_insert_input!

    """on conflict condition"""
    on_conflict: sboms_on_conflict
  ): sboms

  """
  insert data into the table: "scans"
  """
  insert_scans(
    """the rows to be inserted"""
    objects: [scans_insert_input!]!

    """on conflict condition"""
    on_conflict: scans_on_conflict
  ): scans_mutation_response

  """
  insert a single row into the table: "scans"
  """
  insert_scans_one(
    """the row to be inserted"""
    object: scans_insert_input!

    """on conflict condition"""
    on_conflict: scans_on_conflict
  ): scans

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """on conflict condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "vulnerabilities"
  """
  insert_vulnerabilities(
    """the rows to be inserted"""
    objects: [vulnerabilities_insert_input!]!

    """on conflict condition"""
    on_conflict: vulnerabilities_on_conflict
  ): vulnerabilities_mutation_response

  """
  insert a single row into the table: "vulnerabilities"
  """
  insert_vulnerabilities_one(
    """the row to be inserted"""
    object: vulnerabilities_insert_input!

    """on conflict condition"""
    on_conflict: vulnerabilities_on_conflict
  ): vulnerabilities

  """
  insert data into the table: "vulnerability_packages"
  """
  insert_vulnerability_packages(
    """the rows to be inserted"""
    objects: [vulnerability_packages_insert_input!]!

    """on conflict condition"""
    on_conflict: vulnerability_packages_on_conflict
  ): vulnerability_packages_mutation_response

  """
  insert a single row into the table: "vulnerability_packages"
  """
  insert_vulnerability_packages_one(
    """the row to be inserted"""
    object: vulnerability_packages_insert_input!

    """on conflict condition"""
    on_conflict: vulnerability_packages_on_conflict
  ): vulnerability_packages

  """
  update data of the table: "findings"
  """
  update_findings(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input

    """filter the rows which have to be updated"""
    where: findings_bool_exp!
  ): findings_mutation_response

  """
  update single row of the table: "findings"
  """
  update_findings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: findings_set_input
    pk_columns: findings_pk_columns_input!
  ): findings

  """
  update data of the table: "organization_user"
  """
  update_organization_user(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input

    """filter the rows which have to be updated"""
    where: organization_user_bool_exp!
  ): organization_user_mutation_response

  """
  update single row of the table: "organization_user"
  """
  update_organization_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: organization_user_set_input
    pk_columns: organization_user_pk_columns_input!
  ): organization_user

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input

    """filter the rows which have to be updated"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update data of the table: "package_versions"
  """
  update_package_versions(
    """sets the columns of the filtered rows to the given values"""
    _set: package_versions_set_input

    """filter the rows which have to be updated"""
    where: package_versions_bool_exp!
  ): package_versions_mutation_response

  """
  update single row of the table: "package_versions"
  """
  update_package_versions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: package_versions_set_input
    pk_columns: package_versions_pk_columns_input!
  ): package_versions

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "related_vulnerabilities"
  """
  update_related_vulnerabilities(
    """sets the columns of the filtered rows to the given values"""
    _set: related_vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: related_vulnerabilities_bool_exp!
  ): related_vulnerabilities_mutation_response

  """
  update single row of the table: "related_vulnerabilities"
  """
  update_related_vulnerabilities_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: related_vulnerabilities_set_input
    pk_columns: related_vulnerabilities_pk_columns_input!
  ): related_vulnerabilities

  """
  update data of the table: "reports"
  """
  update_reports(
    """sets the columns of the filtered rows to the given values"""
    _set: reports_set_input

    """filter the rows which have to be updated"""
    where: reports_bool_exp!
  ): reports_mutation_response

  """
  update single row of the table: "reports"
  """
  update_reports_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: reports_set_input
    pk_columns: reports_pk_columns_input!
  ): reports

  """
  update data of the table: "sboms"
  """
  update_sboms(
    """sets the columns of the filtered rows to the given values"""
    _set: sboms_set_input

    """filter the rows which have to be updated"""
    where: sboms_bool_exp!
  ): sboms_mutation_response

  """
  update single row of the table: "sboms"
  """
  update_sboms_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sboms_set_input
    pk_columns: sboms_pk_columns_input!
  ): sboms

  """
  update data of the table: "scans"
  """
  update_scans(
    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input

    """filter the rows which have to be updated"""
    where: scans_bool_exp!
  ): scans_mutation_response

  """
  update single row of the table: "scans"
  """
  update_scans_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: scans_set_input
    pk_columns: scans_pk_columns_input!
  ): scans

  """
  update data of the table: "settings"
  """
  update_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "vulnerabilities"
  """
  update_vulnerabilities(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerabilities_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerabilities_set_input

    """filter the rows which have to be updated"""
    where: vulnerabilities_bool_exp!
  ): vulnerabilities_mutation_response

  """
  update single row of the table: "vulnerabilities"
  """
  update_vulnerabilities_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vulnerabilities_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vulnerabilities_set_input
    pk_columns: vulnerabilities_pk_columns_input!
  ): vulnerabilities

  """
  update data of the table: "vulnerability_packages"
  """
  update_vulnerability_packages(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_packages_set_input

    """filter the rows which have to be updated"""
    where: vulnerability_packages_bool_exp!
  ): vulnerability_packages_mutation_response

  """
  update single row of the table: "vulnerability_packages"
  """
  update_vulnerability_packages_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: vulnerability_packages_set_input
    pk_columns: vulnerability_packages_pk_columns_input!
  ): vulnerability_packages
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
join table


columns and relationships of "organization_user"
"""
type organization_user {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  organization: organizations!
  organization_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "organization_user"
"""
type organization_user_aggregate {
  aggregate: organization_user_aggregate_fields
  nodes: [organization_user!]!
}

"""
aggregate fields of "organization_user"
"""
type organization_user_aggregate_fields {
  count(columns: [organization_user_select_column!], distinct: Boolean): Int!
  max: organization_user_max_fields
  min: organization_user_min_fields
}

"""
order by aggregate values of table "organization_user"
"""
input organization_user_aggregate_order_by {
  count: order_by
  max: organization_user_max_order_by
  min: organization_user_min_order_by
}

"""
input type for inserting array relation for remote table "organization_user"
"""
input organization_user_arr_rel_insert_input {
  data: [organization_user_insert_input!]!

  """on conflict condition"""
  on_conflict: organization_user_on_conflict
}

"""
Boolean expression to filter rows from the table "organization_user". All fields are combined with a logical 'AND'.
"""
input organization_user_bool_exp {
  _and: [organization_user_bool_exp!]
  _not: organization_user_bool_exp
  _or: [organization_user_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organization_user"
"""
enum organization_user_constraint {
  """unique or primary key constraint"""
  organization_user_pkey
}

"""
input type for inserting data into table "organization_user"
"""
input organization_user_insert_input {
  created_at: timestamptz
  id: uuid
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type organization_user_max_fields {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "organization_user"
"""
input organization_user_max_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type organization_user_min_fields {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "organization_user"
"""
input organization_user_min_order_by {
  created_at: order_by
  id: order_by
  organization_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "organization_user"
"""
type organization_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization_user!]!
}

"""
on conflict condition type for table "organization_user"
"""
input organization_user_on_conflict {
  constraint: organization_user_constraint!
  update_columns: [organization_user_update_column!]! = []
  where: organization_user_bool_exp
}

"""Ordering options when selecting data from "organization_user"."""
input organization_user_order_by {
  created_at: order_by
  id: order_by
  organization: organizations_order_by
  organization_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: organization_user"""
input organization_user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "organization_user"
"""
enum organization_user_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "organization_user"
"""
input organization_user_set_input {
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "organization_user"
"""
enum organization_user_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  organization_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "organizations"
"""
type organizations {
  createdAt: timestamp!
  id: uuid!
  name: String!

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An aggregate relationship"""
  organization_users_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!
  settings_id: uuid
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  createdAt: timestamp_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  organization_users: organization_user_bool_exp
  projects: projects_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """unique or primary key constraint"""
  organizations_pkey
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  createdAt: timestamp
  id: uuid
  name: String
  organization_users: organization_user_arr_rel_insert_input
  projects: projects_arr_rel_insert_input
  settings_id: uuid
}

"""aggregate max on columns"""
type organizations_max_fields {
  createdAt: timestamp
  id: uuid
  name: String
  settings_id: uuid
}

"""aggregate min on columns"""
type organizations_min_fields {
  createdAt: timestamp
  id: uuid
  name: String
  settings_id: uuid
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!

  """on conflict condition"""
  on_conflict: organizations_on_conflict
}

"""
on conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

"""Ordering options when selecting data from "organizations"."""
input organizations_order_by {
  createdAt: order_by
  id: order_by
  name: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
  projects_aggregate: projects_aggregate_order_by
  settings_id: order_by
}

"""primary key columns input for table: organizations"""
input organizations_pk_columns_input {
  id: uuid!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  settings_id
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  createdAt: timestamp
  id: uuid
  name: String
  settings_id: uuid
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  settings_id
}

"""
columns and relationships of "package_versions"
"""
type package_versions {
  cpes: _text!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  fix_state: String!
  fixed_in_versions: _text!
  id: uuid!
  pkg_slug: String!
  slug: String!
  version_constraint: String!
  version_format: String!
}

"""
aggregated selection of "package_versions"
"""
type package_versions_aggregate {
  aggregate: package_versions_aggregate_fields
  nodes: [package_versions!]!
}

"""
aggregate fields of "package_versions"
"""
type package_versions_aggregate_fields {
  count(columns: [package_versions_select_column!], distinct: Boolean): Int!
  max: package_versions_max_fields
  min: package_versions_min_fields
}

"""
Boolean expression to filter rows from the table "package_versions". All fields are combined with a logical 'AND'.
"""
input package_versions_bool_exp {
  _and: [package_versions_bool_exp!]
  _not: package_versions_bool_exp
  _or: [package_versions_bool_exp!]
  cpes: _text_comparison_exp
  findings: findings_bool_exp
  fix_state: String_comparison_exp
  fixed_in_versions: _text_comparison_exp
  id: uuid_comparison_exp
  pkg_slug: String_comparison_exp
  slug: String_comparison_exp
  version_constraint: String_comparison_exp
  version_format: String_comparison_exp
}

"""
unique or primary key constraints on table "package_versions"
"""
enum package_versions_constraint {
  """unique or primary key constraint"""
  package_versions_pkey

  """unique or primary key constraint"""
  package_versions_slug_key
}

"""
input type for inserting data into table "package_versions"
"""
input package_versions_insert_input {
  cpes: _text
  findings: findings_arr_rel_insert_input
  fix_state: String
  fixed_in_versions: _text
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""aggregate max on columns"""
type package_versions_max_fields {
  fix_state: String
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""aggregate min on columns"""
type package_versions_min_fields {
  fix_state: String
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""
response of any mutation on the table "package_versions"
"""
type package_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [package_versions!]!
}

"""
input type for inserting object relation for remote table "package_versions"
"""
input package_versions_obj_rel_insert_input {
  data: package_versions_insert_input!

  """on conflict condition"""
  on_conflict: package_versions_on_conflict
}

"""
on conflict condition type for table "package_versions"
"""
input package_versions_on_conflict {
  constraint: package_versions_constraint!
  update_columns: [package_versions_update_column!]! = []
  where: package_versions_bool_exp
}

"""Ordering options when selecting data from "package_versions"."""
input package_versions_order_by {
  cpes: order_by
  findings_aggregate: findings_aggregate_order_by
  fix_state: order_by
  fixed_in_versions: order_by
  id: order_by
  pkg_slug: order_by
  slug: order_by
  version_constraint: order_by
  version_format: order_by
}

"""primary key columns input for table: package_versions"""
input package_versions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "package_versions"
"""
enum package_versions_select_column {
  """column name"""
  cpes

  """column name"""
  fix_state

  """column name"""
  fixed_in_versions

  """column name"""
  id

  """column name"""
  pkg_slug

  """column name"""
  slug

  """column name"""
  version_constraint

  """column name"""
  version_format
}

"""
input type for updating data in table "package_versions"
"""
input package_versions_set_input {
  cpes: _text
  fix_state: String
  fixed_in_versions: _text
  id: uuid
  pkg_slug: String
  slug: String
  version_constraint: String
  version_format: String
}

"""
update columns of table "package_versions"
"""
enum package_versions_update_column {
  """column name"""
  cpes

  """column name"""
  fix_state

  """column name"""
  fixed_in_versions

  """column name"""
  id

  """column name"""
  pkg_slug

  """column name"""
  slug

  """column name"""
  version_constraint

  """column name"""
  version_format
}

"""
columns and relationships of "projects"
"""
type projects {
  created_at: timestamp!
  id: uuid!
  name: String!

  """An object relationship"""
  organization: organizations
  organization_id: uuid
  repo: String

  """
  fetch data from the table: "reports"
  """
  reports(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): [reports!]!

  """An aggregate relationship"""
  reports_aggregate(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): reports_aggregate!

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!
  settings_id: uuid
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!

  """on conflict condition"""
  on_conflict: projects_on_conflict
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  organization: organizations_bool_exp
  organization_id: uuid_comparison_exp
  repo: String_comparison_exp
  reports: reports_bool_exp
  scans: scans_bool_exp
  settings_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  projects_pkey
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  created_at: timestamp
  id: uuid
  name: String
  organization: organizations_obj_rel_insert_input
  organization_id: uuid
  repo: String
  reports: reports_arr_rel_insert_input
  scans: scans_arr_rel_insert_input
  settings_id: uuid
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization_id: order_by
  repo: order_by
  settings_id: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """on conflict condition"""
  on_conflict: projects_on_conflict
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  organization: organizations_order_by
  organization_id: order_by
  repo: order_by
  reports_aggregate: reports_aggregate_order_by
  scans_aggregate: scans_aggregate_order_by
  settings_id: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: uuid!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamp
  id: uuid
  name: String
  organization_id: uuid
  repo: String
  settings_id: uuid
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organization_id

  """column name"""
  repo

  """column name"""
  settings_id
}

type query_root {
  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch aggregated fields from the table: "organization_user"
  """
  organization_user_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table: "package_versions"
  """
  package_versions(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): [package_versions!]!

  """
  fetch aggregated fields from the table: "package_versions"
  """
  package_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): package_versions_aggregate!

  """
  fetch data from the table: "package_versions" using primary key columns
  """
  package_versions_by_pk(id: uuid!): package_versions

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """
  fetch data from the table: "related_vulnerabilities" using primary key columns
  """
  related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """
  fetch data from the table: "reports"
  """
  reports(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): [reports!]!

  """An aggregate relationship"""
  reports_aggregate(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): reports_aggregate!

  """fetch data from the table: "reports" using primary key columns"""
  reports_by_pk(id: uuid!): reports

  """
  fetch data from the table: "sboms"
  """
  sboms(
    """distinct select on columns"""
    distinct_on: [sboms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sboms_order_by!]

    """filter the rows returned"""
    where: sboms_bool_exp
  ): [sboms!]!

  """
  fetch aggregated fields from the table: "sboms"
  """
  sboms_aggregate(
    """distinct select on columns"""
    distinct_on: [sboms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sboms_order_by!]

    """filter the rows returned"""
    where: sboms_bool_exp
  ): sboms_aggregate!

  """fetch data from the table: "sboms" using primary key columns"""
  sboms_by_pk(id: uuid!): sboms

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "vulnerabilities"
  """
  vulnerabilities(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): [vulnerabilities!]!

  """
  fetch aggregated fields from the table: "vulnerabilities"
  """
  vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): vulnerabilities_aggregate!

  """fetch data from the table: "vulnerabilities" using primary key columns"""
  vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!

  """
  fetch data from the table: "vulnerability_packages" using primary key columns
  """
  vulnerability_packages_by_pk(id: uuid!): vulnerability_packages
}

"""
join table for adding holding additional vulns on a finding


columns and relationships of "related_vulnerabilities"
"""
type related_vulnerabilities {
  id: uuid!
  related_vulnerability_slug: String!

  """An object relationship"""
  vulnerability: vulnerabilities!

  """An object relationship"""
  vulnerabilityByVulnerabilitySlug: vulnerabilities!
  vulnerability_slug: String!
}

"""
aggregated selection of "related_vulnerabilities"
"""
type related_vulnerabilities_aggregate {
  aggregate: related_vulnerabilities_aggregate_fields
  nodes: [related_vulnerabilities!]!
}

"""
aggregate fields of "related_vulnerabilities"
"""
type related_vulnerabilities_aggregate_fields {
  count(columns: [related_vulnerabilities_select_column!], distinct: Boolean): Int!
  max: related_vulnerabilities_max_fields
  min: related_vulnerabilities_min_fields
}

"""
order by aggregate values of table "related_vulnerabilities"
"""
input related_vulnerabilities_aggregate_order_by {
  count: order_by
  max: related_vulnerabilities_max_order_by
  min: related_vulnerabilities_min_order_by
}

"""
input type for inserting array relation for remote table "related_vulnerabilities"
"""
input related_vulnerabilities_arr_rel_insert_input {
  data: [related_vulnerabilities_insert_input!]!

  """on conflict condition"""
  on_conflict: related_vulnerabilities_on_conflict
}

"""
Boolean expression to filter rows from the table "related_vulnerabilities". All fields are combined with a logical 'AND'.
"""
input related_vulnerabilities_bool_exp {
  _and: [related_vulnerabilities_bool_exp!]
  _not: related_vulnerabilities_bool_exp
  _or: [related_vulnerabilities_bool_exp!]
  id: uuid_comparison_exp
  related_vulnerability_slug: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
  vulnerabilityByVulnerabilitySlug: vulnerabilities_bool_exp
  vulnerability_slug: String_comparison_exp
}

"""
unique or primary key constraints on table "related_vulnerabilities"
"""
enum related_vulnerabilities_constraint {
  """unique or primary key constraint"""
  constraint_name

  """unique or primary key constraint"""
  related_vulnerabilities_pkey
}

"""
input type for inserting data into table "related_vulnerabilities"
"""
input related_vulnerabilities_insert_input {
  id: uuid
  related_vulnerability_slug: String
  vulnerability: vulnerabilities_obj_rel_insert_input
  vulnerabilityByVulnerabilitySlug: vulnerabilities_obj_rel_insert_input
  vulnerability_slug: String
}

"""aggregate max on columns"""
type related_vulnerabilities_max_fields {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
order by max() on columns of table "related_vulnerabilities"
"""
input related_vulnerabilities_max_order_by {
  id: order_by
  related_vulnerability_slug: order_by
  vulnerability_slug: order_by
}

"""aggregate min on columns"""
type related_vulnerabilities_min_fields {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
order by min() on columns of table "related_vulnerabilities"
"""
input related_vulnerabilities_min_order_by {
  id: order_by
  related_vulnerability_slug: order_by
  vulnerability_slug: order_by
}

"""
response of any mutation on the table "related_vulnerabilities"
"""
type related_vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [related_vulnerabilities!]!
}

"""
on conflict condition type for table "related_vulnerabilities"
"""
input related_vulnerabilities_on_conflict {
  constraint: related_vulnerabilities_constraint!
  update_columns: [related_vulnerabilities_update_column!]! = []
  where: related_vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "related_vulnerabilities"."""
input related_vulnerabilities_order_by {
  id: order_by
  related_vulnerability_slug: order_by
  vulnerability: vulnerabilities_order_by
  vulnerabilityByVulnerabilitySlug: vulnerabilities_order_by
  vulnerability_slug: order_by
}

"""primary key columns input for table: related_vulnerabilities"""
input related_vulnerabilities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "related_vulnerabilities"
"""
enum related_vulnerabilities_select_column {
  """column name"""
  id

  """column name"""
  related_vulnerability_slug

  """column name"""
  vulnerability_slug
}

"""
input type for updating data in table "related_vulnerabilities"
"""
input related_vulnerabilities_set_input {
  id: uuid
  related_vulnerability_slug: String
  vulnerability_slug: String
}

"""
update columns of table "related_vulnerabilities"
"""
enum related_vulnerabilities_update_column {
  """column name"""
  id

  """column name"""
  related_vulnerability_slug

  """column name"""
  vulnerability_slug
}

"""
scan reports


columns and relationships of "reports"
"""
type reports {
  db_date: date!
  distro_name: String!
  distro_version: String!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  grype_version: String!
  id: uuid!

  """An object relationship"""
  project: projects!
  project_id: uuid!
  source_type: String!
  target: String!
}

"""
aggregated selection of "reports"
"""
type reports_aggregate {
  aggregate: reports_aggregate_fields
  nodes: [reports!]!
}

"""
aggregate fields of "reports"
"""
type reports_aggregate_fields {
  count(columns: [reports_select_column!], distinct: Boolean): Int!
  max: reports_max_fields
  min: reports_min_fields
}

"""
order by aggregate values of table "reports"
"""
input reports_aggregate_order_by {
  count: order_by
  max: reports_max_order_by
  min: reports_min_order_by
}

"""
input type for inserting array relation for remote table "reports"
"""
input reports_arr_rel_insert_input {
  data: [reports_insert_input!]!

  """on conflict condition"""
  on_conflict: reports_on_conflict
}

"""
Boolean expression to filter rows from the table "reports". All fields are combined with a logical 'AND'.
"""
input reports_bool_exp {
  _and: [reports_bool_exp!]
  _not: reports_bool_exp
  _or: [reports_bool_exp!]
  db_date: date_comparison_exp
  distro_name: String_comparison_exp
  distro_version: String_comparison_exp
  findings: findings_bool_exp
  grype_version: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  source_type: String_comparison_exp
  target: String_comparison_exp
}

"""
unique or primary key constraints on table "reports"
"""
enum reports_constraint {
  """unique or primary key constraint"""
  reports_pkey
}

"""
input type for inserting data into table "reports"
"""
input reports_insert_input {
  db_date: date
  distro_name: String
  distro_version: String
  findings: findings_arr_rel_insert_input
  grype_version: String
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
  source_type: String
  target: String
}

"""aggregate max on columns"""
type reports_max_fields {
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  source_type: String
  target: String
}

"""
order by max() on columns of table "reports"
"""
input reports_max_order_by {
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  project_id: order_by
  source_type: order_by
  target: order_by
}

"""aggregate min on columns"""
type reports_min_fields {
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  source_type: String
  target: String
}

"""
order by min() on columns of table "reports"
"""
input reports_min_order_by {
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  project_id: order_by
  source_type: order_by
  target: order_by
}

"""
response of any mutation on the table "reports"
"""
type reports_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [reports!]!
}

"""
input type for inserting object relation for remote table "reports"
"""
input reports_obj_rel_insert_input {
  data: reports_insert_input!

  """on conflict condition"""
  on_conflict: reports_on_conflict
}

"""
on conflict condition type for table "reports"
"""
input reports_on_conflict {
  constraint: reports_constraint!
  update_columns: [reports_update_column!]! = []
  where: reports_bool_exp
}

"""Ordering options when selecting data from "reports"."""
input reports_order_by {
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  findings_aggregate: findings_aggregate_order_by
  grype_version: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  source_type: order_by
  target: order_by
}

"""primary key columns input for table: reports"""
input reports_pk_columns_input {
  id: uuid!
}

"""
select columns of table "reports"
"""
enum reports_select_column {
  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  source_type

  """column name"""
  target
}

"""
input type for updating data in table "reports"
"""
input reports_set_input {
  db_date: date
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  source_type: String
  target: String
}

"""
update columns of table "reports"
"""
enum reports_update_column {
  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  source_type

  """column name"""
  target
}

"""
columns and relationships of "sboms"
"""
type sboms {
  created_at: timestamp!
  id: uuid!
  s3_url: String

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!
}

"""
aggregated selection of "sboms"
"""
type sboms_aggregate {
  aggregate: sboms_aggregate_fields
  nodes: [sboms!]!
}

"""
aggregate fields of "sboms"
"""
type sboms_aggregate_fields {
  count(columns: [sboms_select_column!], distinct: Boolean): Int!
  max: sboms_max_fields
  min: sboms_min_fields
}

"""
Boolean expression to filter rows from the table "sboms". All fields are combined with a logical 'AND'.
"""
input sboms_bool_exp {
  _and: [sboms_bool_exp!]
  _not: sboms_bool_exp
  _or: [sboms_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  s3_url: String_comparison_exp
  scans: scans_bool_exp
}

"""
unique or primary key constraints on table "sboms"
"""
enum sboms_constraint {
  """unique or primary key constraint"""
  sboms_pkey
}

"""
input type for inserting data into table "sboms"
"""
input sboms_insert_input {
  created_at: timestamp
  id: uuid
  s3_url: String
  scans: scans_arr_rel_insert_input
}

"""aggregate max on columns"""
type sboms_max_fields {
  created_at: timestamp
  id: uuid
  s3_url: String
}

"""aggregate min on columns"""
type sboms_min_fields {
  created_at: timestamp
  id: uuid
  s3_url: String
}

"""
response of any mutation on the table "sboms"
"""
type sboms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sboms!]!
}

"""
input type for inserting object relation for remote table "sboms"
"""
input sboms_obj_rel_insert_input {
  data: sboms_insert_input!

  """on conflict condition"""
  on_conflict: sboms_on_conflict
}

"""
on conflict condition type for table "sboms"
"""
input sboms_on_conflict {
  constraint: sboms_constraint!
  update_columns: [sboms_update_column!]! = []
  where: sboms_bool_exp
}

"""Ordering options when selecting data from "sboms"."""
input sboms_order_by {
  created_at: order_by
  id: order_by
  s3_url: order_by
  scans_aggregate: scans_aggregate_order_by
}

"""primary key columns input for table: sboms"""
input sboms_pk_columns_input {
  id: uuid!
}

"""
select columns of table "sboms"
"""
enum sboms_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  s3_url
}

"""
input type for updating data in table "sboms"
"""
input sboms_set_input {
  created_at: timestamp
  id: uuid
  s3_url: String
}

"""
update columns of table "sboms"
"""
enum sboms_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  s3_url
}

"""
columns and relationships of "scans"
"""
type scans {
  created_at: timestamp!
  db_date: timestamp!
  distro_name: String
  distro_version: String
  grype_version: String!
  id: uuid!

  """An object relationship"""
  project: projects
  project_id: uuid

  """An object relationship"""
  sbom: sboms
  sbom_id: uuid
  source_type: String!
  target: String!
}

"""
aggregated selection of "scans"
"""
type scans_aggregate {
  aggregate: scans_aggregate_fields
  nodes: [scans!]!
}

"""
aggregate fields of "scans"
"""
type scans_aggregate_fields {
  count(columns: [scans_select_column!], distinct: Boolean): Int!
  max: scans_max_fields
  min: scans_min_fields
}

"""
order by aggregate values of table "scans"
"""
input scans_aggregate_order_by {
  count: order_by
  max: scans_max_order_by
  min: scans_min_order_by
}

"""
input type for inserting array relation for remote table "scans"
"""
input scans_arr_rel_insert_input {
  data: [scans_insert_input!]!

  """on conflict condition"""
  on_conflict: scans_on_conflict
}

"""
Boolean expression to filter rows from the table "scans". All fields are combined with a logical 'AND'.
"""
input scans_bool_exp {
  _and: [scans_bool_exp!]
  _not: scans_bool_exp
  _or: [scans_bool_exp!]
  created_at: timestamp_comparison_exp
  db_date: timestamp_comparison_exp
  distro_name: String_comparison_exp
  distro_version: String_comparison_exp
  grype_version: String_comparison_exp
  id: uuid_comparison_exp
  project: projects_bool_exp
  project_id: uuid_comparison_exp
  sbom: sboms_bool_exp
  sbom_id: uuid_comparison_exp
  source_type: String_comparison_exp
  target: String_comparison_exp
}

"""
unique or primary key constraints on table "scans"
"""
enum scans_constraint {
  """unique or primary key constraint"""
  scans_pkey
}

"""
input type for inserting data into table "scans"
"""
input scans_insert_input {
  created_at: timestamp
  db_date: timestamp
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project: projects_obj_rel_insert_input
  project_id: uuid
  sbom: sboms_obj_rel_insert_input
  sbom_id: uuid
  source_type: String
  target: String
}

"""aggregate max on columns"""
type scans_max_fields {
  created_at: timestamp
  db_date: timestamp
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  sbom_id: uuid
  source_type: String
  target: String
}

"""
order by max() on columns of table "scans"
"""
input scans_max_order_by {
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  project_id: order_by
  sbom_id: order_by
  source_type: order_by
  target: order_by
}

"""aggregate min on columns"""
type scans_min_fields {
  created_at: timestamp
  db_date: timestamp
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  sbom_id: uuid
  source_type: String
  target: String
}

"""
order by min() on columns of table "scans"
"""
input scans_min_order_by {
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  project_id: order_by
  sbom_id: order_by
  source_type: order_by
  target: order_by
}

"""
response of any mutation on the table "scans"
"""
type scans_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [scans!]!
}

"""
on conflict condition type for table "scans"
"""
input scans_on_conflict {
  constraint: scans_constraint!
  update_columns: [scans_update_column!]! = []
  where: scans_bool_exp
}

"""Ordering options when selecting data from "scans"."""
input scans_order_by {
  created_at: order_by
  db_date: order_by
  distro_name: order_by
  distro_version: order_by
  grype_version: order_by
  id: order_by
  project: projects_order_by
  project_id: order_by
  sbom: sboms_order_by
  sbom_id: order_by
  source_type: order_by
  target: order_by
}

"""primary key columns input for table: scans"""
input scans_pk_columns_input {
  id: uuid!
}

"""
select columns of table "scans"
"""
enum scans_select_column {
  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  sbom_id

  """column name"""
  source_type

  """column name"""
  target
}

"""
input type for updating data in table "scans"
"""
input scans_set_input {
  created_at: timestamp
  db_date: timestamp
  distro_name: String
  distro_version: String
  grype_version: String
  id: uuid
  project_id: uuid
  sbom_id: uuid
  source_type: String
  target: String
}

"""
update columns of table "scans"
"""
enum scans_update_column {
  """column name"""
  created_at

  """column name"""
  db_date

  """column name"""
  distro_name

  """column name"""
  distro_version

  """column name"""
  grype_version

  """column name"""
  id

  """column name"""
  project_id

  """column name"""
  sbom_id

  """column name"""
  source_type

  """column name"""
  target
}

"""
columns and relationships of "settings"
"""
type settings {
  created_at: timestamp!
  id: uuid!
  is_org_settings: Boolean
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  is_org_settings: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """unique or primary key constraint"""
  settings_pkey
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  created_at: timestamp
  id: uuid
  is_org_settings: Boolean
}

"""aggregate max on columns"""
type settings_max_fields {
  created_at: timestamp
  id: uuid
}

"""aggregate min on columns"""
type settings_min_fields {
  created_at: timestamp
  id: uuid
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  created_at: order_by
  id: order_by
  is_org_settings: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_org_settings
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  created_at: timestamp
  id: uuid
  is_org_settings: Boolean
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_org_settings
}

type subscription_root {
  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!

  """fetch data from the table: "findings" using primary key columns"""
  findings_by_pk(id: uuid!): findings

  """
  fetch data from the table: "organization_user"
  """
  organization_user(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """
  fetch aggregated fields from the table: "organization_user"
  """
  organization_user_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!

  """
  fetch data from the table: "organization_user" using primary key columns
  """
  organization_user_by_pk(id: uuid!): organization_user

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table: "package_versions"
  """
  package_versions(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): [package_versions!]!

  """
  fetch aggregated fields from the table: "package_versions"
  """
  package_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [package_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [package_versions_order_by!]

    """filter the rows returned"""
    where: package_versions_bool_exp
  ): package_versions_aggregate!

  """
  fetch data from the table: "package_versions" using primary key columns
  """
  package_versions_by_pk(id: uuid!): package_versions

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: uuid!): projects

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """
  fetch data from the table: "related_vulnerabilities" using primary key columns
  """
  related_vulnerabilities_by_pk(id: uuid!): related_vulnerabilities

  """
  fetch data from the table: "reports"
  """
  reports(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): [reports!]!

  """An aggregate relationship"""
  reports_aggregate(
    """distinct select on columns"""
    distinct_on: [reports_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reports_order_by!]

    """filter the rows returned"""
    where: reports_bool_exp
  ): reports_aggregate!

  """fetch data from the table: "reports" using primary key columns"""
  reports_by_pk(id: uuid!): reports

  """
  fetch data from the table: "sboms"
  """
  sboms(
    """distinct select on columns"""
    distinct_on: [sboms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sboms_order_by!]

    """filter the rows returned"""
    where: sboms_bool_exp
  ): [sboms!]!

  """
  fetch aggregated fields from the table: "sboms"
  """
  sboms_aggregate(
    """distinct select on columns"""
    distinct_on: [sboms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sboms_order_by!]

    """filter the rows returned"""
    where: sboms_bool_exp
  ): sboms_aggregate!

  """fetch data from the table: "sboms" using primary key columns"""
  sboms_by_pk(id: uuid!): sboms

  """An array relationship"""
  scans(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): [scans!]!

  """An aggregate relationship"""
  scans_aggregate(
    """distinct select on columns"""
    distinct_on: [scans_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scans_order_by!]

    """filter the rows returned"""
    where: scans_bool_exp
  ): scans_aggregate!

  """fetch data from the table: "scans" using primary key columns"""
  scans_by_pk(id: uuid!): scans

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(id: uuid!): settings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "vulnerabilities"
  """
  vulnerabilities(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): [vulnerabilities!]!

  """
  fetch aggregated fields from the table: "vulnerabilities"
  """
  vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerabilities_order_by!]

    """filter the rows returned"""
    where: vulnerabilities_bool_exp
  ): vulnerabilities_aggregate!

  """fetch data from the table: "vulnerabilities" using primary key columns"""
  vulnerabilities_by_pk(id: uuid!): vulnerabilities

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!

  """
  fetch data from the table: "vulnerability_packages" using primary key columns
  """
  vulnerability_packages_by_pk(id: uuid!): vulnerability_packages
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  created_at: timestamp!
  email: String!
  id: uuid!
  name: String!

  """An array relationship"""
  organization_users(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): [organization_user!]!

  """An aggregate relationship"""
  organization_users_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_user_order_by!]

    """filter the rows returned"""
    where: organization_user_bool_exp
  ): organization_user_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamp_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  organization_users: organization_user_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  created_at: timestamp
  email: String
  id: uuid
  name: String
  organization_users: organization_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  created_at: timestamp
  email: String
  id: uuid
  name: String
}

"""aggregate min on columns"""
type users_min_fields {
  created_at: timestamp
  email: String
  id: uuid
  name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  organization_users_aggregate: organization_user_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamp
  email: String
  id: uuid
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "vulnerabilities"
"""
type vulnerabilities {
  created_at: timestamp!
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  id: uuid!
  name: String!
  namespace: String!
  record_source: String

  """An array relationship"""
  relatedVulnerabilitiesByVulnerabilitySlug(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  relatedVulnerabilitiesByVulnerabilitySlug_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!

  """An array relationship"""
  related_vulnerabilities(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): [related_vulnerabilities!]!

  """An aggregate relationship"""
  related_vulnerabilities_aggregate(
    """distinct select on columns"""
    distinct_on: [related_vulnerabilities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [related_vulnerabilities_order_by!]

    """filter the rows returned"""
    where: related_vulnerabilities_bool_exp
  ): related_vulnerabilities_aggregate!
  severity: String
  slug: String!
  topic_id: uuid
  urls: _text

  """An array relationship"""
  vulnerability_packages(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): [vulnerability_packages!]!

  """An aggregate relationship"""
  vulnerability_packages_aggregate(
    """distinct select on columns"""
    distinct_on: [vulnerability_packages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vulnerability_packages_order_by!]

    """filter the rows returned"""
    where: vulnerability_packages_bool_exp
  ): vulnerability_packages_aggregate!
}

"""
aggregated selection of "vulnerabilities"
"""
type vulnerabilities_aggregate {
  aggregate: vulnerabilities_aggregate_fields
  nodes: [vulnerabilities!]!
}

"""
aggregate fields of "vulnerabilities"
"""
type vulnerabilities_aggregate_fields {
  avg: vulnerabilities_avg_fields
  count(columns: [vulnerabilities_select_column!], distinct: Boolean): Int!
  max: vulnerabilities_max_fields
  min: vulnerabilities_min_fields
  stddev: vulnerabilities_stddev_fields
  stddev_pop: vulnerabilities_stddev_pop_fields
  stddev_samp: vulnerabilities_stddev_samp_fields
  sum: vulnerabilities_sum_fields
  var_pop: vulnerabilities_var_pop_fields
  var_samp: vulnerabilities_var_samp_fields
  variance: vulnerabilities_variance_fields
}

"""aggregate avg on columns"""
type vulnerabilities_avg_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""
Boolean expression to filter rows from the table "vulnerabilities". All fields are combined with a logical 'AND'.
"""
input vulnerabilities_bool_exp {
  _and: [vulnerabilities_bool_exp!]
  _not: vulnerabilities_bool_exp
  _or: [vulnerabilities_bool_exp!]
  created_at: timestamp_comparison_exp
  cvss_exploitability_score: numeric_comparison_exp
  cvss_impact_score: numeric_comparison_exp
  cvss_inferred: Boolean_comparison_exp
  cvss_score: numeric_comparison_exp
  cvss_version: String_comparison_exp
  data_source: String_comparison_exp
  description: String_comparison_exp
  findings: findings_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  namespace: String_comparison_exp
  record_source: String_comparison_exp
  relatedVulnerabilitiesByVulnerabilitySlug: related_vulnerabilities_bool_exp
  related_vulnerabilities: related_vulnerabilities_bool_exp
  severity: String_comparison_exp
  slug: String_comparison_exp
  topic_id: uuid_comparison_exp
  urls: _text_comparison_exp
  vulnerability_packages: vulnerability_packages_bool_exp
}

"""
unique or primary key constraints on table "vulnerabilities"
"""
enum vulnerabilities_constraint {
  """unique or primary key constraint"""
  vulnerabilities_pkey

  """unique or primary key constraint"""
  vulnerabilities_slug_key
}

"""
input type for incrementing numeric columns in table "vulnerabilities"
"""
input vulnerabilities_inc_input {
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
}

"""
input type for inserting data into table "vulnerabilities"
"""
input vulnerabilities_insert_input {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  findings: findings_arr_rel_insert_input
  id: uuid
  name: String
  namespace: String
  record_source: String
  relatedVulnerabilitiesByVulnerabilitySlug: related_vulnerabilities_arr_rel_insert_input
  related_vulnerabilities: related_vulnerabilities_arr_rel_insert_input
  severity: String
  slug: String
  topic_id: uuid
  urls: _text
  vulnerability_packages: vulnerability_packages_arr_rel_insert_input
}

"""aggregate max on columns"""
type vulnerabilities_max_fields {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  severity: String
  slug: String
  topic_id: uuid
}

"""aggregate min on columns"""
type vulnerabilities_min_fields {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  severity: String
  slug: String
  topic_id: uuid
}

"""
response of any mutation on the table "vulnerabilities"
"""
type vulnerabilities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerabilities!]!
}

"""
input type for inserting object relation for remote table "vulnerabilities"
"""
input vulnerabilities_obj_rel_insert_input {
  data: vulnerabilities_insert_input!

  """on conflict condition"""
  on_conflict: vulnerabilities_on_conflict
}

"""
on conflict condition type for table "vulnerabilities"
"""
input vulnerabilities_on_conflict {
  constraint: vulnerabilities_constraint!
  update_columns: [vulnerabilities_update_column!]! = []
  where: vulnerabilities_bool_exp
}

"""Ordering options when selecting data from "vulnerabilities"."""
input vulnerabilities_order_by {
  created_at: order_by
  cvss_exploitability_score: order_by
  cvss_impact_score: order_by
  cvss_inferred: order_by
  cvss_score: order_by
  cvss_version: order_by
  data_source: order_by
  description: order_by
  findings_aggregate: findings_aggregate_order_by
  id: order_by
  name: order_by
  namespace: order_by
  record_source: order_by
  relatedVulnerabilitiesByVulnerabilitySlug_aggregate: related_vulnerabilities_aggregate_order_by
  related_vulnerabilities_aggregate: related_vulnerabilities_aggregate_order_by
  severity: order_by
  slug: order_by
  topic_id: order_by
  urls: order_by
  vulnerability_packages_aggregate: vulnerability_packages_aggregate_order_by
}

"""primary key columns input for table: vulnerabilities"""
input vulnerabilities_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerabilities"
"""
enum vulnerabilities_select_column {
  """column name"""
  created_at

  """column name"""
  cvss_exploitability_score

  """column name"""
  cvss_impact_score

  """column name"""
  cvss_inferred

  """column name"""
  cvss_score

  """column name"""
  cvss_version

  """column name"""
  data_source

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  namespace

  """column name"""
  record_source

  """column name"""
  severity

  """column name"""
  slug

  """column name"""
  topic_id

  """column name"""
  urls
}

"""
input type for updating data in table "vulnerabilities"
"""
input vulnerabilities_set_input {
  created_at: timestamp
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_inferred: Boolean
  cvss_score: numeric
  cvss_version: String
  data_source: String
  description: String
  id: uuid
  name: String
  namespace: String
  record_source: String
  severity: String
  slug: String
  topic_id: uuid
  urls: _text
}

"""aggregate stddev on columns"""
type vulnerabilities_stddev_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate stddev_pop on columns"""
type vulnerabilities_stddev_pop_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate stddev_samp on columns"""
type vulnerabilities_stddev_samp_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate sum on columns"""
type vulnerabilities_sum_fields {
  cvss_exploitability_score: numeric
  cvss_impact_score: numeric
  cvss_score: numeric
}

"""
update columns of table "vulnerabilities"
"""
enum vulnerabilities_update_column {
  """column name"""
  created_at

  """column name"""
  cvss_exploitability_score

  """column name"""
  cvss_impact_score

  """column name"""
  cvss_inferred

  """column name"""
  cvss_score

  """column name"""
  cvss_version

  """column name"""
  data_source

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  namespace

  """column name"""
  record_source

  """column name"""
  severity

  """column name"""
  slug

  """column name"""
  topic_id

  """column name"""
  urls
}

"""aggregate var_pop on columns"""
type vulnerabilities_var_pop_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate var_samp on columns"""
type vulnerabilities_var_samp_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""aggregate variance on columns"""
type vulnerabilities_variance_fields {
  cvss_exploitability_score: Float
  cvss_impact_score: Float
  cvss_score: Float
}

"""
All of the package vulnerabilities belonging to a given vulnerability


columns and relationships of "vulnerability_packages"
"""
type vulnerability_packages {
  advisories: String!

  """An array relationship"""
  findings(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): [findings!]!

  """An aggregate relationship"""
  findings_aggregate(
    """distinct select on columns"""
    distinct_on: [findings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [findings_order_by!]

    """filter the rows returned"""
    where: findings_bool_exp
  ): findings_aggregate!
  id: uuid!
  name: String
  slug: String!
  vuln_slug: String!

  """An object relationship"""
  vulnerability: vulnerabilities!
}

"""
aggregated selection of "vulnerability_packages"
"""
type vulnerability_packages_aggregate {
  aggregate: vulnerability_packages_aggregate_fields
  nodes: [vulnerability_packages!]!
}

"""
aggregate fields of "vulnerability_packages"
"""
type vulnerability_packages_aggregate_fields {
  count(columns: [vulnerability_packages_select_column!], distinct: Boolean): Int!
  max: vulnerability_packages_max_fields
  min: vulnerability_packages_min_fields
}

"""
order by aggregate values of table "vulnerability_packages"
"""
input vulnerability_packages_aggregate_order_by {
  count: order_by
  max: vulnerability_packages_max_order_by
  min: vulnerability_packages_min_order_by
}

"""
input type for inserting array relation for remote table "vulnerability_packages"
"""
input vulnerability_packages_arr_rel_insert_input {
  data: [vulnerability_packages_insert_input!]!

  """on conflict condition"""
  on_conflict: vulnerability_packages_on_conflict
}

"""
Boolean expression to filter rows from the table "vulnerability_packages". All fields are combined with a logical 'AND'.
"""
input vulnerability_packages_bool_exp {
  _and: [vulnerability_packages_bool_exp!]
  _not: vulnerability_packages_bool_exp
  _or: [vulnerability_packages_bool_exp!]
  advisories: String_comparison_exp
  findings: findings_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
  vuln_slug: String_comparison_exp
  vulnerability: vulnerabilities_bool_exp
}

"""
unique or primary key constraints on table "vulnerability_packages"
"""
enum vulnerability_packages_constraint {
  """unique or primary key constraint"""
  vulnerability_packages_pkey

  """unique or primary key constraint"""
  vulnerability_packages_slug_key
}

"""
input type for inserting data into table "vulnerability_packages"
"""
input vulnerability_packages_insert_input {
  advisories: String
  findings: findings_arr_rel_insert_input
  id: uuid
  name: String
  slug: String
  vuln_slug: String
  vulnerability: vulnerabilities_obj_rel_insert_input
}

"""aggregate max on columns"""
type vulnerability_packages_max_fields {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
order by max() on columns of table "vulnerability_packages"
"""
input vulnerability_packages_max_order_by {
  advisories: order_by
  id: order_by
  name: order_by
  slug: order_by
  vuln_slug: order_by
}

"""aggregate min on columns"""
type vulnerability_packages_min_fields {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
order by min() on columns of table "vulnerability_packages"
"""
input vulnerability_packages_min_order_by {
  advisories: order_by
  id: order_by
  name: order_by
  slug: order_by
  vuln_slug: order_by
}

"""
response of any mutation on the table "vulnerability_packages"
"""
type vulnerability_packages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vulnerability_packages!]!
}

"""
input type for inserting object relation for remote table "vulnerability_packages"
"""
input vulnerability_packages_obj_rel_insert_input {
  data: vulnerability_packages_insert_input!

  """on conflict condition"""
  on_conflict: vulnerability_packages_on_conflict
}

"""
on conflict condition type for table "vulnerability_packages"
"""
input vulnerability_packages_on_conflict {
  constraint: vulnerability_packages_constraint!
  update_columns: [vulnerability_packages_update_column!]! = []
  where: vulnerability_packages_bool_exp
}

"""Ordering options when selecting data from "vulnerability_packages"."""
input vulnerability_packages_order_by {
  advisories: order_by
  findings_aggregate: findings_aggregate_order_by
  id: order_by
  name: order_by
  slug: order_by
  vuln_slug: order_by
  vulnerability: vulnerabilities_order_by
}

"""primary key columns input for table: vulnerability_packages"""
input vulnerability_packages_pk_columns_input {
  id: uuid!
}

"""
select columns of table "vulnerability_packages"
"""
enum vulnerability_packages_select_column {
  """column name"""
  advisories

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  vuln_slug
}

"""
input type for updating data in table "vulnerability_packages"
"""
input vulnerability_packages_set_input {
  advisories: String
  id: uuid
  name: String
  slug: String
  vuln_slug: String
}

"""
update columns of table "vulnerability_packages"
"""
enum vulnerability_packages_update_column {
  """column name"""
  advisories

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  vuln_slug
}
