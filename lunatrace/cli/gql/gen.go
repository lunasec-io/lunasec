// Copyright 2022 by LunaSec (owned by Refinery Labs, Inc)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
type Boolean_comparison_exp struct {
	Eq      bool   `json:"_eq"`
	Gt      bool   `json:"_gt"`
	Gte     bool   `json:"_gte"`
	In      []bool `json:"_in"`
	Is_null bool   `json:"_is_null"`
	Lt      bool   `json:"_lt"`
	Lte     bool   `json:"_lte"`
	Neq     bool   `json:"_neq"`
	Nin     []bool `json:"_nin"`
}

// GetEq returns Boolean_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetEq() bool { return v.Eq }

// GetGt returns Boolean_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetGt() bool { return v.Gt }

// GetGte returns Boolean_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetGte() bool { return v.Gte }

// GetIn returns Boolean_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetIn() []bool { return v.In }

// GetIs_null returns Boolean_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Boolean_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetLt() bool { return v.Lt }

// GetLte returns Boolean_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetLte() bool { return v.Lte }

// GetNeq returns Boolean_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetNeq() bool { return v.Neq }

// GetNin returns Boolean_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Boolean_comparison_exp) GetNin() []bool { return v.Nin }

// input type for inserting array relation for remote table "builds"
type Builds_arr_rel_insert_input struct {
	Data []*Builds_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Builds_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Builds_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Builds_arr_rel_insert_input) GetData() []*Builds_insert_input { return v.Data }

// GetOn_conflict returns Builds_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Builds_arr_rel_insert_input) GetOn_conflict() *Builds_on_conflict { return v.On_conflict }

// Boolean expression to filter rows from the table "builds". All fields are combined with a logical 'AND'.
type Builds_bool_exp struct {
	And                       []*Builds_bool_exp                 `json:"_and,omitempty"`
	Not                       *Builds_bool_exp                   `json:"_not,omitempty"`
	Or                        []*Builds_bool_exp                 `json:"_or,omitempty"`
	Agent_access_token        *Uuid_comparison_exp               `json:"agent_access_token,omitempty"`
	Build_number              *Int_comparison_exp                `json:"build_number,omitempty"`
	Created_at                *Timestamp_comparison_exp          `json:"created_at,omitempty"`
	Existing_github_review_id *String_comparison_exp             `json:"existing_github_review_id,omitempty"`
	Findings                  *Findings_bool_exp                 `json:"findings,omitempty"`
	Git_branch                *String_comparison_exp             `json:"git_branch,omitempty"`
	Git_hash                  *String_comparison_exp             `json:"git_hash,omitempty"`
	Git_remote                *String_comparison_exp             `json:"git_remote,omitempty"`
	Id                        *Uuid_comparison_exp               `json:"id,omitempty"`
	Manifests                 *Manifests_bool_exp                `json:"manifests,omitempty"`
	Project                   *Projects_bool_exp                 `json:"project,omitempty"`
	Project_id                *Uuid_comparison_exp               `json:"project_id,omitempty"`
	Pull_request_id           *String_comparison_exp             `json:"pull_request_id,omitempty"`
	S3_url                    *String_comparison_exp             `json:"s3_url,omitempty"`
	Scans                     *Scans_bool_exp                    `json:"scans,omitempty"`
	Source_type               *Builds_source_type_comparison_exp `json:"source_type,omitempty"`
}

// GetAnd returns Builds_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetAnd() []*Builds_bool_exp { return v.And }

// GetNot returns Builds_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetNot() *Builds_bool_exp { return v.Not }

// GetOr returns Builds_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetOr() []*Builds_bool_exp { return v.Or }

// GetAgent_access_token returns Builds_bool_exp.Agent_access_token, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetAgent_access_token() *Uuid_comparison_exp { return v.Agent_access_token }

// GetBuild_number returns Builds_bool_exp.Build_number, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetBuild_number() *Int_comparison_exp { return v.Build_number }

// GetCreated_at returns Builds_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetExisting_github_review_id returns Builds_bool_exp.Existing_github_review_id, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetExisting_github_review_id() *String_comparison_exp {
	return v.Existing_github_review_id
}

// GetFindings returns Builds_bool_exp.Findings, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetFindings() *Findings_bool_exp { return v.Findings }

// GetGit_branch returns Builds_bool_exp.Git_branch, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetGit_branch() *String_comparison_exp { return v.Git_branch }

// GetGit_hash returns Builds_bool_exp.Git_hash, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetGit_hash() *String_comparison_exp { return v.Git_hash }

// GetGit_remote returns Builds_bool_exp.Git_remote, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetGit_remote() *String_comparison_exp { return v.Git_remote }

// GetId returns Builds_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetManifests returns Builds_bool_exp.Manifests, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetManifests() *Manifests_bool_exp { return v.Manifests }

// GetProject returns Builds_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// GetProject_id returns Builds_bool_exp.Project_id, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetProject_id() *Uuid_comparison_exp { return v.Project_id }

// GetPull_request_id returns Builds_bool_exp.Pull_request_id, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetPull_request_id() *String_comparison_exp { return v.Pull_request_id }

// GetS3_url returns Builds_bool_exp.S3_url, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetS3_url() *String_comparison_exp { return v.S3_url }

// GetScans returns Builds_bool_exp.Scans, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetScans() *Scans_bool_exp { return v.Scans }

// GetSource_type returns Builds_bool_exp.Source_type, and is useful for accessing the field via an interface.
func (v *Builds_bool_exp) GetSource_type() *Builds_source_type_comparison_exp { return v.Source_type }

// unique or primary key constraints on table "builds"
type Builds_constraint string

const (
	// unique or primary key constraint
	Builds_constraintBuildsAgentAccessTokenKey Builds_constraint = "builds_agent_access_token_key"
	// unique or primary key constraint
	Builds_constraintBuildsBuildNumberProjectIdKey Builds_constraint = "builds_build_number_project_id_key"
	// unique or primary key constraint
	Builds_constraintBuildsPkey Builds_constraint = "builds_pkey"
)

// input type for inserting data into table "builds"
type Builds_insert_input struct {
	Agent_access_token        uuid.UUID                       `json:"agent_access_token"`
	Build_number              int                             `json:"build_number"`
	Created_at                time.Time                       `json:"created_at"`
	Existing_github_review_id string                          `json:"existing_github_review_id"`
	Findings                  *Findings_arr_rel_insert_input  `json:"findings,omitempty"`
	Git_branch                string                          `json:"git_branch"`
	Git_hash                  string                          `json:"git_hash"`
	Git_remote                string                          `json:"git_remote"`
	Id                        uuid.UUID                       `json:"id"`
	Manifests                 *Manifests_arr_rel_insert_input `json:"manifests,omitempty"`
	Project                   *Projects_obj_rel_insert_input  `json:"project,omitempty"`
	Project_id                uuid.UUID                       `json:"project_id"`
	Pull_request_id           string                          `json:"pull_request_id"`
	S3_url                    string                          `json:"s3_url"`
	Scans                     *Scans_arr_rel_insert_input     `json:"scans,omitempty"`
	Source_type               string                          `json:"source_type"`
}

// GetAgent_access_token returns Builds_insert_input.Agent_access_token, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetAgent_access_token() uuid.UUID { return v.Agent_access_token }

// GetBuild_number returns Builds_insert_input.Build_number, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetBuild_number() int { return v.Build_number }

// GetCreated_at returns Builds_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetExisting_github_review_id returns Builds_insert_input.Existing_github_review_id, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetExisting_github_review_id() string {
	return v.Existing_github_review_id
}

// GetFindings returns Builds_insert_input.Findings, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetFindings() *Findings_arr_rel_insert_input { return v.Findings }

// GetGit_branch returns Builds_insert_input.Git_branch, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetGit_branch() string { return v.Git_branch }

// GetGit_hash returns Builds_insert_input.Git_hash, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetGit_hash() string { return v.Git_hash }

// GetGit_remote returns Builds_insert_input.Git_remote, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetGit_remote() string { return v.Git_remote }

// GetId returns Builds_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetId() uuid.UUID { return v.Id }

// GetManifests returns Builds_insert_input.Manifests, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetManifests() *Manifests_arr_rel_insert_input { return v.Manifests }

// GetProject returns Builds_insert_input.Project, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetProject() *Projects_obj_rel_insert_input { return v.Project }

// GetProject_id returns Builds_insert_input.Project_id, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetProject_id() uuid.UUID { return v.Project_id }

// GetPull_request_id returns Builds_insert_input.Pull_request_id, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetPull_request_id() string { return v.Pull_request_id }

// GetS3_url returns Builds_insert_input.S3_url, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetS3_url() string { return v.S3_url }

// GetScans returns Builds_insert_input.Scans, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetScans() *Scans_arr_rel_insert_input { return v.Scans }

// GetSource_type returns Builds_insert_input.Source_type, and is useful for accessing the field via an interface.
func (v *Builds_insert_input) GetSource_type() string { return v.Source_type }

// input type for inserting object relation for remote table "builds"
type Builds_obj_rel_insert_input struct {
	Data *Builds_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Builds_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Builds_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Builds_obj_rel_insert_input) GetData() *Builds_insert_input { return v.Data }

// GetOn_conflict returns Builds_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Builds_obj_rel_insert_input) GetOn_conflict() *Builds_on_conflict { return v.On_conflict }

// on_conflict condition type for table "builds"
type Builds_on_conflict struct {
	Constraint     Builds_constraint      `json:"constraint"`
	Update_columns []Builds_update_column `json:"update_columns"`
	Where          *Builds_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Builds_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Builds_on_conflict) GetConstraint() Builds_constraint { return v.Constraint }

// GetUpdate_columns returns Builds_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Builds_on_conflict) GetUpdate_columns() []Builds_update_column { return v.Update_columns }

// GetWhere returns Builds_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Builds_on_conflict) GetWhere() *Builds_bool_exp { return v.Where }

// Boolean expression to compare columns of type "builds_source_type". All fields are combined with logical 'AND'.
type Builds_source_type_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns Builds_source_type_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns Builds_source_type_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns Builds_source_type_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns Builds_source_type_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns Builds_source_type_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Builds_source_type_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns Builds_source_type_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns Builds_source_type_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns Builds_source_type_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Builds_source_type_comparison_exp) GetNin() []string { return v.Nin }

// update columns of table "builds"
type Builds_update_column string

const (
	// column name
	Builds_update_columnAgentAccessToken Builds_update_column = "agent_access_token"
	// column name
	Builds_update_columnBuildNumber Builds_update_column = "build_number"
	// column name
	Builds_update_columnCreatedAt Builds_update_column = "created_at"
	// column name
	Builds_update_columnExistingGithubReviewId Builds_update_column = "existing_github_review_id"
	// column name
	Builds_update_columnGitBranch Builds_update_column = "git_branch"
	// column name
	Builds_update_columnGitHash Builds_update_column = "git_hash"
	// column name
	Builds_update_columnGitRemote Builds_update_column = "git_remote"
	// column name
	Builds_update_columnId Builds_update_column = "id"
	// column name
	Builds_update_columnProjectId Builds_update_column = "project_id"
	// column name
	Builds_update_columnS3Url Builds_update_column = "s3_url"
)

// Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
type Date_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// GetEq returns Date_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetEq() time.Time { return v.Eq }

// GetGt returns Date_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetGt() time.Time { return v.Gt }

// GetGte returns Date_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetGte() time.Time { return v.Gte }

// GetIn returns Date_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetIn() []time.Time { return v.In }

// GetIs_null returns Date_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Date_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetLt() time.Time { return v.Lt }

// GetLte returns Date_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetLte() time.Time { return v.Lte }

// GetNeq returns Date_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetNeq() time.Time { return v.Neq }

// GetNin returns Date_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Date_comparison_exp) GetNin() []time.Time { return v.Nin }

// DeleteBuildDelete_builds_by_pkBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type DeleteBuildDelete_builds_by_pkBuilds struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeleteBuildDelete_builds_by_pkBuilds.Id, and is useful for accessing the field via an interface.
func (v *DeleteBuildDelete_builds_by_pkBuilds) GetId() uuid.UUID { return v.Id }

// DeleteBuildResponse is returned by DeleteBuild on success.
type DeleteBuildResponse struct {
	// delete single row from the table: "builds"
	Delete_builds_by_pk *DeleteBuildDelete_builds_by_pkBuilds `json:"delete_builds_by_pk"`
}

// GetDelete_builds_by_pk returns DeleteBuildResponse.Delete_builds_by_pk, and is useful for accessing the field via an interface.
func (v *DeleteBuildResponse) GetDelete_builds_by_pk() *DeleteBuildDelete_builds_by_pkBuilds {
	return v.Delete_builds_by_pk
}

// input type for inserting array relation for remote table "findings"
type Findings_arr_rel_insert_input struct {
	Data []*Findings_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Findings_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Findings_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Findings_arr_rel_insert_input) GetData() []*Findings_insert_input { return v.Data }

// GetOn_conflict returns Findings_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Findings_arr_rel_insert_input) GetOn_conflict() *Findings_on_conflict { return v.On_conflict }

// Boolean expression to filter rows from the table "findings". All fields are combined with a logical 'AND'.
type Findings_bool_exp struct {
	And                      []*Findings_bool_exp             `json:"_and,omitempty"`
	Not                      *Findings_bool_exp               `json:"_not,omitempty"`
	Or                       []*Findings_bool_exp             `json:"_or,omitempty"`
	Build                    *Builds_bool_exp                 `json:"build,omitempty"`
	Build_id                 *Uuid_comparison_exp             `json:"build_id,omitempty"`
	Created_at               *Timestamp_comparison_exp        `json:"created_at,omitempty"`
	Dedupe_slug              *String_comparison_exp           `json:"dedupe_slug,omitempty"`
	Fix_state                *Fix_state_enum_comparison_exp   `json:"fix_state,omitempty"`
	Fix_versions             *Text_comparison_exp             `json:"fix_versions,omitempty"`
	Id                       *Uuid_comparison_exp             `json:"id,omitempty"`
	Language                 *String_comparison_exp           `json:"language,omitempty"`
	Locations                *Text_comparison_exp             `json:"locations,omitempty"`
	Matcher                  *String_comparison_exp           `json:"matcher,omitempty"`
	Package_name             *String_comparison_exp           `json:"package_name,omitempty"`
	Package_version          *Package_versions_bool_exp       `json:"package_version,omitempty"`
	Package_version_id       *Uuid_comparison_exp             `json:"package_version_id,omitempty"`
	Purl                     *String_comparison_exp           `json:"purl,omitempty"`
	Scan                     *Scans_bool_exp                  `json:"scan,omitempty"`
	Scan_id                  *Uuid_comparison_exp             `json:"scan_id,omitempty"`
	Severity                 *Severity_enum_comparison_exp    `json:"severity,omitempty"`
	Type                     *String_comparison_exp           `json:"type,omitempty"`
	Updated_at               *Timestamptz_comparison_exp      `json:"updated_at,omitempty"`
	Version                  *String_comparison_exp           `json:"version,omitempty"`
	Version_matcher          *String_comparison_exp           `json:"version_matcher,omitempty"`
	Virtual_path             *String_comparison_exp           `json:"virtual_path,omitempty"`
	Vulnerability            *Vulnerabilities_bool_exp        `json:"vulnerability,omitempty"`
	Vulnerability_id         *Uuid_comparison_exp             `json:"vulnerability_id,omitempty"`
	Vulnerability_package    *Vulnerability_packages_bool_exp `json:"vulnerability_package,omitempty"`
	Vulnerability_package_id *Uuid_comparison_exp             `json:"vulnerability_package_id,omitempty"`
}

// GetAnd returns Findings_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetAnd() []*Findings_bool_exp { return v.And }

// GetNot returns Findings_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetNot() *Findings_bool_exp { return v.Not }

// GetOr returns Findings_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetOr() []*Findings_bool_exp { return v.Or }

// GetBuild returns Findings_bool_exp.Build, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetBuild() *Builds_bool_exp { return v.Build }

// GetBuild_id returns Findings_bool_exp.Build_id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetBuild_id() *Uuid_comparison_exp { return v.Build_id }

// GetCreated_at returns Findings_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetDedupe_slug returns Findings_bool_exp.Dedupe_slug, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetDedupe_slug() *String_comparison_exp { return v.Dedupe_slug }

// GetFix_state returns Findings_bool_exp.Fix_state, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetFix_state() *Fix_state_enum_comparison_exp { return v.Fix_state }

// GetFix_versions returns Findings_bool_exp.Fix_versions, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetFix_versions() *Text_comparison_exp { return v.Fix_versions }

// GetId returns Findings_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetLanguage returns Findings_bool_exp.Language, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetLanguage() *String_comparison_exp { return v.Language }

// GetLocations returns Findings_bool_exp.Locations, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetLocations() *Text_comparison_exp { return v.Locations }

// GetMatcher returns Findings_bool_exp.Matcher, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetMatcher() *String_comparison_exp { return v.Matcher }

// GetPackage_name returns Findings_bool_exp.Package_name, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetPackage_name() *String_comparison_exp { return v.Package_name }

// GetPackage_version returns Findings_bool_exp.Package_version, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetPackage_version() *Package_versions_bool_exp { return v.Package_version }

// GetPackage_version_id returns Findings_bool_exp.Package_version_id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetPackage_version_id() *Uuid_comparison_exp { return v.Package_version_id }

// GetPurl returns Findings_bool_exp.Purl, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetPurl() *String_comparison_exp { return v.Purl }

// GetScan returns Findings_bool_exp.Scan, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetScan() *Scans_bool_exp { return v.Scan }

// GetScan_id returns Findings_bool_exp.Scan_id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetScan_id() *Uuid_comparison_exp { return v.Scan_id }

// GetSeverity returns Findings_bool_exp.Severity, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetSeverity() *Severity_enum_comparison_exp { return v.Severity }

// GetType returns Findings_bool_exp.Type, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetType() *String_comparison_exp { return v.Type }

// GetUpdated_at returns Findings_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetUpdated_at() *Timestamptz_comparison_exp { return v.Updated_at }

// GetVersion returns Findings_bool_exp.Version, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVersion() *String_comparison_exp { return v.Version }

// GetVersion_matcher returns Findings_bool_exp.Version_matcher, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVersion_matcher() *String_comparison_exp { return v.Version_matcher }

// GetVirtual_path returns Findings_bool_exp.Virtual_path, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVirtual_path() *String_comparison_exp { return v.Virtual_path }

// GetVulnerability returns Findings_bool_exp.Vulnerability, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVulnerability() *Vulnerabilities_bool_exp { return v.Vulnerability }

// GetVulnerability_id returns Findings_bool_exp.Vulnerability_id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVulnerability_id() *Uuid_comparison_exp { return v.Vulnerability_id }

// GetVulnerability_package returns Findings_bool_exp.Vulnerability_package, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVulnerability_package() *Vulnerability_packages_bool_exp {
	return v.Vulnerability_package
}

// GetVulnerability_package_id returns Findings_bool_exp.Vulnerability_package_id, and is useful for accessing the field via an interface.
func (v *Findings_bool_exp) GetVulnerability_package_id() *Uuid_comparison_exp {
	return v.Vulnerability_package_id
}

// unique or primary key constraints on table "findings"
type Findings_constraint string

const (
	// unique or primary key constraint
	Findings_constraintFindingsDedupeSlugBuildIdKey Findings_constraint = "findings_dedupe_slug_build_id_key"
	// unique or primary key constraint
	Findings_constraintFindingsPkey Findings_constraint = "findings_pkey"
)

// input type for inserting data into table "findings"
type Findings_insert_input struct {
	Build                    *Builds_obj_rel_insert_input                 `json:"build,omitempty"`
	Build_id                 uuid.UUID                                    `json:"build_id"`
	Created_at               time.Time                                    `json:"created_at"`
	Dedupe_slug              string                                       `json:"dedupe_slug"`
	Fix_state                string                                       `json:"fix_state"`
	Fix_versions             string                                       `json:"fix_versions"`
	Id                       uuid.UUID                                    `json:"id"`
	Language                 string                                       `json:"language"`
	Locations                string                                       `json:"locations"`
	Matcher                  string                                       `json:"matcher"`
	Package_name             string                                       `json:"package_name"`
	Package_version          *Package_versions_obj_rel_insert_input       `json:"package_version,omitempty"`
	Package_version_id       uuid.UUID                                    `json:"package_version_id"`
	Purl                     string                                       `json:"purl"`
	Scan                     *Scans_obj_rel_insert_input                  `json:"scan,omitempty"`
	Scan_id                  uuid.UUID                                    `json:"scan_id"`
	Severity                 string                                       `json:"severity"`
	Type                     string                                       `json:"type"`
	Updated_at               time.Time                                    `json:"updated_at"`
	Version                  string                                       `json:"version"`
	Version_matcher          string                                       `json:"version_matcher"`
	Virtual_path             string                                       `json:"virtual_path"`
	Vulnerability            *Vulnerabilities_obj_rel_insert_input        `json:"vulnerability,omitempty"`
	Vulnerability_id         uuid.UUID                                    `json:"vulnerability_id"`
	Vulnerability_package    *Vulnerability_packages_obj_rel_insert_input `json:"vulnerability_package,omitempty"`
	Vulnerability_package_id uuid.UUID                                    `json:"vulnerability_package_id"`
}

// GetBuild returns Findings_insert_input.Build, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetBuild() *Builds_obj_rel_insert_input { return v.Build }

// GetBuild_id returns Findings_insert_input.Build_id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetBuild_id() uuid.UUID { return v.Build_id }

// GetCreated_at returns Findings_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetDedupe_slug returns Findings_insert_input.Dedupe_slug, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetDedupe_slug() string { return v.Dedupe_slug }

// GetFix_state returns Findings_insert_input.Fix_state, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetFix_state() string { return v.Fix_state }

// GetFix_versions returns Findings_insert_input.Fix_versions, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetFix_versions() string { return v.Fix_versions }

// GetId returns Findings_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetId() uuid.UUID { return v.Id }

// GetLanguage returns Findings_insert_input.Language, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetLanguage() string { return v.Language }

// GetLocations returns Findings_insert_input.Locations, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetLocations() string { return v.Locations }

// GetMatcher returns Findings_insert_input.Matcher, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetMatcher() string { return v.Matcher }

// GetPackage_name returns Findings_insert_input.Package_name, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetPackage_name() string { return v.Package_name }

// GetPackage_version returns Findings_insert_input.Package_version, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetPackage_version() *Package_versions_obj_rel_insert_input {
	return v.Package_version
}

// GetPackage_version_id returns Findings_insert_input.Package_version_id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetPackage_version_id() uuid.UUID { return v.Package_version_id }

// GetPurl returns Findings_insert_input.Purl, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetPurl() string { return v.Purl }

// GetScan returns Findings_insert_input.Scan, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetScan() *Scans_obj_rel_insert_input { return v.Scan }

// GetScan_id returns Findings_insert_input.Scan_id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetScan_id() uuid.UUID { return v.Scan_id }

// GetSeverity returns Findings_insert_input.Severity, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetSeverity() string { return v.Severity }

// GetType returns Findings_insert_input.Type, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetType() string { return v.Type }

// GetUpdated_at returns Findings_insert_input.Updated_at, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetUpdated_at() time.Time { return v.Updated_at }

// GetVersion returns Findings_insert_input.Version, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVersion() string { return v.Version }

// GetVersion_matcher returns Findings_insert_input.Version_matcher, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVersion_matcher() string { return v.Version_matcher }

// GetVirtual_path returns Findings_insert_input.Virtual_path, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVirtual_path() string { return v.Virtual_path }

// GetVulnerability returns Findings_insert_input.Vulnerability, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVulnerability() *Vulnerabilities_obj_rel_insert_input {
	return v.Vulnerability
}

// GetVulnerability_id returns Findings_insert_input.Vulnerability_id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVulnerability_id() uuid.UUID { return v.Vulnerability_id }

// GetVulnerability_package returns Findings_insert_input.Vulnerability_package, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVulnerability_package() *Vulnerability_packages_obj_rel_insert_input {
	return v.Vulnerability_package
}

// GetVulnerability_package_id returns Findings_insert_input.Vulnerability_package_id, and is useful for accessing the field via an interface.
func (v *Findings_insert_input) GetVulnerability_package_id() uuid.UUID {
	return v.Vulnerability_package_id
}

// on_conflict condition type for table "findings"
type Findings_on_conflict struct {
	Constraint     Findings_constraint      `json:"constraint"`
	Update_columns []Findings_update_column `json:"update_columns"`
	Where          *Findings_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Findings_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Findings_on_conflict) GetConstraint() Findings_constraint { return v.Constraint }

// GetUpdate_columns returns Findings_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Findings_on_conflict) GetUpdate_columns() []Findings_update_column { return v.Update_columns }

// GetWhere returns Findings_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Findings_on_conflict) GetWhere() *Findings_bool_exp { return v.Where }

// update columns of table "findings"
type Findings_update_column string

const (
	// column name
	Findings_update_columnBuildId Findings_update_column = "build_id"
	// column name
	Findings_update_columnCreatedAt Findings_update_column = "created_at"
	// column name
	Findings_update_columnDedupeSlug Findings_update_column = "dedupe_slug"
	// column name
	Findings_update_columnFixState Findings_update_column = "fix_state"
	// column name
	Findings_update_columnFixVersions Findings_update_column = "fix_versions"
	// column name
	Findings_update_columnId Findings_update_column = "id"
	// column name
	Findings_update_columnLanguage Findings_update_column = "language"
	// column name
	Findings_update_columnLocations Findings_update_column = "locations"
	// column name
	Findings_update_columnMatcher Findings_update_column = "matcher"
	// column name
	Findings_update_columnPackageName Findings_update_column = "package_name"
	// column name
	Findings_update_columnPackageVersionId Findings_update_column = "package_version_id"
	// column name
	Findings_update_columnPurl Findings_update_column = "purl"
	// column name
	Findings_update_columnScanId Findings_update_column = "scan_id"
	// column name
	Findings_update_columnSeverity Findings_update_column = "severity"
	// column name
	Findings_update_columnType Findings_update_column = "type"
	// column name
	Findings_update_columnUpdatedAt Findings_update_column = "updated_at"
	// column name
	Findings_update_columnVersion Findings_update_column = "version"
	// column name
	Findings_update_columnVersionMatcher Findings_update_column = "version_matcher"
	// column name
	Findings_update_columnVirtualPath Findings_update_column = "virtual_path"
	// column name
	Findings_update_columnVulnerabilityId Findings_update_column = "vulnerability_id"
	// column name
	Findings_update_columnVulnerabilityPackageId Findings_update_column = "vulnerability_package_id"
)

// Boolean expression to compare columns of type "fix_state_enum". All fields are combined with logical 'AND'.
type Fix_state_enum_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns Fix_state_enum_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns Fix_state_enum_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns Fix_state_enum_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns Fix_state_enum_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns Fix_state_enum_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Fix_state_enum_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns Fix_state_enum_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns Fix_state_enum_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns Fix_state_enum_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Fix_state_enum_comparison_exp) GetNin() []string { return v.Nin }

// GetProjectInfoQueryProject_access_tokens includes the requested fields of the GraphQL type project_access_tokens.
// The GraphQL type's documentation follows.
//
// columns and relationships of "project_access_tokens"
type GetProjectInfoQueryProject_access_tokens struct {
	// An object relationship
	Project *GetProjectInfoQueryProject_access_tokensProjectProjects `json:"project"`
}

// GetProject returns GetProjectInfoQueryProject_access_tokens.Project, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokens) GetProject() *GetProjectInfoQueryProject_access_tokensProjectProjects {
	return v.Project
}

// GetProjectInfoQueryProject_access_tokensProjectProjects includes the requested fields of the GraphQL type projects.
// The GraphQL type's documentation follows.
//
// columns and relationships of "projects"
type GetProjectInfoQueryProject_access_tokensProjectProjects struct {
	Organization_id uuid.UUID `json:"organization_id"`
	Id              uuid.UUID `json:"id"`
}

// GetOrganization_id returns GetProjectInfoQueryProject_access_tokensProjectProjects.Organization_id, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokensProjectProjects) GetOrganization_id() uuid.UUID {
	return v.Organization_id
}

// GetId returns GetProjectInfoQueryProject_access_tokensProjectProjects.Id, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokensProjectProjects) GetId() uuid.UUID { return v.Id }

// GetProjectInfoQueryResponse is returned by GetProjectInfoQuery on success.
type GetProjectInfoQueryResponse struct {
	// An array relationship
	Project_access_tokens []*GetProjectInfoQueryProject_access_tokens `json:"project_access_tokens"`
}

// GetProject_access_tokens returns GetProjectInfoQueryResponse.Project_access_tokens, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryResponse) GetProject_access_tokens() []*GetProjectInfoQueryProject_access_tokens {
	return v.Project_access_tokens
}

// input type for inserting array relation for remote table "github_repositories"
type Github_repositories_arr_rel_insert_input struct {
	Data []*Github_repositories_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Github_repositories_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Github_repositories_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Github_repositories_arr_rel_insert_input) GetData() []*Github_repositories_insert_input {
	return v.Data
}

// GetOn_conflict returns Github_repositories_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Github_repositories_arr_rel_insert_input) GetOn_conflict() *Github_repositories_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "github_repositories". All fields are combined with a logical 'AND'.
type Github_repositories_bool_exp struct {
	And            []*Github_repositories_bool_exp `json:"_and,omitempty"`
	Not            *Github_repositories_bool_exp   `json:"_not,omitempty"`
	Or             []*Github_repositories_bool_exp `json:"_or,omitempty"`
	Git_url        *String_comparison_exp          `json:"git_url,omitempty"`
	Github_id      *Int_comparison_exp             `json:"github_id,omitempty"`
	Github_node_id *String_comparison_exp          `json:"github_node_id,omitempty"`
	Project        *Projects_bool_exp              `json:"project,omitempty"`
	Project_id     *Uuid_comparison_exp            `json:"project_id,omitempty"`
	Traits         *Jsonb_comparison_exp           `json:"traits,omitempty"`
}

// GetAnd returns Github_repositories_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetAnd() []*Github_repositories_bool_exp { return v.And }

// GetNot returns Github_repositories_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetNot() *Github_repositories_bool_exp { return v.Not }

// GetOr returns Github_repositories_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetOr() []*Github_repositories_bool_exp { return v.Or }

// GetGit_url returns Github_repositories_bool_exp.Git_url, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetGit_url() *String_comparison_exp { return v.Git_url }

// GetGithub_id returns Github_repositories_bool_exp.Github_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetGithub_id() *Int_comparison_exp { return v.Github_id }

// GetGithub_node_id returns Github_repositories_bool_exp.Github_node_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetGithub_node_id() *String_comparison_exp {
	return v.Github_node_id
}

// GetProject returns Github_repositories_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// GetProject_id returns Github_repositories_bool_exp.Project_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetProject_id() *Uuid_comparison_exp { return v.Project_id }

// GetTraits returns Github_repositories_bool_exp.Traits, and is useful for accessing the field via an interface.
func (v *Github_repositories_bool_exp) GetTraits() *Jsonb_comparison_exp { return v.Traits }

// unique or primary key constraints on table "github_repositories"
type Github_repositories_constraint string

const (
	// unique or primary key constraint
	Github_repositories_constraintGithubRepositoriesGithubIdKey Github_repositories_constraint = "github_repositories_github_id_key"
	// unique or primary key constraint
	Github_repositories_constraintGithubRepositoriesGithubNodeIdKey Github_repositories_constraint = "github_repositories_github_node_id_key"
	// unique or primary key constraint
	Github_repositories_constraintGithubRepositoriesPkey Github_repositories_constraint = "github_repositories_pkey"
)

// input type for inserting data into table "github_repositories"
type Github_repositories_insert_input struct {
	Git_url        string                         `json:"git_url"`
	Github_id      int                            `json:"github_id"`
	Github_node_id string                         `json:"github_node_id"`
	Project        *Projects_obj_rel_insert_input `json:"project,omitempty"`
	Project_id     uuid.UUID                      `json:"project_id"`
	Traits         json.RawMessage                `json:"traits"`
}

// GetGit_url returns Github_repositories_insert_input.Git_url, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetGit_url() string { return v.Git_url }

// GetGithub_id returns Github_repositories_insert_input.Github_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetGithub_id() int { return v.Github_id }

// GetGithub_node_id returns Github_repositories_insert_input.Github_node_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetGithub_node_id() string { return v.Github_node_id }

// GetProject returns Github_repositories_insert_input.Project, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetProject() *Projects_obj_rel_insert_input {
	return v.Project
}

// GetProject_id returns Github_repositories_insert_input.Project_id, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetProject_id() uuid.UUID { return v.Project_id }

// GetTraits returns Github_repositories_insert_input.Traits, and is useful for accessing the field via an interface.
func (v *Github_repositories_insert_input) GetTraits() json.RawMessage { return v.Traits }

// input type for inserting object relation for remote table "github_repositories"
type Github_repositories_obj_rel_insert_input struct {
	Data *Github_repositories_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Github_repositories_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Github_repositories_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Github_repositories_obj_rel_insert_input) GetData() *Github_repositories_insert_input {
	return v.Data
}

// GetOn_conflict returns Github_repositories_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Github_repositories_obj_rel_insert_input) GetOn_conflict() *Github_repositories_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "github_repositories"
type Github_repositories_on_conflict struct {
	Constraint     Github_repositories_constraint      `json:"constraint"`
	Update_columns []Github_repositories_update_column `json:"update_columns"`
	Where          *Github_repositories_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Github_repositories_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Github_repositories_on_conflict) GetConstraint() Github_repositories_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Github_repositories_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Github_repositories_on_conflict) GetUpdate_columns() []Github_repositories_update_column {
	return v.Update_columns
}

// GetWhere returns Github_repositories_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Github_repositories_on_conflict) GetWhere() *Github_repositories_bool_exp { return v.Where }

// update columns of table "github_repositories"
type Github_repositories_update_column string

const (
	// column name
	Github_repositories_update_columnGitUrl Github_repositories_update_column = "git_url"
	// column name
	Github_repositories_update_columnGithubId Github_repositories_update_column = "github_id"
	// column name
	Github_repositories_update_columnGithubNodeId Github_repositories_update_column = "github_node_id"
	// column name
	Github_repositories_update_columnProjectId Github_repositories_update_column = "project_id"
	// column name
	Github_repositories_update_columnTraits Github_repositories_update_column = "traits"
)

// input type for inserting array relation for remote table "guide_related_guides"
type Guide_related_guides_arr_rel_insert_input struct {
	Data []*Guide_related_guides_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Guide_related_guides_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Guide_related_guides_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_arr_rel_insert_input) GetData() []*Guide_related_guides_insert_input {
	return v.Data
}

// GetOn_conflict returns Guide_related_guides_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_arr_rel_insert_input) GetOn_conflict() *Guide_related_guides_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "guide_related_guides". All fields are combined with a logical 'AND'.
type Guide_related_guides_bool_exp struct {
	And                []*Guide_related_guides_bool_exp `json:"_and,omitempty"`
	Not                *Guide_related_guides_bool_exp   `json:"_not,omitempty"`
	Or                 []*Guide_related_guides_bool_exp `json:"_or,omitempty"`
	Created_at         *Timestamptz_comparison_exp      `json:"created_at,omitempty"`
	From_guide_id      *Uuid_comparison_exp             `json:"from_guide_id,omitempty"`
	Id                 *Uuid_comparison_exp             `json:"id,omitempty"`
	To_guide_unique_id *String_comparison_exp           `json:"to_guide_unique_id,omitempty"`
	Updated_at         *Timestamptz_comparison_exp      `json:"updated_at,omitempty"`
}

// GetAnd returns Guide_related_guides_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetAnd() []*Guide_related_guides_bool_exp { return v.And }

// GetNot returns Guide_related_guides_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetNot() *Guide_related_guides_bool_exp { return v.Not }

// GetOr returns Guide_related_guides_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetOr() []*Guide_related_guides_bool_exp { return v.Or }

// GetCreated_at returns Guide_related_guides_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetCreated_at() *Timestamptz_comparison_exp {
	return v.Created_at
}

// GetFrom_guide_id returns Guide_related_guides_bool_exp.From_guide_id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetFrom_guide_id() *Uuid_comparison_exp {
	return v.From_guide_id
}

// GetId returns Guide_related_guides_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetTo_guide_unique_id returns Guide_related_guides_bool_exp.To_guide_unique_id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetTo_guide_unique_id() *String_comparison_exp {
	return v.To_guide_unique_id
}

// GetUpdated_at returns Guide_related_guides_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_bool_exp) GetUpdated_at() *Timestamptz_comparison_exp {
	return v.Updated_at
}

// unique or primary key constraints on table "guide_related_guides"
type Guide_related_guides_constraint string

const (
	// unique or primary key constraint
	Guide_related_guides_constraintGuideRelatedGuidesPkey Guide_related_guides_constraint = "guide_related_guides_pkey"
	// unique or primary key constraint
	Guide_related_guides_constraintGuideRelatedGuidesUnique Guide_related_guides_constraint = "guide_related_guides_unique"
)

// input type for inserting data into table "guide_related_guides"
type Guide_related_guides_insert_input struct {
	Created_at         time.Time                    `json:"created_at"`
	From_guide_id      uuid.UUID                    `json:"from_guide_id"`
	Guide              *Guides_obj_rel_insert_input `json:"guide,omitempty"`
	Id                 uuid.UUID                    `json:"id"`
	Parent_guide       *Guides_obj_rel_insert_input `json:"parent_guide,omitempty"`
	To_guide_unique_id string                       `json:"to_guide_unique_id"`
	Updated_at         time.Time                    `json:"updated_at"`
}

// GetCreated_at returns Guide_related_guides_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetFrom_guide_id returns Guide_related_guides_insert_input.From_guide_id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetFrom_guide_id() uuid.UUID { return v.From_guide_id }

// GetGuide returns Guide_related_guides_insert_input.Guide, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetGuide() *Guides_obj_rel_insert_input { return v.Guide }

// GetId returns Guide_related_guides_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetId() uuid.UUID { return v.Id }

// GetParent_guide returns Guide_related_guides_insert_input.Parent_guide, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetParent_guide() *Guides_obj_rel_insert_input {
	return v.Parent_guide
}

// GetTo_guide_unique_id returns Guide_related_guides_insert_input.To_guide_unique_id, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetTo_guide_unique_id() string {
	return v.To_guide_unique_id
}

// GetUpdated_at returns Guide_related_guides_insert_input.Updated_at, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_insert_input) GetUpdated_at() time.Time { return v.Updated_at }

// on_conflict condition type for table "guide_related_guides"
type Guide_related_guides_on_conflict struct {
	Constraint     Guide_related_guides_constraint      `json:"constraint"`
	Update_columns []Guide_related_guides_update_column `json:"update_columns"`
	Where          *Guide_related_guides_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Guide_related_guides_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_on_conflict) GetConstraint() Guide_related_guides_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Guide_related_guides_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_on_conflict) GetUpdate_columns() []Guide_related_guides_update_column {
	return v.Update_columns
}

// GetWhere returns Guide_related_guides_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Guide_related_guides_on_conflict) GetWhere() *Guide_related_guides_bool_exp { return v.Where }

// update columns of table "guide_related_guides"
type Guide_related_guides_update_column string

const (
	// column name
	Guide_related_guides_update_columnCreatedAt Guide_related_guides_update_column = "created_at"
	// column name
	Guide_related_guides_update_columnFromGuideId Guide_related_guides_update_column = "from_guide_id"
	// column name
	Guide_related_guides_update_columnId Guide_related_guides_update_column = "id"
	// column name
	Guide_related_guides_update_columnToGuideUniqueId Guide_related_guides_update_column = "to_guide_unique_id"
	// column name
	Guide_related_guides_update_columnUpdatedAt Guide_related_guides_update_column = "updated_at"
)

// input type for inserting array relation for remote table "guide_vulnerabilities"
type Guide_vulnerabilities_arr_rel_insert_input struct {
	Data []*Guide_vulnerabilities_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Guide_vulnerabilities_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Guide_vulnerabilities_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_arr_rel_insert_input) GetData() []*Guide_vulnerabilities_insert_input {
	return v.Data
}

// GetOn_conflict returns Guide_vulnerabilities_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_arr_rel_insert_input) GetOn_conflict() *Guide_vulnerabilities_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "guide_vulnerabilities". All fields are combined with a logical 'AND'.
type Guide_vulnerabilities_bool_exp struct {
	And              []*Guide_vulnerabilities_bool_exp `json:"_and,omitempty"`
	Not              *Guide_vulnerabilities_bool_exp   `json:"_not,omitempty"`
	Or               []*Guide_vulnerabilities_bool_exp `json:"_or,omitempty"`
	Created_at       *Timestamptz_comparison_exp       `json:"created_at,omitempty"`
	Guide_id         *Uuid_comparison_exp              `json:"guide_id,omitempty"`
	Id               *Uuid_comparison_exp              `json:"id,omitempty"`
	Updated_at       *Timestamptz_comparison_exp       `json:"updated_at,omitempty"`
	Vulnerability    *Vulnerabilities_bool_exp         `json:"vulnerability,omitempty"`
	Vulnerability_id *Uuid_comparison_exp              `json:"vulnerability_id,omitempty"`
}

// GetAnd returns Guide_vulnerabilities_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetAnd() []*Guide_vulnerabilities_bool_exp { return v.And }

// GetNot returns Guide_vulnerabilities_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetNot() *Guide_vulnerabilities_bool_exp { return v.Not }

// GetOr returns Guide_vulnerabilities_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetOr() []*Guide_vulnerabilities_bool_exp { return v.Or }

// GetCreated_at returns Guide_vulnerabilities_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetCreated_at() *Timestamptz_comparison_exp {
	return v.Created_at
}

// GetGuide_id returns Guide_vulnerabilities_bool_exp.Guide_id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetGuide_id() *Uuid_comparison_exp { return v.Guide_id }

// GetId returns Guide_vulnerabilities_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetUpdated_at returns Guide_vulnerabilities_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetUpdated_at() *Timestamptz_comparison_exp {
	return v.Updated_at
}

// GetVulnerability returns Guide_vulnerabilities_bool_exp.Vulnerability, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetVulnerability() *Vulnerabilities_bool_exp {
	return v.Vulnerability
}

// GetVulnerability_id returns Guide_vulnerabilities_bool_exp.Vulnerability_id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_bool_exp) GetVulnerability_id() *Uuid_comparison_exp {
	return v.Vulnerability_id
}

// unique or primary key constraints on table "guide_vulnerabilities"
type Guide_vulnerabilities_constraint string

const (
	// unique or primary key constraint
	Guide_vulnerabilities_constraintGuideVulnerabilitiesPkey Guide_vulnerabilities_constraint = "guide_vulnerabilities_pkey"
	// unique or primary key constraint
	Guide_vulnerabilities_constraintGuideVulnerabilitiesUnique Guide_vulnerabilities_constraint = "guide_vulnerabilities_unique"
)

// input type for inserting data into table "guide_vulnerabilities"
type Guide_vulnerabilities_insert_input struct {
	Created_at       time.Time                             `json:"created_at"`
	Guide            *Guides_obj_rel_insert_input          `json:"guide,omitempty"`
	Guide_id         uuid.UUID                             `json:"guide_id"`
	Id               uuid.UUID                             `json:"id"`
	Updated_at       time.Time                             `json:"updated_at"`
	Vulnerability    *Vulnerabilities_obj_rel_insert_input `json:"vulnerability,omitempty"`
	Vulnerability_id uuid.UUID                             `json:"vulnerability_id"`
}

// GetCreated_at returns Guide_vulnerabilities_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetGuide returns Guide_vulnerabilities_insert_input.Guide, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetGuide() *Guides_obj_rel_insert_input { return v.Guide }

// GetGuide_id returns Guide_vulnerabilities_insert_input.Guide_id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetGuide_id() uuid.UUID { return v.Guide_id }

// GetId returns Guide_vulnerabilities_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetId() uuid.UUID { return v.Id }

// GetUpdated_at returns Guide_vulnerabilities_insert_input.Updated_at, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetUpdated_at() time.Time { return v.Updated_at }

// GetVulnerability returns Guide_vulnerabilities_insert_input.Vulnerability, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetVulnerability() *Vulnerabilities_obj_rel_insert_input {
	return v.Vulnerability
}

// GetVulnerability_id returns Guide_vulnerabilities_insert_input.Vulnerability_id, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_insert_input) GetVulnerability_id() uuid.UUID {
	return v.Vulnerability_id
}

// on_conflict condition type for table "guide_vulnerabilities"
type Guide_vulnerabilities_on_conflict struct {
	Constraint     Guide_vulnerabilities_constraint      `json:"constraint"`
	Update_columns []Guide_vulnerabilities_update_column `json:"update_columns"`
	Where          *Guide_vulnerabilities_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Guide_vulnerabilities_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_on_conflict) GetConstraint() Guide_vulnerabilities_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Guide_vulnerabilities_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_on_conflict) GetUpdate_columns() []Guide_vulnerabilities_update_column {
	return v.Update_columns
}

// GetWhere returns Guide_vulnerabilities_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Guide_vulnerabilities_on_conflict) GetWhere() *Guide_vulnerabilities_bool_exp {
	return v.Where
}

// update columns of table "guide_vulnerabilities"
type Guide_vulnerabilities_update_column string

const (
	// column name
	Guide_vulnerabilities_update_columnCreatedAt Guide_vulnerabilities_update_column = "created_at"
	// column name
	Guide_vulnerabilities_update_columnGuideId Guide_vulnerabilities_update_column = "guide_id"
	// column name
	Guide_vulnerabilities_update_columnId Guide_vulnerabilities_update_column = "id"
	// column name
	Guide_vulnerabilities_update_columnUpdatedAt Guide_vulnerabilities_update_column = "updated_at"
	// column name
	Guide_vulnerabilities_update_columnVulnerabilityId Guide_vulnerabilities_update_column = "vulnerability_id"
)

// Boolean expression to filter rows from the table "guides". All fields are combined with a logical 'AND'.
type Guides_bool_exp struct {
	And []*Guides_bool_exp `json:"_and,omitempty"`
	Not *Guides_bool_exp   `json:"_not,omitempty"`
	Or  []*Guides_bool_exp `json:"_or,omitempty"`
}

// GetAnd returns Guides_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Guides_bool_exp) GetAnd() []*Guides_bool_exp { return v.And }

// GetNot returns Guides_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Guides_bool_exp) GetNot() *Guides_bool_exp { return v.Not }

// GetOr returns Guides_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Guides_bool_exp) GetOr() []*Guides_bool_exp { return v.Or }

// unique or primary key constraints on table "guides"
type Guides_constraint string

const (
	// unique or primary key constraint
	Guides_constraintGuidesDataSourceLinkKey Guides_constraint = "guides_data_source_link_key"
	// unique or primary key constraint
	Guides_constraintGuidesGuideUniqueIdKey Guides_constraint = "guides_guide_unique_id_key"
	// unique or primary key constraint
	Guides_constraintGuidesPkey Guides_constraint = "guides_pkey"
)

// input type for inserting data into table "guides"
type Guides_insert_input struct {
	Body                    string                                      `json:"body"`
	Created_at              time.Time                                   `json:"created_at"`
	Data_source_link        string                                      `json:"data_source_link"`
	Guide_unique_id         string                                      `json:"guide_unique_id"`
	Guide_vulnerabilities   *Guide_vulnerabilities_arr_rel_insert_input `json:"guide_vulnerabilities,omitempty"`
	Id                      uuid.UUID                                   `json:"id"`
	Metadata                json.RawMessage                             `json:"metadata"`
	Metadata_schema_version int                                         `json:"metadata_schema_version"`
	Related_guides          *Guide_related_guides_arr_rel_insert_input  `json:"related_guides,omitempty"`
	Severity                string                                      `json:"severity"`
	Summary                 string                                      `json:"summary"`
	Tags                    string                                      `json:"tags"`
	Title                   string                                      `json:"title"`
	Updated_at              time.Time                                   `json:"updated_at"`
}

// GetBody returns Guides_insert_input.Body, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetBody() string { return v.Body }

// GetCreated_at returns Guides_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetData_source_link returns Guides_insert_input.Data_source_link, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetData_source_link() string { return v.Data_source_link }

// GetGuide_unique_id returns Guides_insert_input.Guide_unique_id, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetGuide_unique_id() string { return v.Guide_unique_id }

// GetGuide_vulnerabilities returns Guides_insert_input.Guide_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetGuide_vulnerabilities() *Guide_vulnerabilities_arr_rel_insert_input {
	return v.Guide_vulnerabilities
}

// GetId returns Guides_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetId() uuid.UUID { return v.Id }

// GetMetadata returns Guides_insert_input.Metadata, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetMetadata() json.RawMessage { return v.Metadata }

// GetMetadata_schema_version returns Guides_insert_input.Metadata_schema_version, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetMetadata_schema_version() int { return v.Metadata_schema_version }

// GetRelated_guides returns Guides_insert_input.Related_guides, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetRelated_guides() *Guide_related_guides_arr_rel_insert_input {
	return v.Related_guides
}

// GetSeverity returns Guides_insert_input.Severity, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetSeverity() string { return v.Severity }

// GetSummary returns Guides_insert_input.Summary, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetSummary() string { return v.Summary }

// GetTags returns Guides_insert_input.Tags, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetTags() string { return v.Tags }

// GetTitle returns Guides_insert_input.Title, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetTitle() string { return v.Title }

// GetUpdated_at returns Guides_insert_input.Updated_at, and is useful for accessing the field via an interface.
func (v *Guides_insert_input) GetUpdated_at() time.Time { return v.Updated_at }

// input type for inserting object relation for remote table "guides"
type Guides_obj_rel_insert_input struct {
	Data *Guides_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Guides_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Guides_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Guides_obj_rel_insert_input) GetData() *Guides_insert_input { return v.Data }

// GetOn_conflict returns Guides_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Guides_obj_rel_insert_input) GetOn_conflict() *Guides_on_conflict { return v.On_conflict }

// on_conflict condition type for table "guides"
type Guides_on_conflict struct {
	Constraint     Guides_constraint      `json:"constraint"`
	Update_columns []Guides_update_column `json:"update_columns"`
	Where          *Guides_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Guides_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Guides_on_conflict) GetConstraint() Guides_constraint { return v.Constraint }

// GetUpdate_columns returns Guides_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Guides_on_conflict) GetUpdate_columns() []Guides_update_column { return v.Update_columns }

// GetWhere returns Guides_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Guides_on_conflict) GetWhere() *Guides_bool_exp { return v.Where }

// update columns of table "guides"
type Guides_update_column string

const (
	// column name
	Guides_update_columnBody Guides_update_column = "body"
	// column name
	Guides_update_columnCreatedAt Guides_update_column = "created_at"
	// column name
	Guides_update_columnDataSourceLink Guides_update_column = "data_source_link"
	// column name
	Guides_update_columnGuideUniqueId Guides_update_column = "guide_unique_id"
	// column name
	Guides_update_columnId Guides_update_column = "id"
	// column name
	Guides_update_columnMetadata Guides_update_column = "metadata"
	// column name
	Guides_update_columnMetadataSchemaVersion Guides_update_column = "metadata_schema_version"
	// column name
	Guides_update_columnSeverity Guides_update_column = "severity"
	// column name
	Guides_update_columnSummary Guides_update_column = "summary"
	// column name
	Guides_update_columnTags Guides_update_column = "tags"
	// column name
	Guides_update_columnTitle Guides_update_column = "title"
	// column name
	Guides_update_columnUpdatedAt Guides_update_column = "updated_at"
)

// Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
type Identities_bool_exp struct {
	And                           []*Identities_bool_exp                  `json:"_and,omitempty"`
	Not                           *Identities_bool_exp                    `json:"_not,omitempty"`
	Or                            []*Identities_bool_exp                  `json:"_or,omitempty"`
	Created_at                    *Timestamp_comparison_exp               `json:"created_at,omitempty"`
	Id                            *Uuid_comparison_exp                    `json:"id,omitempty"`
	Identity_verifiable_addresses *Identity_verifiable_addresses_bool_exp `json:"identity_verifiable_addresses,omitempty"`
	Nid                           *Uuid_comparison_exp                    `json:"nid,omitempty"`
	Schema_id                     *String_comparison_exp                  `json:"schema_id,omitempty"`
	State                         *String_comparison_exp                  `json:"state,omitempty"`
	State_changed_at              *Timestamp_comparison_exp               `json:"state_changed_at,omitempty"`
	Traits                        *Jsonb_comparison_exp                   `json:"traits,omitempty"`
	Updated_at                    *Timestamp_comparison_exp               `json:"updated_at,omitempty"`
	User                          *Users_bool_exp                         `json:"user,omitempty"`
}

// GetAnd returns Identities_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetAnd() []*Identities_bool_exp { return v.And }

// GetNot returns Identities_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetNot() *Identities_bool_exp { return v.Not }

// GetOr returns Identities_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetOr() []*Identities_bool_exp { return v.Or }

// GetCreated_at returns Identities_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetId returns Identities_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetIdentity_verifiable_addresses returns Identities_bool_exp.Identity_verifiable_addresses, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetIdentity_verifiable_addresses() *Identity_verifiable_addresses_bool_exp {
	return v.Identity_verifiable_addresses
}

// GetNid returns Identities_bool_exp.Nid, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetNid() *Uuid_comparison_exp { return v.Nid }

// GetSchema_id returns Identities_bool_exp.Schema_id, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetSchema_id() *String_comparison_exp { return v.Schema_id }

// GetState returns Identities_bool_exp.State, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetState() *String_comparison_exp { return v.State }

// GetState_changed_at returns Identities_bool_exp.State_changed_at, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetState_changed_at() *Timestamp_comparison_exp {
	return v.State_changed_at
}

// GetTraits returns Identities_bool_exp.Traits, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetTraits() *Jsonb_comparison_exp { return v.Traits }

// GetUpdated_at returns Identities_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetUpdated_at() *Timestamp_comparison_exp { return v.Updated_at }

// GetUser returns Identities_bool_exp.User, and is useful for accessing the field via an interface.
func (v *Identities_bool_exp) GetUser() *Users_bool_exp { return v.User }

// Boolean expression to filter rows from the table "identity_verifiable_addresses". All fields are combined with a logical 'AND'.
type Identity_verifiable_addresses_bool_exp struct {
	And         []*Identity_verifiable_addresses_bool_exp `json:"_and,omitempty"`
	Not         *Identity_verifiable_addresses_bool_exp   `json:"_not,omitempty"`
	Or          []*Identity_verifiable_addresses_bool_exp `json:"_or,omitempty"`
	Created_at  *Timestamp_comparison_exp                 `json:"created_at,omitempty"`
	Id          *Uuid_comparison_exp                      `json:"id,omitempty"`
	Identity    *Identities_bool_exp                      `json:"identity,omitempty"`
	Identity_id *Uuid_comparison_exp                      `json:"identity_id,omitempty"`
	Nid         *Uuid_comparison_exp                      `json:"nid,omitempty"`
	Status      *String_comparison_exp                    `json:"status,omitempty"`
	Updated_at  *Timestamp_comparison_exp                 `json:"updated_at,omitempty"`
	Value       *String_comparison_exp                    `json:"value,omitempty"`
	Verified    *Boolean_comparison_exp                   `json:"verified,omitempty"`
	Verified_at *Timestamp_comparison_exp                 `json:"verified_at,omitempty"`
	Via         *String_comparison_exp                    `json:"via,omitempty"`
}

// GetAnd returns Identity_verifiable_addresses_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetAnd() []*Identity_verifiable_addresses_bool_exp {
	return v.And
}

// GetNot returns Identity_verifiable_addresses_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetNot() *Identity_verifiable_addresses_bool_exp {
	return v.Not
}

// GetOr returns Identity_verifiable_addresses_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetOr() []*Identity_verifiable_addresses_bool_exp {
	return v.Or
}

// GetCreated_at returns Identity_verifiable_addresses_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetCreated_at() *Timestamp_comparison_exp {
	return v.Created_at
}

// GetId returns Identity_verifiable_addresses_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetIdentity returns Identity_verifiable_addresses_bool_exp.Identity, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetIdentity() *Identities_bool_exp {
	return v.Identity
}

// GetIdentity_id returns Identity_verifiable_addresses_bool_exp.Identity_id, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetIdentity_id() *Uuid_comparison_exp {
	return v.Identity_id
}

// GetNid returns Identity_verifiable_addresses_bool_exp.Nid, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetNid() *Uuid_comparison_exp { return v.Nid }

// GetStatus returns Identity_verifiable_addresses_bool_exp.Status, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetStatus() *String_comparison_exp { return v.Status }

// GetUpdated_at returns Identity_verifiable_addresses_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetUpdated_at() *Timestamp_comparison_exp {
	return v.Updated_at
}

// GetValue returns Identity_verifiable_addresses_bool_exp.Value, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetValue() *String_comparison_exp { return v.Value }

// GetVerified returns Identity_verifiable_addresses_bool_exp.Verified, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetVerified() *Boolean_comparison_exp {
	return v.Verified
}

// GetVerified_at returns Identity_verifiable_addresses_bool_exp.Verified_at, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetVerified_at() *Timestamp_comparison_exp {
	return v.Verified_at
}

// GetVia returns Identity_verifiable_addresses_bool_exp.Via, and is useful for accessing the field via an interface.
func (v *Identity_verifiable_addresses_bool_exp) GetVia() *String_comparison_exp { return v.Via }

// Boolean expression to filter rows from the table "ignored_vulnerabilities". All fields are combined with a logical 'AND'.
type Ignored_vulnerabilities_bool_exp struct {
	And              []*Ignored_vulnerabilities_bool_exp `json:"_and,omitempty"`
	Not              *Ignored_vulnerabilities_bool_exp   `json:"_not,omitempty"`
	Or               []*Ignored_vulnerabilities_bool_exp `json:"_or,omitempty"`
	Creator          *Identities_bool_exp                `json:"creator,omitempty"`
	Creator_id       *Uuid_comparison_exp                `json:"creator_id,omitempty"`
	Id               *Uuid_comparison_exp                `json:"id,omitempty"`
	Locations        *Jsonb_comparison_exp               `json:"locations,omitempty"`
	Note             *String_comparison_exp              `json:"note,omitempty"`
	Project          *Projects_bool_exp                  `json:"project,omitempty"`
	Project_id       *Uuid_comparison_exp                `json:"project_id,omitempty"`
	Vulnerability    *Vulnerabilities_bool_exp           `json:"vulnerability,omitempty"`
	Vulnerability_id *Uuid_comparison_exp                `json:"vulnerability_id,omitempty"`
}

// GetAnd returns Ignored_vulnerabilities_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetAnd() []*Ignored_vulnerabilities_bool_exp { return v.And }

// GetNot returns Ignored_vulnerabilities_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetNot() *Ignored_vulnerabilities_bool_exp { return v.Not }

// GetOr returns Ignored_vulnerabilities_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetOr() []*Ignored_vulnerabilities_bool_exp { return v.Or }

// GetCreator returns Ignored_vulnerabilities_bool_exp.Creator, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetCreator() *Identities_bool_exp { return v.Creator }

// GetCreator_id returns Ignored_vulnerabilities_bool_exp.Creator_id, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetCreator_id() *Uuid_comparison_exp { return v.Creator_id }

// GetId returns Ignored_vulnerabilities_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetLocations returns Ignored_vulnerabilities_bool_exp.Locations, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetLocations() *Jsonb_comparison_exp { return v.Locations }

// GetNote returns Ignored_vulnerabilities_bool_exp.Note, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetNote() *String_comparison_exp { return v.Note }

// GetProject returns Ignored_vulnerabilities_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// GetProject_id returns Ignored_vulnerabilities_bool_exp.Project_id, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetProject_id() *Uuid_comparison_exp { return v.Project_id }

// GetVulnerability returns Ignored_vulnerabilities_bool_exp.Vulnerability, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetVulnerability() *Vulnerabilities_bool_exp {
	return v.Vulnerability
}

// GetVulnerability_id returns Ignored_vulnerabilities_bool_exp.Vulnerability_id, and is useful for accessing the field via an interface.
func (v *Ignored_vulnerabilities_bool_exp) GetVulnerability_id() *Uuid_comparison_exp {
	return v.Vulnerability_id
}

// InsertNewBuildQueryInsert_builds_oneBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type InsertNewBuildQueryInsert_builds_oneBuilds struct {
	Id                 uuid.UUID `json:"id"`
	Agent_access_token uuid.UUID `json:"agent_access_token"`
}

// GetId returns InsertNewBuildQueryInsert_builds_oneBuilds.Id, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryInsert_builds_oneBuilds) GetId() uuid.UUID { return v.Id }

// GetAgent_access_token returns InsertNewBuildQueryInsert_builds_oneBuilds.Agent_access_token, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryInsert_builds_oneBuilds) GetAgent_access_token() uuid.UUID {
	return v.Agent_access_token
}

// InsertNewBuildQueryResponse is returned by InsertNewBuildQuery on success.
type InsertNewBuildQueryResponse struct {
	// insert a single row into the table: "builds"
	Insert_builds_one *InsertNewBuildQueryInsert_builds_oneBuilds `json:"insert_builds_one"`
}

// GetInsert_builds_one returns InsertNewBuildQueryResponse.Insert_builds_one, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryResponse) GetInsert_builds_one() *InsertNewBuildQueryInsert_builds_oneBuilds {
	return v.Insert_builds_one
}

// Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
type Int_comparison_exp struct {
	Eq      int   `json:"_eq"`
	Gt      int   `json:"_gt"`
	Gte     int   `json:"_gte"`
	In      []int `json:"_in"`
	Is_null bool  `json:"_is_null"`
	Lt      int   `json:"_lt"`
	Lte     int   `json:"_lte"`
	Neq     int   `json:"_neq"`
	Nin     []int `json:"_nin"`
}

// GetEq returns Int_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetEq() int { return v.Eq }

// GetGt returns Int_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetGt() int { return v.Gt }

// GetGte returns Int_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetGte() int { return v.Gte }

// GetIn returns Int_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetIn() []int { return v.In }

// GetIs_null returns Int_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Int_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetLt() int { return v.Lt }

// GetLte returns Int_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetLte() int { return v.Lte }

// GetNeq returns Int_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetNeq() int { return v.Neq }

// GetNin returns Int_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Int_comparison_exp) GetNin() []int { return v.Nin }

type Jsonb_cast_exp struct {
	String *String_comparison_exp `json:"String,omitempty"`
}

// GetString returns Jsonb_cast_exp.String, and is useful for accessing the field via an interface.
func (v *Jsonb_cast_exp) GetString() *String_comparison_exp { return v.String }

// Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
type Jsonb_comparison_exp struct {
	Cast *Jsonb_cast_exp `json:"_cast,omitempty"`
	// is the column contained in the given json value
	Contained_in json.RawMessage `json:"_contained_in"`
	// does the column contain the given json value at the top level
	Contains json.RawMessage `json:"_contains"`
	Eq       json.RawMessage `json:"_eq"`
	Gt       json.RawMessage `json:"_gt"`
	Gte      json.RawMessage `json:"_gte"`
	// does the string exist as a top-level key in the column
	Has_key string `json:"_has_key"`
	// do all of these strings exist as top-level keys in the column
	Has_keys_all []string `json:"_has_keys_all"`
	// do any of these strings exist as top-level keys in the column
	Has_keys_any []string          `json:"_has_keys_any"`
	In           []json.RawMessage `json:"_in"`
	Is_null      bool              `json:"_is_null"`
	Lt           json.RawMessage   `json:"_lt"`
	Lte          json.RawMessage   `json:"_lte"`
	Neq          json.RawMessage   `json:"_neq"`
	Nin          []json.RawMessage `json:"_nin"`
}

// GetCast returns Jsonb_comparison_exp.Cast, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetCast() *Jsonb_cast_exp { return v.Cast }

// GetContained_in returns Jsonb_comparison_exp.Contained_in, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetContained_in() json.RawMessage { return v.Contained_in }

// GetContains returns Jsonb_comparison_exp.Contains, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetContains() json.RawMessage { return v.Contains }

// GetEq returns Jsonb_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetEq() json.RawMessage { return v.Eq }

// GetGt returns Jsonb_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetGt() json.RawMessage { return v.Gt }

// GetGte returns Jsonb_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetGte() json.RawMessage { return v.Gte }

// GetHas_key returns Jsonb_comparison_exp.Has_key, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_key() string { return v.Has_key }

// GetHas_keys_all returns Jsonb_comparison_exp.Has_keys_all, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_keys_all() []string { return v.Has_keys_all }

// GetHas_keys_any returns Jsonb_comparison_exp.Has_keys_any, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_keys_any() []string { return v.Has_keys_any }

// GetIn returns Jsonb_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetIn() []json.RawMessage { return v.In }

// GetIs_null returns Jsonb_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Jsonb_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetLt() json.RawMessage { return v.Lt }

// GetLte returns Jsonb_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetLte() json.RawMessage { return v.Lte }

// GetNeq returns Jsonb_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetNeq() json.RawMessage { return v.Neq }

// GetNin returns Jsonb_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetNin() []json.RawMessage { return v.Nin }

// input type for inserting array relation for remote table "manifests"
type Manifests_arr_rel_insert_input struct {
	Data []*Manifests_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Manifests_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Manifests_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Manifests_arr_rel_insert_input) GetData() []*Manifests_insert_input { return v.Data }

// GetOn_conflict returns Manifests_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Manifests_arr_rel_insert_input) GetOn_conflict() *Manifests_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "manifests". All fields are combined with a logical 'AND'.
type Manifests_bool_exp struct {
	And        []*Manifests_bool_exp     `json:"_and,omitempty"`
	Not        *Manifests_bool_exp       `json:"_not,omitempty"`
	Or         []*Manifests_bool_exp     `json:"_or,omitempty"`
	Build      *Builds_bool_exp          `json:"build,omitempty"`
	Build_id   *Uuid_comparison_exp      `json:"build_id,omitempty"`
	Created_at *Timestamp_comparison_exp `json:"created_at,omitempty"`
	Filename   *String_comparison_exp    `json:"filename,omitempty"`
	Id         *Uuid_comparison_exp      `json:"id,omitempty"`
	Message    *String_comparison_exp    `json:"message,omitempty"`
	Project    *Projects_bool_exp        `json:"project,omitempty"`
	Project_id *Uuid_comparison_exp      `json:"project_id,omitempty"`
	S3_key     *String_comparison_exp    `json:"s3_key,omitempty"`
	S3_url     *String_comparison_exp    `json:"s3_url,omitempty"`
	Status     *String_comparison_exp    `json:"status,omitempty"`
}

// GetAnd returns Manifests_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetAnd() []*Manifests_bool_exp { return v.And }

// GetNot returns Manifests_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetNot() *Manifests_bool_exp { return v.Not }

// GetOr returns Manifests_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetOr() []*Manifests_bool_exp { return v.Or }

// GetBuild returns Manifests_bool_exp.Build, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetBuild() *Builds_bool_exp { return v.Build }

// GetBuild_id returns Manifests_bool_exp.Build_id, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetBuild_id() *Uuid_comparison_exp { return v.Build_id }

// GetCreated_at returns Manifests_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetFilename returns Manifests_bool_exp.Filename, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetFilename() *String_comparison_exp { return v.Filename }

// GetId returns Manifests_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetMessage returns Manifests_bool_exp.Message, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetMessage() *String_comparison_exp { return v.Message }

// GetProject returns Manifests_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// GetProject_id returns Manifests_bool_exp.Project_id, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetProject_id() *Uuid_comparison_exp { return v.Project_id }

// GetS3_key returns Manifests_bool_exp.S3_key, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetS3_key() *String_comparison_exp { return v.S3_key }

// GetS3_url returns Manifests_bool_exp.S3_url, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetS3_url() *String_comparison_exp { return v.S3_url }

// GetStatus returns Manifests_bool_exp.Status, and is useful for accessing the field via an interface.
func (v *Manifests_bool_exp) GetStatus() *String_comparison_exp { return v.Status }

// unique or primary key constraints on table "manifests"
type Manifests_constraint string

const (
	// unique or primary key constraint
	Manifests_constraintManifestsPkey Manifests_constraint = "manifests_pkey"
	// unique or primary key constraint
	Manifests_constraintManifestsS3UrlKey Manifests_constraint = "manifests_s3_url_key"
)

// input type for inserting data into table "manifests"
type Manifests_insert_input struct {
	Build      *Builds_obj_rel_insert_input   `json:"build,omitempty"`
	Build_id   uuid.UUID                      `json:"build_id"`
	Created_at time.Time                      `json:"created_at"`
	Filename   string                         `json:"filename"`
	Id         uuid.UUID                      `json:"id"`
	Message    string                         `json:"message"`
	Project    *Projects_obj_rel_insert_input `json:"project,omitempty"`
	Project_id uuid.UUID                      `json:"project_id"`
	S3_key     string                         `json:"s3_key"`
	S3_url     string                         `json:"s3_url"`
	Status     string                         `json:"status"`
}

// GetBuild returns Manifests_insert_input.Build, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetBuild() *Builds_obj_rel_insert_input { return v.Build }

// GetBuild_id returns Manifests_insert_input.Build_id, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetBuild_id() uuid.UUID { return v.Build_id }

// GetCreated_at returns Manifests_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetFilename returns Manifests_insert_input.Filename, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetFilename() string { return v.Filename }

// GetId returns Manifests_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetId() uuid.UUID { return v.Id }

// GetMessage returns Manifests_insert_input.Message, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetMessage() string { return v.Message }

// GetProject returns Manifests_insert_input.Project, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetProject() *Projects_obj_rel_insert_input { return v.Project }

// GetProject_id returns Manifests_insert_input.Project_id, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetProject_id() uuid.UUID { return v.Project_id }

// GetS3_key returns Manifests_insert_input.S3_key, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetS3_key() string { return v.S3_key }

// GetS3_url returns Manifests_insert_input.S3_url, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetS3_url() string { return v.S3_url }

// GetStatus returns Manifests_insert_input.Status, and is useful for accessing the field via an interface.
func (v *Manifests_insert_input) GetStatus() string { return v.Status }

// on_conflict condition type for table "manifests"
type Manifests_on_conflict struct {
	Constraint     Manifests_constraint      `json:"constraint"`
	Update_columns []Manifests_update_column `json:"update_columns"`
	Where          *Manifests_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Manifests_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Manifests_on_conflict) GetConstraint() Manifests_constraint { return v.Constraint }

// GetUpdate_columns returns Manifests_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Manifests_on_conflict) GetUpdate_columns() []Manifests_update_column {
	return v.Update_columns
}

// GetWhere returns Manifests_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Manifests_on_conflict) GetWhere() *Manifests_bool_exp { return v.Where }

// update columns of table "manifests"
type Manifests_update_column string

const (
	// column name
	Manifests_update_columnBuildId Manifests_update_column = "build_id"
	// column name
	Manifests_update_columnCreatedAt Manifests_update_column = "created_at"
	// column name
	Manifests_update_columnFilename Manifests_update_column = "filename"
	// column name
	Manifests_update_columnId Manifests_update_column = "id"
	// column name
	Manifests_update_columnMessage Manifests_update_column = "message"
	// column name
	Manifests_update_columnProjectId Manifests_update_column = "project_id"
	// column name
	Manifests_update_columnS3Key Manifests_update_column = "s3_key"
	// column name
	Manifests_update_columnS3Url Manifests_update_column = "s3_url"
	// column name
	Manifests_update_columnStatus Manifests_update_column = "status"
)

// MyMutationInsert_builds_oneBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type MyMutationInsert_builds_oneBuilds struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns MyMutationInsert_builds_oneBuilds.Id, and is useful for accessing the field via an interface.
func (v *MyMutationInsert_builds_oneBuilds) GetId() uuid.UUID { return v.Id }

// MyMutationResponse is returned by MyMutation on success.
type MyMutationResponse struct {
	// insert a single row into the table: "builds"
	Insert_builds_one *MyMutationInsert_builds_oneBuilds `json:"insert_builds_one"`
}

// GetInsert_builds_one returns MyMutationResponse.Insert_builds_one, and is useful for accessing the field via an interface.
func (v *MyMutationResponse) GetInsert_builds_one() *MyMutationInsert_builds_oneBuilds {
	return v.Insert_builds_one
}

// Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
type Numeric_comparison_exp struct {
	Eq      float64   `json:"_eq"`
	Gt      float64   `json:"_gt"`
	Gte     float64   `json:"_gte"`
	In      []float64 `json:"_in"`
	Is_null bool      `json:"_is_null"`
	Lt      float64   `json:"_lt"`
	Lte     float64   `json:"_lte"`
	Neq     float64   `json:"_neq"`
	Nin     []float64 `json:"_nin"`
}

// GetEq returns Numeric_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetEq() float64 { return v.Eq }

// GetGt returns Numeric_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetGt() float64 { return v.Gt }

// GetGte returns Numeric_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetGte() float64 { return v.Gte }

// GetIn returns Numeric_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetIn() []float64 { return v.In }

// GetIs_null returns Numeric_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Numeric_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetLt() float64 { return v.Lt }

// GetLte returns Numeric_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetLte() float64 { return v.Lte }

// GetNeq returns Numeric_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetNeq() float64 { return v.Neq }

// GetNin returns Numeric_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Numeric_comparison_exp) GetNin() []float64 { return v.Nin }

// input type for inserting array relation for remote table "organization_user"
type Organization_user_arr_rel_insert_input struct {
	Data []*Organization_user_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Organization_user_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Organization_user_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Organization_user_arr_rel_insert_input) GetData() []*Organization_user_insert_input {
	return v.Data
}

// GetOn_conflict returns Organization_user_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Organization_user_arr_rel_insert_input) GetOn_conflict() *Organization_user_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "organization_user". All fields are combined with a logical 'AND'.
type Organization_user_bool_exp struct {
	And             []*Organization_user_bool_exp          `json:"_and,omitempty"`
	Not             *Organization_user_bool_exp            `json:"_not,omitempty"`
	Or              []*Organization_user_bool_exp          `json:"_or,omitempty"`
	Created_at      *Timestamptz_comparison_exp            `json:"created_at,omitempty"`
	Id              *Uuid_comparison_exp                   `json:"id,omitempty"`
	Organization    *Organizations_bool_exp                `json:"organization,omitempty"`
	Organization_id *Uuid_comparison_exp                   `json:"organization_id,omitempty"`
	Role            *Organization_user_role_comparison_exp `json:"role,omitempty"`
	Updated_at      *Timestamptz_comparison_exp            `json:"updated_at,omitempty"`
	User            *Users_bool_exp                        `json:"user,omitempty"`
	User_id         *Uuid_comparison_exp                   `json:"user_id,omitempty"`
}

// GetAnd returns Organization_user_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetAnd() []*Organization_user_bool_exp { return v.And }

// GetNot returns Organization_user_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetNot() *Organization_user_bool_exp { return v.Not }

// GetOr returns Organization_user_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetOr() []*Organization_user_bool_exp { return v.Or }

// GetCreated_at returns Organization_user_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetCreated_at() *Timestamptz_comparison_exp { return v.Created_at }

// GetId returns Organization_user_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetOrganization returns Organization_user_bool_exp.Organization, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetOrganization() *Organizations_bool_exp { return v.Organization }

// GetOrganization_id returns Organization_user_bool_exp.Organization_id, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetOrganization_id() *Uuid_comparison_exp {
	return v.Organization_id
}

// GetRole returns Organization_user_bool_exp.Role, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetRole() *Organization_user_role_comparison_exp { return v.Role }

// GetUpdated_at returns Organization_user_bool_exp.Updated_at, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetUpdated_at() *Timestamptz_comparison_exp { return v.Updated_at }

// GetUser returns Organization_user_bool_exp.User, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetUser() *Users_bool_exp { return v.User }

// GetUser_id returns Organization_user_bool_exp.User_id, and is useful for accessing the field via an interface.
func (v *Organization_user_bool_exp) GetUser_id() *Uuid_comparison_exp { return v.User_id }

// unique or primary key constraints on table "organization_user"
type Organization_user_constraint string

const (
	// unique or primary key constraint
	Organization_user_constraintOrganizationUserPkey Organization_user_constraint = "organization_user_pkey"
	// unique or primary key constraint
	Organization_user_constraintOrganizationUserUserIdOrganizationIdKey Organization_user_constraint = "organization_user_user_id_organization_id_key"
)

// input type for inserting data into table "organization_user"
type Organization_user_insert_input struct {
	Created_at      time.Time                           `json:"created_at"`
	Id              uuid.UUID                           `json:"id"`
	Organization    *Organizations_obj_rel_insert_input `json:"organization,omitempty"`
	Organization_id uuid.UUID                           `json:"organization_id"`
	Role            string                              `json:"role"`
	Updated_at      time.Time                           `json:"updated_at"`
	User            *Users_obj_rel_insert_input         `json:"user,omitempty"`
	User_id         uuid.UUID                           `json:"user_id"`
}

// GetCreated_at returns Organization_user_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetId returns Organization_user_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetId() uuid.UUID { return v.Id }

// GetOrganization returns Organization_user_insert_input.Organization, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetOrganization() *Organizations_obj_rel_insert_input {
	return v.Organization
}

// GetOrganization_id returns Organization_user_insert_input.Organization_id, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetOrganization_id() uuid.UUID { return v.Organization_id }

// GetRole returns Organization_user_insert_input.Role, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetRole() string { return v.Role }

// GetUpdated_at returns Organization_user_insert_input.Updated_at, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetUpdated_at() time.Time { return v.Updated_at }

// GetUser returns Organization_user_insert_input.User, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetUser() *Users_obj_rel_insert_input { return v.User }

// GetUser_id returns Organization_user_insert_input.User_id, and is useful for accessing the field via an interface.
func (v *Organization_user_insert_input) GetUser_id() uuid.UUID { return v.User_id }

// on_conflict condition type for table "organization_user"
type Organization_user_on_conflict struct {
	Constraint     Organization_user_constraint      `json:"constraint"`
	Update_columns []Organization_user_update_column `json:"update_columns"`
	Where          *Organization_user_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Organization_user_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Organization_user_on_conflict) GetConstraint() Organization_user_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Organization_user_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Organization_user_on_conflict) GetUpdate_columns() []Organization_user_update_column {
	return v.Update_columns
}

// GetWhere returns Organization_user_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Organization_user_on_conflict) GetWhere() *Organization_user_bool_exp { return v.Where }

// Boolean expression to compare columns of type "organization_user_role". All fields are combined with logical 'AND'.
type Organization_user_role_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns Organization_user_role_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns Organization_user_role_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns Organization_user_role_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns Organization_user_role_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns Organization_user_role_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Organization_user_role_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns Organization_user_role_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns Organization_user_role_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns Organization_user_role_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Organization_user_role_comparison_exp) GetNin() []string { return v.Nin }

// update columns of table "organization_user"
type Organization_user_update_column string

const (
	// column name
	Organization_user_update_columnCreatedAt Organization_user_update_column = "created_at"
	// column name
	Organization_user_update_columnId Organization_user_update_column = "id"
	// column name
	Organization_user_update_columnOrganizationId Organization_user_update_column = "organization_id"
	// column name
	Organization_user_update_columnRole Organization_user_update_column = "role"
	// column name
	Organization_user_update_columnUpdatedAt Organization_user_update_column = "updated_at"
	// column name
	Organization_user_update_columnUserId Organization_user_update_column = "user_id"
)

// Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
type Organizations_bool_exp struct {
	And                []*Organizations_bool_exp   `json:"_and,omitempty"`
	Not                *Organizations_bool_exp     `json:"_not,omitempty"`
	Or                 []*Organizations_bool_exp   `json:"_or,omitempty"`
	CreatedAt          *Timestamp_comparison_exp   `json:"createdAt,omitempty"`
	Creator            *Users_bool_exp             `json:"creator,omitempty"`
	Creator_id         *Uuid_comparison_exp        `json:"creator_id,omitempty"`
	Github_id          *Int_comparison_exp         `json:"github_id,omitempty"`
	Github_node_id     *String_comparison_exp      `json:"github_node_id,omitempty"`
	Id                 *Uuid_comparison_exp        `json:"id,omitempty"`
	Installation_id    *Int_comparison_exp         `json:"installation_id,omitempty"`
	Name               *String_comparison_exp      `json:"name,omitempty"`
	Organization_users *Organization_user_bool_exp `json:"organization_users,omitempty"`
	Projects           *Projects_bool_exp          `json:"projects,omitempty"`
	Settings           *Settings_bool_exp          `json:"settings,omitempty"`
	Settings_id        *Uuid_comparison_exp        `json:"settings_id,omitempty"`
}

// GetAnd returns Organizations_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetAnd() []*Organizations_bool_exp { return v.And }

// GetNot returns Organizations_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetNot() *Organizations_bool_exp { return v.Not }

// GetOr returns Organizations_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetOr() []*Organizations_bool_exp { return v.Or }

// GetCreatedAt returns Organizations_bool_exp.CreatedAt, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetCreatedAt() *Timestamp_comparison_exp { return v.CreatedAt }

// GetCreator returns Organizations_bool_exp.Creator, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetCreator() *Users_bool_exp { return v.Creator }

// GetCreator_id returns Organizations_bool_exp.Creator_id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetCreator_id() *Uuid_comparison_exp { return v.Creator_id }

// GetGithub_id returns Organizations_bool_exp.Github_id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetGithub_id() *Int_comparison_exp { return v.Github_id }

// GetGithub_node_id returns Organizations_bool_exp.Github_node_id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetGithub_node_id() *String_comparison_exp { return v.Github_node_id }

// GetId returns Organizations_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetInstallation_id returns Organizations_bool_exp.Installation_id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetInstallation_id() *Int_comparison_exp { return v.Installation_id }

// GetName returns Organizations_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetOrganization_users returns Organizations_bool_exp.Organization_users, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetOrganization_users() *Organization_user_bool_exp {
	return v.Organization_users
}

// GetProjects returns Organizations_bool_exp.Projects, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetProjects() *Projects_bool_exp { return v.Projects }

// GetSettings returns Organizations_bool_exp.Settings, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetSettings() *Settings_bool_exp { return v.Settings }

// GetSettings_id returns Organizations_bool_exp.Settings_id, and is useful for accessing the field via an interface.
func (v *Organizations_bool_exp) GetSettings_id() *Uuid_comparison_exp { return v.Settings_id }

// unique or primary key constraints on table "organizations"
type Organizations_constraint string

const (
	// unique or primary key constraint
	Organizations_constraintOrganizationsGithubIdKey Organizations_constraint = "organizations_github_id_key"
	// unique or primary key constraint
	Organizations_constraintOrganizationsGithubNodeIdKey Organizations_constraint = "organizations_github_node_id_key"
	// unique or primary key constraint
	Organizations_constraintOrganizationsPkey Organizations_constraint = "organizations_pkey"
)

// input type for inserting data into table "organizations"
type Organizations_insert_input struct {
	CreatedAt          time.Time                               `json:"createdAt"`
	Creator            *Users_obj_rel_insert_input             `json:"creator,omitempty"`
	Creator_id         uuid.UUID                               `json:"creator_id"`
	Github_id          int                                     `json:"github_id"`
	Github_node_id     string                                  `json:"github_node_id"`
	Github_owner_type  string                                  `json:"github_owner_type"`
	Id                 uuid.UUID                               `json:"id"`
	Installation_id    int                                     `json:"installation_id"`
	Name               string                                  `json:"name"`
	Organization_users *Organization_user_arr_rel_insert_input `json:"organization_users,omitempty"`
	Projects           *Projects_arr_rel_insert_input          `json:"projects,omitempty"`
	Settings_id        uuid.UUID                               `json:"settings_id"`
}

// GetCreatedAt returns Organizations_insert_input.CreatedAt, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreator returns Organizations_insert_input.Creator, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetCreator() *Users_obj_rel_insert_input { return v.Creator }

// GetCreator_id returns Organizations_insert_input.Creator_id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetCreator_id() uuid.UUID { return v.Creator_id }

// GetGithub_id returns Organizations_insert_input.Github_id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetGithub_id() int { return v.Github_id }

// GetGithub_node_id returns Organizations_insert_input.Github_node_id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetGithub_node_id() string { return v.Github_node_id }

// GetGithub_owner_type returns Organizations_insert_input.Github_owner_type, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetGithub_owner_type() string { return v.Github_owner_type }

// GetId returns Organizations_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetId() uuid.UUID { return v.Id }

// GetInstallation_id returns Organizations_insert_input.Installation_id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetInstallation_id() int { return v.Installation_id }

// GetName returns Organizations_insert_input.Name, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetName() string { return v.Name }

// GetOrganization_users returns Organizations_insert_input.Organization_users, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetOrganization_users() *Organization_user_arr_rel_insert_input {
	return v.Organization_users
}

// GetProjects returns Organizations_insert_input.Projects, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetProjects() *Projects_arr_rel_insert_input { return v.Projects }

// GetSettings_id returns Organizations_insert_input.Settings_id, and is useful for accessing the field via an interface.
func (v *Organizations_insert_input) GetSettings_id() uuid.UUID { return v.Settings_id }

// input type for inserting object relation for remote table "organizations"
type Organizations_obj_rel_insert_input struct {
	Data *Organizations_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Organizations_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Organizations_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Organizations_obj_rel_insert_input) GetData() *Organizations_insert_input { return v.Data }

// GetOn_conflict returns Organizations_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Organizations_obj_rel_insert_input) GetOn_conflict() *Organizations_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "organizations"
type Organizations_on_conflict struct {
	Constraint     Organizations_constraint      `json:"constraint"`
	Update_columns []Organizations_update_column `json:"update_columns"`
	Where          *Organizations_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Organizations_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Organizations_on_conflict) GetConstraint() Organizations_constraint { return v.Constraint }

// GetUpdate_columns returns Organizations_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Organizations_on_conflict) GetUpdate_columns() []Organizations_update_column {
	return v.Update_columns
}

// GetWhere returns Organizations_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Organizations_on_conflict) GetWhere() *Organizations_bool_exp { return v.Where }

// update columns of table "organizations"
type Organizations_update_column string

const (
	// column name
	Organizations_update_columnCreatedat Organizations_update_column = "createdAt"
	// column name
	Organizations_update_columnCreatorId Organizations_update_column = "creator_id"
	// column name
	Organizations_update_columnGithubId Organizations_update_column = "github_id"
	// column name
	Organizations_update_columnGithubNodeId Organizations_update_column = "github_node_id"
	// column name
	Organizations_update_columnGithubOwnerType Organizations_update_column = "github_owner_type"
	// column name
	Organizations_update_columnId Organizations_update_column = "id"
	// column name
	Organizations_update_columnInstallationId Organizations_update_column = "installation_id"
	// column name
	Organizations_update_columnName Organizations_update_column = "name"
	// column name
	Organizations_update_columnSettingsId Organizations_update_column = "settings_id"
)

// input type for inserting array relation for remote table "package_versions"
type Package_versions_arr_rel_insert_input struct {
	Data []*Package_versions_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_versions_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_versions_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_versions_arr_rel_insert_input) GetData() []*Package_versions_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_versions_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_versions_arr_rel_insert_input) GetOn_conflict() *Package_versions_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "package_versions". All fields are combined with a logical 'AND'.
type Package_versions_bool_exp struct {
	And                   []*Package_versions_bool_exp     `json:"_and,omitempty"`
	Not                   *Package_versions_bool_exp       `json:"_not,omitempty"`
	Or                    []*Package_versions_bool_exp     `json:"_or,omitempty"`
	Cpes                  *Text_comparison_exp             `json:"cpes,omitempty"`
	Findings              *Findings_bool_exp               `json:"findings,omitempty"`
	Fix_state             *String_comparison_exp           `json:"fix_state,omitempty"`
	Fixed_in_versions     *Text_comparison_exp             `json:"fixed_in_versions,omitempty"`
	Id                    *Uuid_comparison_exp             `json:"id,omitempty"`
	Pkg_slug              *String_comparison_exp           `json:"pkg_slug,omitempty"`
	Slug                  *String_comparison_exp           `json:"slug,omitempty"`
	Version_constraint    *String_comparison_exp           `json:"version_constraint,omitempty"`
	Version_format        *String_comparison_exp           `json:"version_format,omitempty"`
	Vulnerability_package *Vulnerability_packages_bool_exp `json:"vulnerability_package,omitempty"`
}

// GetAnd returns Package_versions_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetAnd() []*Package_versions_bool_exp { return v.And }

// GetNot returns Package_versions_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetNot() *Package_versions_bool_exp { return v.Not }

// GetOr returns Package_versions_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetOr() []*Package_versions_bool_exp { return v.Or }

// GetCpes returns Package_versions_bool_exp.Cpes, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetCpes() *Text_comparison_exp { return v.Cpes }

// GetFindings returns Package_versions_bool_exp.Findings, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetFindings() *Findings_bool_exp { return v.Findings }

// GetFix_state returns Package_versions_bool_exp.Fix_state, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetFix_state() *String_comparison_exp { return v.Fix_state }

// GetFixed_in_versions returns Package_versions_bool_exp.Fixed_in_versions, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetFixed_in_versions() *Text_comparison_exp {
	return v.Fixed_in_versions
}

// GetId returns Package_versions_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetPkg_slug returns Package_versions_bool_exp.Pkg_slug, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetPkg_slug() *String_comparison_exp { return v.Pkg_slug }

// GetSlug returns Package_versions_bool_exp.Slug, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetSlug() *String_comparison_exp { return v.Slug }

// GetVersion_constraint returns Package_versions_bool_exp.Version_constraint, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetVersion_constraint() *String_comparison_exp {
	return v.Version_constraint
}

// GetVersion_format returns Package_versions_bool_exp.Version_format, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetVersion_format() *String_comparison_exp {
	return v.Version_format
}

// GetVulnerability_package returns Package_versions_bool_exp.Vulnerability_package, and is useful for accessing the field via an interface.
func (v *Package_versions_bool_exp) GetVulnerability_package() *Vulnerability_packages_bool_exp {
	return v.Vulnerability_package
}

// unique or primary key constraints on table "package_versions"
type Package_versions_constraint string

const (
	// unique or primary key constraint
	Package_versions_constraintPackageVersionsPkey Package_versions_constraint = "package_versions_pkey"
	// unique or primary key constraint
	Package_versions_constraintPackageVersionsSlugKey Package_versions_constraint = "package_versions_slug_key"
)

// input type for inserting data into table "package_versions"
type Package_versions_insert_input struct {
	Findings              *Findings_arr_rel_insert_input               `json:"findings,omitempty"`
	Slug                  string                                       `json:"slug"`
	Vulnerability_package *Vulnerability_packages_obj_rel_insert_input `json:"vulnerability_package,omitempty"`
}

// GetFindings returns Package_versions_insert_input.Findings, and is useful for accessing the field via an interface.
func (v *Package_versions_insert_input) GetFindings() *Findings_arr_rel_insert_input {
	return v.Findings
}

// GetSlug returns Package_versions_insert_input.Slug, and is useful for accessing the field via an interface.
func (v *Package_versions_insert_input) GetSlug() string { return v.Slug }

// GetVulnerability_package returns Package_versions_insert_input.Vulnerability_package, and is useful for accessing the field via an interface.
func (v *Package_versions_insert_input) GetVulnerability_package() *Vulnerability_packages_obj_rel_insert_input {
	return v.Vulnerability_package
}

// input type for inserting object relation for remote table "package_versions"
type Package_versions_obj_rel_insert_input struct {
	Data *Package_versions_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_versions_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_versions_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_versions_obj_rel_insert_input) GetData() *Package_versions_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_versions_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_versions_obj_rel_insert_input) GetOn_conflict() *Package_versions_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "package_versions"
type Package_versions_on_conflict struct {
	Constraint     Package_versions_constraint      `json:"constraint"`
	Update_columns []Package_versions_update_column `json:"update_columns"`
	Where          *Package_versions_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_versions_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_versions_on_conflict) GetConstraint() Package_versions_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Package_versions_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_versions_on_conflict) GetUpdate_columns() []Package_versions_update_column {
	return v.Update_columns
}

// GetWhere returns Package_versions_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_versions_on_conflict) GetWhere() *Package_versions_bool_exp { return v.Where }

// update columns of table "package_versions"
type Package_versions_update_column string

const (
	// column name
	Package_versions_update_columnSlug Package_versions_update_column = "slug"
)

// PresignSbomPresignSbomUploadSbomUploadUrlOutput includes the requested fields of the GraphQL type SbomUploadUrlOutput.
type PresignSbomPresignSbomUploadSbomUploadUrlOutput struct {
	UploadUrl *PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl `json:"uploadUrl"`
	Error     bool                                                      `json:"error"`
}

// GetUploadUrl returns PresignSbomPresignSbomUploadSbomUploadUrlOutput.UploadUrl, and is useful for accessing the field via an interface.
func (v *PresignSbomPresignSbomUploadSbomUploadUrlOutput) GetUploadUrl() *PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl {
	return v.UploadUrl
}

// GetError returns PresignSbomPresignSbomUploadSbomUploadUrlOutput.Error, and is useful for accessing the field via an interface.
func (v *PresignSbomPresignSbomUploadSbomUploadUrlOutput) GetError() bool { return v.Error }

// PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl includes the requested fields of the GraphQL type UploadUrl.
type PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl struct {
	Url     string          `json:"url"`
	Headers json.RawMessage `json:"headers"`
}

// GetUrl returns PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl.Url, and is useful for accessing the field via an interface.
func (v *PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl) GetUrl() string { return v.Url }

// GetHeaders returns PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl.Headers, and is useful for accessing the field via an interface.
func (v *PresignSbomPresignSbomUploadSbomUploadUrlOutputUploadUrl) GetHeaders() json.RawMessage {
	return v.Headers
}

// PresignSbomResponse is returned by PresignSbom on success.
type PresignSbomResponse struct {
	PresignSbomUpload *PresignSbomPresignSbomUploadSbomUploadUrlOutput `json:"presignSbomUpload"`
}

// GetPresignSbomUpload returns PresignSbomResponse.PresignSbomUpload, and is useful for accessing the field via an interface.
func (v *PresignSbomResponse) GetPresignSbomUpload() *PresignSbomPresignSbomUploadSbomUploadUrlOutput {
	return v.PresignSbomUpload
}

// Boolean expression to filter rows from the table "project_access_tokens". All fields are combined with a logical 'AND'.
type Project_access_tokens_bool_exp struct {
	And             []*Project_access_tokens_bool_exp `json:"_and,omitempty"`
	Not             *Project_access_tokens_bool_exp   `json:"_not,omitempty"`
	Or              []*Project_access_tokens_bool_exp `json:"_or,omitempty"`
	Access_token    *Uuid_comparison_exp              `json:"access_token,omitempty"`
	Created_by_user *Identities_bool_exp              `json:"created_by_user,omitempty"`
	Id              *Uuid_comparison_exp              `json:"id,omitempty"`
	Project         *Projects_bool_exp                `json:"project,omitempty"`
	Project_uuid    *Uuid_comparison_exp              `json:"project_uuid,omitempty"`
}

// GetAnd returns Project_access_tokens_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetAnd() []*Project_access_tokens_bool_exp { return v.And }

// GetNot returns Project_access_tokens_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetNot() *Project_access_tokens_bool_exp { return v.Not }

// GetOr returns Project_access_tokens_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetOr() []*Project_access_tokens_bool_exp { return v.Or }

// GetAccess_token returns Project_access_tokens_bool_exp.Access_token, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetAccess_token() *Uuid_comparison_exp {
	return v.Access_token
}

// GetCreated_by_user returns Project_access_tokens_bool_exp.Created_by_user, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetCreated_by_user() *Identities_bool_exp {
	return v.Created_by_user
}

// GetId returns Project_access_tokens_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetProject returns Project_access_tokens_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// GetProject_uuid returns Project_access_tokens_bool_exp.Project_uuid, and is useful for accessing the field via an interface.
func (v *Project_access_tokens_bool_exp) GetProject_uuid() *Uuid_comparison_exp {
	return v.Project_uuid
}

// input type for inserting array relation for remote table "projects"
type Projects_arr_rel_insert_input struct {
	Data []*Projects_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Projects_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Projects_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Projects_arr_rel_insert_input) GetData() []*Projects_insert_input { return v.Data }

// GetOn_conflict returns Projects_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Projects_arr_rel_insert_input) GetOn_conflict() *Projects_on_conflict { return v.On_conflict }

// Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
type Projects_bool_exp struct {
	And                     []*Projects_bool_exp              `json:"_and,omitempty"`
	Not                     *Projects_bool_exp                `json:"_not,omitempty"`
	Or                      []*Projects_bool_exp              `json:"_or,omitempty"`
	Builds                  *Builds_bool_exp                  `json:"builds,omitempty"`
	Created_at              *Timestamp_comparison_exp         `json:"created_at,omitempty"`
	Github_repositories     *Github_repositories_bool_exp     `json:"github_repositories,omitempty"`
	Github_repository       *Github_repositories_bool_exp     `json:"github_repository,omitempty"`
	Id                      *Uuid_comparison_exp              `json:"id,omitempty"`
	Ignored_vulnerabilities *Ignored_vulnerabilities_bool_exp `json:"ignored_vulnerabilities,omitempty"`
	Manifests               *Manifests_bool_exp               `json:"manifests,omitempty"`
	Name                    *String_comparison_exp            `json:"name,omitempty"`
	Organization            *Organizations_bool_exp           `json:"organization,omitempty"`
	Organization_id         *Uuid_comparison_exp              `json:"organization_id,omitempty"`
	Project_access_tokens   *Project_access_tokens_bool_exp   `json:"project_access_tokens,omitempty"`
	Repo                    *String_comparison_exp            `json:"repo,omitempty"`
	Reports                 *Project_access_tokens_bool_exp   `json:"reports,omitempty"`
	Settings                *Settings_bool_exp                `json:"settings,omitempty"`
	Settings_id             *Uuid_comparison_exp              `json:"settings_id,omitempty"`
}

// GetAnd returns Projects_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetAnd() []*Projects_bool_exp { return v.And }

// GetNot returns Projects_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetNot() *Projects_bool_exp { return v.Not }

// GetOr returns Projects_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetOr() []*Projects_bool_exp { return v.Or }

// GetBuilds returns Projects_bool_exp.Builds, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetBuilds() *Builds_bool_exp { return v.Builds }

// GetCreated_at returns Projects_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetGithub_repositories returns Projects_bool_exp.Github_repositories, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetGithub_repositories() *Github_repositories_bool_exp {
	return v.Github_repositories
}

// GetGithub_repository returns Projects_bool_exp.Github_repository, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetGithub_repository() *Github_repositories_bool_exp {
	return v.Github_repository
}

// GetId returns Projects_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetIgnored_vulnerabilities returns Projects_bool_exp.Ignored_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetIgnored_vulnerabilities() *Ignored_vulnerabilities_bool_exp {
	return v.Ignored_vulnerabilities
}

// GetManifests returns Projects_bool_exp.Manifests, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetManifests() *Manifests_bool_exp { return v.Manifests }

// GetName returns Projects_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetOrganization returns Projects_bool_exp.Organization, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetOrganization() *Organizations_bool_exp { return v.Organization }

// GetOrganization_id returns Projects_bool_exp.Organization_id, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetOrganization_id() *Uuid_comparison_exp { return v.Organization_id }

// GetProject_access_tokens returns Projects_bool_exp.Project_access_tokens, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetProject_access_tokens() *Project_access_tokens_bool_exp {
	return v.Project_access_tokens
}

// GetRepo returns Projects_bool_exp.Repo, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetRepo() *String_comparison_exp { return v.Repo }

// GetReports returns Projects_bool_exp.Reports, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetReports() *Project_access_tokens_bool_exp { return v.Reports }

// GetSettings returns Projects_bool_exp.Settings, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetSettings() *Settings_bool_exp { return v.Settings }

// GetSettings_id returns Projects_bool_exp.Settings_id, and is useful for accessing the field via an interface.
func (v *Projects_bool_exp) GetSettings_id() *Uuid_comparison_exp { return v.Settings_id }

// unique or primary key constraints on table "projects"
type Projects_constraint string

const (
	// unique or primary key constraint
	Projects_constraintProjectsNameOrganizationIdKey Projects_constraint = "projects_name_organization_id_key"
	// unique or primary key constraint
	Projects_constraintProjectsPkey Projects_constraint = "projects_pkey"
)

// input type for inserting data into table "projects"
type Projects_insert_input struct {
	Builds              *Builds_arr_rel_insert_input              `json:"builds,omitempty"`
	Created_at          time.Time                                 `json:"created_at"`
	Github_repositories *Github_repositories_arr_rel_insert_input `json:"github_repositories,omitempty"`
	Github_repository   *Github_repositories_obj_rel_insert_input `json:"github_repository,omitempty"`
	Id                  uuid.UUID                                 `json:"id"`
	Manifests           *Manifests_arr_rel_insert_input           `json:"manifests,omitempty"`
	Name                string                                    `json:"name"`
	Organization        *Organizations_obj_rel_insert_input       `json:"organization,omitempty"`
	Organization_id     uuid.UUID                                 `json:"organization_id"`
	Repo                string                                    `json:"repo"`
	Settings_id         uuid.UUID                                 `json:"settings_id"`
}

// GetBuilds returns Projects_insert_input.Builds, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetBuilds() *Builds_arr_rel_insert_input { return v.Builds }

// GetCreated_at returns Projects_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetGithub_repositories returns Projects_insert_input.Github_repositories, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetGithub_repositories() *Github_repositories_arr_rel_insert_input {
	return v.Github_repositories
}

// GetGithub_repository returns Projects_insert_input.Github_repository, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetGithub_repository() *Github_repositories_obj_rel_insert_input {
	return v.Github_repository
}

// GetId returns Projects_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetId() uuid.UUID { return v.Id }

// GetManifests returns Projects_insert_input.Manifests, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetManifests() *Manifests_arr_rel_insert_input { return v.Manifests }

// GetName returns Projects_insert_input.Name, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetName() string { return v.Name }

// GetOrganization returns Projects_insert_input.Organization, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetOrganization() *Organizations_obj_rel_insert_input {
	return v.Organization
}

// GetOrganization_id returns Projects_insert_input.Organization_id, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetOrganization_id() uuid.UUID { return v.Organization_id }

// GetRepo returns Projects_insert_input.Repo, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetRepo() string { return v.Repo }

// GetSettings_id returns Projects_insert_input.Settings_id, and is useful for accessing the field via an interface.
func (v *Projects_insert_input) GetSettings_id() uuid.UUID { return v.Settings_id }

// input type for inserting object relation for remote table "projects"
type Projects_obj_rel_insert_input struct {
	Data *Projects_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Projects_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Projects_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Projects_obj_rel_insert_input) GetData() *Projects_insert_input { return v.Data }

// GetOn_conflict returns Projects_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Projects_obj_rel_insert_input) GetOn_conflict() *Projects_on_conflict { return v.On_conflict }

// on_conflict condition type for table "projects"
type Projects_on_conflict struct {
	Constraint     Projects_constraint      `json:"constraint"`
	Update_columns []Projects_update_column `json:"update_columns"`
	Where          *Projects_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Projects_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Projects_on_conflict) GetConstraint() Projects_constraint { return v.Constraint }

// GetUpdate_columns returns Projects_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Projects_on_conflict) GetUpdate_columns() []Projects_update_column { return v.Update_columns }

// GetWhere returns Projects_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Projects_on_conflict) GetWhere() *Projects_bool_exp { return v.Where }

// update columns of table "projects"
type Projects_update_column string

const (
	// column name
	Projects_update_columnCreatedAt Projects_update_column = "created_at"
	// column name
	Projects_update_columnId Projects_update_column = "id"
	// column name
	Projects_update_columnName Projects_update_column = "name"
	// column name
	Projects_update_columnOrganizationId Projects_update_column = "organization_id"
	// column name
	Projects_update_columnRepo Projects_update_column = "repo"
	// column name
	Projects_update_columnSettingsId Projects_update_column = "settings_id"
)

// Boolean expression to filter rows from the table "related_vulnerabilities". All fields are combined with a logical 'AND'.
type Related_vulnerabilities_bool_exp struct {
	And                              []*Related_vulnerabilities_bool_exp `json:"_and,omitempty"`
	Not                              *Related_vulnerabilities_bool_exp   `json:"_not,omitempty"`
	Or                               []*Related_vulnerabilities_bool_exp `json:"_or,omitempty"`
	Id                               *Uuid_comparison_exp                `json:"id,omitempty"`
	Parent                           *Vulnerabilities_bool_exp           `json:"parent,omitempty"`
	Related_vulnerability_slug       *String_comparison_exp              `json:"related_vulnerability_slug,omitempty"`
	Vulnerability                    *Vulnerabilities_bool_exp           `json:"vulnerability,omitempty"`
	VulnerabilityByVulnerabilitySlug *Vulnerabilities_bool_exp           `json:"vulnerabilityByVulnerabilitySlug,omitempty"`
	Vulnerability_slug               *String_comparison_exp              `json:"vulnerability_slug,omitempty"`
}

// GetAnd returns Related_vulnerabilities_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetAnd() []*Related_vulnerabilities_bool_exp { return v.And }

// GetNot returns Related_vulnerabilities_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetNot() *Related_vulnerabilities_bool_exp { return v.Not }

// GetOr returns Related_vulnerabilities_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetOr() []*Related_vulnerabilities_bool_exp { return v.Or }

// GetId returns Related_vulnerabilities_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetParent returns Related_vulnerabilities_bool_exp.Parent, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetParent() *Vulnerabilities_bool_exp { return v.Parent }

// GetRelated_vulnerability_slug returns Related_vulnerabilities_bool_exp.Related_vulnerability_slug, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetRelated_vulnerability_slug() *String_comparison_exp {
	return v.Related_vulnerability_slug
}

// GetVulnerability returns Related_vulnerabilities_bool_exp.Vulnerability, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetVulnerability() *Vulnerabilities_bool_exp {
	return v.Vulnerability
}

// GetVulnerabilityByVulnerabilitySlug returns Related_vulnerabilities_bool_exp.VulnerabilityByVulnerabilitySlug, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetVulnerabilityByVulnerabilitySlug() *Vulnerabilities_bool_exp {
	return v.VulnerabilityByVulnerabilitySlug
}

// GetVulnerability_slug returns Related_vulnerabilities_bool_exp.Vulnerability_slug, and is useful for accessing the field via an interface.
func (v *Related_vulnerabilities_bool_exp) GetVulnerability_slug() *String_comparison_exp {
	return v.Vulnerability_slug
}

// input type for inserting array relation for remote table "scans"
type Scans_arr_rel_insert_input struct {
	Data []*Scans_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Scans_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Scans_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Scans_arr_rel_insert_input) GetData() []*Scans_insert_input { return v.Data }

// GetOn_conflict returns Scans_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Scans_arr_rel_insert_input) GetOn_conflict() *Scans_on_conflict { return v.On_conflict }

// Boolean expression to filter rows from the table "scans". All fields are combined with a logical 'AND'.
type Scans_bool_exp struct {
	And            []*Scans_bool_exp         `json:"_and,omitempty"`
	Not            *Scans_bool_exp           `json:"_not,omitempty"`
	Or             []*Scans_bool_exp         `json:"_or,omitempty"`
	Build          *Builds_bool_exp          `json:"build,omitempty"`
	Build_id       *Uuid_comparison_exp      `json:"build_id,omitempty"`
	Created_at     *Timestamp_comparison_exp `json:"created_at,omitempty"`
	Db_date        *Date_comparison_exp      `json:"db_date,omitempty"`
	Distro_name    *String_comparison_exp    `json:"distro_name,omitempty"`
	Distro_version *String_comparison_exp    `json:"distro_version,omitempty"`
	Findings       *Findings_bool_exp        `json:"findings,omitempty"`
	Grype_version  *String_comparison_exp    `json:"grype_version,omitempty"`
	Id             *Uuid_comparison_exp      `json:"id,omitempty"`
	Scan_number    *Int_comparison_exp       `json:"scan_number,omitempty"`
	Source_type    *String_comparison_exp    `json:"source_type,omitempty"`
	Target         *String_comparison_exp    `json:"target,omitempty"`
}

// GetAnd returns Scans_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetAnd() []*Scans_bool_exp { return v.And }

// GetNot returns Scans_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetNot() *Scans_bool_exp { return v.Not }

// GetOr returns Scans_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetOr() []*Scans_bool_exp { return v.Or }

// GetBuild returns Scans_bool_exp.Build, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetBuild() *Builds_bool_exp { return v.Build }

// GetBuild_id returns Scans_bool_exp.Build_id, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetBuild_id() *Uuid_comparison_exp { return v.Build_id }

// GetCreated_at returns Scans_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetDb_date returns Scans_bool_exp.Db_date, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetDb_date() *Date_comparison_exp { return v.Db_date }

// GetDistro_name returns Scans_bool_exp.Distro_name, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetDistro_name() *String_comparison_exp { return v.Distro_name }

// GetDistro_version returns Scans_bool_exp.Distro_version, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetDistro_version() *String_comparison_exp { return v.Distro_version }

// GetFindings returns Scans_bool_exp.Findings, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetFindings() *Findings_bool_exp { return v.Findings }

// GetGrype_version returns Scans_bool_exp.Grype_version, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetGrype_version() *String_comparison_exp { return v.Grype_version }

// GetId returns Scans_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetScan_number returns Scans_bool_exp.Scan_number, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetScan_number() *Int_comparison_exp { return v.Scan_number }

// GetSource_type returns Scans_bool_exp.Source_type, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetSource_type() *String_comparison_exp { return v.Source_type }

// GetTarget returns Scans_bool_exp.Target, and is useful for accessing the field via an interface.
func (v *Scans_bool_exp) GetTarget() *String_comparison_exp { return v.Target }

// unique or primary key constraints on table "scans"
type Scans_constraint string

const (
	// unique or primary key constraint
	Scans_constraintScansPkey Scans_constraint = "scans_pkey"
	// unique or primary key constraint
	Scans_constraintScansScanNumberBuildIdKey Scans_constraint = "scans_scan_number_build_id_key"
)

// input type for inserting data into table "scans"
type Scans_insert_input struct {
	Build          *Builds_obj_rel_insert_input   `json:"build,omitempty"`
	Build_id       uuid.UUID                      `json:"build_id"`
	Created_at     time.Time                      `json:"created_at"`
	Db_date        time.Time                      `json:"db_date"`
	Distro_name    string                         `json:"distro_name"`
	Distro_version string                         `json:"distro_version"`
	Findings       *Findings_arr_rel_insert_input `json:"findings,omitempty"`
	Grype_version  string                         `json:"grype_version"`
	Id             uuid.UUID                      `json:"id"`
	Scan_number    int                            `json:"scan_number"`
	Source_type    string                         `json:"source_type"`
	Target         string                         `json:"target"`
}

// GetBuild returns Scans_insert_input.Build, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetBuild() *Builds_obj_rel_insert_input { return v.Build }

// GetBuild_id returns Scans_insert_input.Build_id, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetBuild_id() uuid.UUID { return v.Build_id }

// GetCreated_at returns Scans_insert_input.Created_at, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetCreated_at() time.Time { return v.Created_at }

// GetDb_date returns Scans_insert_input.Db_date, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetDb_date() time.Time { return v.Db_date }

// GetDistro_name returns Scans_insert_input.Distro_name, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetDistro_name() string { return v.Distro_name }

// GetDistro_version returns Scans_insert_input.Distro_version, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetDistro_version() string { return v.Distro_version }

// GetFindings returns Scans_insert_input.Findings, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetFindings() *Findings_arr_rel_insert_input { return v.Findings }

// GetGrype_version returns Scans_insert_input.Grype_version, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetGrype_version() string { return v.Grype_version }

// GetId returns Scans_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetId() uuid.UUID { return v.Id }

// GetScan_number returns Scans_insert_input.Scan_number, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetScan_number() int { return v.Scan_number }

// GetSource_type returns Scans_insert_input.Source_type, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetSource_type() string { return v.Source_type }

// GetTarget returns Scans_insert_input.Target, and is useful for accessing the field via an interface.
func (v *Scans_insert_input) GetTarget() string { return v.Target }

// input type for inserting object relation for remote table "scans"
type Scans_obj_rel_insert_input struct {
	Data *Scans_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Scans_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Scans_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Scans_obj_rel_insert_input) GetData() *Scans_insert_input { return v.Data }

// GetOn_conflict returns Scans_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Scans_obj_rel_insert_input) GetOn_conflict() *Scans_on_conflict { return v.On_conflict }

// on_conflict condition type for table "scans"
type Scans_on_conflict struct {
	Constraint     Scans_constraint      `json:"constraint"`
	Update_columns []Scans_update_column `json:"update_columns"`
	Where          *Scans_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Scans_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Scans_on_conflict) GetConstraint() Scans_constraint { return v.Constraint }

// GetUpdate_columns returns Scans_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Scans_on_conflict) GetUpdate_columns() []Scans_update_column { return v.Update_columns }

// GetWhere returns Scans_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Scans_on_conflict) GetWhere() *Scans_bool_exp { return v.Where }

// update columns of table "scans"
type Scans_update_column string

const (
	// column name
	Scans_update_columnBuildId Scans_update_column = "build_id"
	// column name
	Scans_update_columnCreatedAt Scans_update_column = "created_at"
	// column name
	Scans_update_columnDbDate Scans_update_column = "db_date"
	// column name
	Scans_update_columnDistroName Scans_update_column = "distro_name"
	// column name
	Scans_update_columnDistroVersion Scans_update_column = "distro_version"
	// column name
	Scans_update_columnGrypeVersion Scans_update_column = "grype_version"
	// column name
	Scans_update_columnId Scans_update_column = "id"
	// column name
	Scans_update_columnScanNumber Scans_update_column = "scan_number"
	// column name
	Scans_update_columnSourceType Scans_update_column = "source_type"
	// column name
	Scans_update_columnTarget Scans_update_column = "target"
)

// SetBuildS3UrlResponse is returned by SetBuildS3Url on success.
type SetBuildS3UrlResponse struct {
	// update single row of the table: "builds"
	Update_builds_by_pk *SetBuildS3UrlUpdate_builds_by_pkBuilds `json:"update_builds_by_pk"`
}

// GetUpdate_builds_by_pk returns SetBuildS3UrlResponse.Update_builds_by_pk, and is useful for accessing the field via an interface.
func (v *SetBuildS3UrlResponse) GetUpdate_builds_by_pk() *SetBuildS3UrlUpdate_builds_by_pkBuilds {
	return v.Update_builds_by_pk
}

// SetBuildS3UrlUpdate_builds_by_pkBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type SetBuildS3UrlUpdate_builds_by_pkBuilds struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns SetBuildS3UrlUpdate_builds_by_pkBuilds.Id, and is useful for accessing the field via an interface.
func (v *SetBuildS3UrlUpdate_builds_by_pkBuilds) GetId() uuid.UUID { return v.Id }

// Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
type Settings_bool_exp struct {
	And                  []*Settings_bool_exp      `json:"_and,omitempty"`
	Not                  *Settings_bool_exp        `json:"_not,omitempty"`
	Or                   []*Settings_bool_exp      `json:"_or,omitempty"`
	Created_at           *Timestamp_comparison_exp `json:"created_at,omitempty"`
	Id                   *Uuid_comparison_exp      `json:"id,omitempty"`
	Organization         *Organizations_bool_exp   `json:"organization,omitempty"`
	Pr_feedback_disabled *Boolean_comparison_exp   `json:"pr_feedback_disabled,omitempty"`
	Project              *Projects_bool_exp        `json:"project,omitempty"`
}

// GetAnd returns Settings_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetAnd() []*Settings_bool_exp { return v.And }

// GetNot returns Settings_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetNot() *Settings_bool_exp { return v.Not }

// GetOr returns Settings_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetOr() []*Settings_bool_exp { return v.Or }

// GetCreated_at returns Settings_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetId returns Settings_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetOrganization returns Settings_bool_exp.Organization, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetOrganization() *Organizations_bool_exp { return v.Organization }

// GetPr_feedback_disabled returns Settings_bool_exp.Pr_feedback_disabled, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetPr_feedback_disabled() *Boolean_comparison_exp {
	return v.Pr_feedback_disabled
}

// GetProject returns Settings_bool_exp.Project, and is useful for accessing the field via an interface.
func (v *Settings_bool_exp) GetProject() *Projects_bool_exp { return v.Project }

// Boolean expression to compare columns of type "severity_enum". All fields are combined with logical 'AND'.
type Severity_enum_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns Severity_enum_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns Severity_enum_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns Severity_enum_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns Severity_enum_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns Severity_enum_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Severity_enum_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns Severity_enum_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns Severity_enum_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns Severity_enum_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Severity_enum_comparison_exp) GetNin() []string { return v.Nin }

// Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
type String_comparison_exp struct {
	Eq  string `json:"_eq"`
	Gt  string `json:"_gt"`
	Gte string `json:"_gte"`
	// does the column match the given case-insensitive pattern
	Ilike string   `json:"_ilike"`
	In    []string `json:"_in"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex  string `json:"_iregex"`
	Is_null bool   `json:"_is_null"`
	// does the column match the given pattern
	Like string `json:"_like"`
	Lt   string `json:"_lt"`
	Lte  string `json:"_lte"`
	Neq  string `json:"_neq"`
	// does the column NOT match the given case-insensitive pattern
	Nilike string   `json:"_nilike"`
	Nin    []string `json:"_nin"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex string `json:"_niregex"`
	// does the column NOT match the given pattern
	Nlike string `json:"_nlike"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex string `json:"_nregex"`
	// does the column NOT match the given SQL regular expression
	Nsimilar string `json:"_nsimilar"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex string `json:"_regex"`
	// does the column match the given SQL regular expression
	Similar string `json:"_similar"`
}

// GetEq returns String_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns String_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns String_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGte() string { return v.Gte }

// GetIlike returns String_comparison_exp.Ilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIlike() string { return v.Ilike }

// GetIn returns String_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIn() []string { return v.In }

// GetIregex returns String_comparison_exp.Iregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIregex() string { return v.Iregex }

// GetIs_null returns String_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLike returns String_comparison_exp.Like, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLike() string { return v.Like }

// GetLt returns String_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns String_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns String_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNeq() string { return v.Neq }

// GetNilike returns String_comparison_exp.Nilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNilike() string { return v.Nilike }

// GetNin returns String_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNin() []string { return v.Nin }

// GetNiregex returns String_comparison_exp.Niregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNiregex() string { return v.Niregex }

// GetNlike returns String_comparison_exp.Nlike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNlike() string { return v.Nlike }

// GetNregex returns String_comparison_exp.Nregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNregex() string { return v.Nregex }

// GetNsimilar returns String_comparison_exp.Nsimilar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNsimilar() string { return v.Nsimilar }

// GetRegex returns String_comparison_exp.Regex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetRegex() string { return v.Regex }

// GetSimilar returns String_comparison_exp.Similar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetSimilar() string { return v.Similar }

// Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
type Text_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns Text_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns Text_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns Text_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns Text_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns Text_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Text_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns Text_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns Text_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns Text_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Text_comparison_exp) GetNin() []string { return v.Nin }

// Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
type Timestamp_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// GetEq returns Timestamp_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetEq() time.Time { return v.Eq }

// GetGt returns Timestamp_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetGt() time.Time { return v.Gt }

// GetGte returns Timestamp_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetGte() time.Time { return v.Gte }

// GetIn returns Timestamp_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetIn() []time.Time { return v.In }

// GetIs_null returns Timestamp_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Timestamp_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetLt() time.Time { return v.Lt }

// GetLte returns Timestamp_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetLte() time.Time { return v.Lte }

// GetNeq returns Timestamp_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetNeq() time.Time { return v.Neq }

// GetNin returns Timestamp_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Timestamp_comparison_exp) GetNin() []time.Time { return v.Nin }

// Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
type Timestamptz_comparison_exp struct {
	Eq      time.Time   `json:"_eq"`
	Gt      time.Time   `json:"_gt"`
	Gte     time.Time   `json:"_gte"`
	In      []time.Time `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      time.Time   `json:"_lt"`
	Lte     time.Time   `json:"_lte"`
	Neq     time.Time   `json:"_neq"`
	Nin     []time.Time `json:"_nin"`
}

// GetEq returns Timestamptz_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetEq() time.Time { return v.Eq }

// GetGt returns Timestamptz_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetGt() time.Time { return v.Gt }

// GetGte returns Timestamptz_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetGte() time.Time { return v.Gte }

// GetIn returns Timestamptz_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetIn() []time.Time { return v.In }

// GetIs_null returns Timestamptz_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Timestamptz_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetLt() time.Time { return v.Lt }

// GetLte returns Timestamptz_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetLte() time.Time { return v.Lte }

// GetNeq returns Timestamptz_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetNeq() time.Time { return v.Neq }

// GetNin returns Timestamptz_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetNin() []time.Time { return v.Nin }

// Boolean expression to compare columns of type "user_role". All fields are combined with logical 'AND'.
type User_role_comparison_exp struct {
	Eq      string   `json:"_eq"`
	Gt      string   `json:"_gt"`
	Gte     string   `json:"_gte"`
	In      []string `json:"_in"`
	Is_null bool     `json:"_is_null"`
	Lt      string   `json:"_lt"`
	Lte     string   `json:"_lte"`
	Neq     string   `json:"_neq"`
	Nin     []string `json:"_nin"`
}

// GetEq returns User_role_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetEq() string { return v.Eq }

// GetGt returns User_role_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetGt() string { return v.Gt }

// GetGte returns User_role_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetGte() string { return v.Gte }

// GetIn returns User_role_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetIn() []string { return v.In }

// GetIs_null returns User_role_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns User_role_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetLt() string { return v.Lt }

// GetLte returns User_role_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetLte() string { return v.Lte }

// GetNeq returns User_role_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetNeq() string { return v.Neq }

// GetNin returns User_role_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *User_role_comparison_exp) GetNin() []string { return v.Nin }

// Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
type Users_bool_exp struct {
	And             []*Users_bool_exp         `json:"_and,omitempty"`
	Not             *Users_bool_exp           `json:"_not,omitempty"`
	Or              []*Users_bool_exp         `json:"_or,omitempty"`
	Github_id       *String_comparison_exp    `json:"github_id,omitempty"`
	Github_node_id  *String_comparison_exp    `json:"github_node_id,omitempty"`
	Id              *Uuid_comparison_exp      `json:"id,omitempty"`
	Kratos_id       *Uuid_comparison_exp      `json:"kratos_id,omitempty"`
	Kratos_identity *Identities_bool_exp      `json:"kratos_identity,omitempty"`
	Role            *User_role_comparison_exp `json:"role,omitempty"`
}

// GetAnd returns Users_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetAnd() []*Users_bool_exp { return v.And }

// GetNot returns Users_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetNot() *Users_bool_exp { return v.Not }

// GetOr returns Users_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetOr() []*Users_bool_exp { return v.Or }

// GetGithub_id returns Users_bool_exp.Github_id, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetGithub_id() *String_comparison_exp { return v.Github_id }

// GetGithub_node_id returns Users_bool_exp.Github_node_id, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetGithub_node_id() *String_comparison_exp { return v.Github_node_id }

// GetId returns Users_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetKratos_id returns Users_bool_exp.Kratos_id, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetKratos_id() *Uuid_comparison_exp { return v.Kratos_id }

// GetKratos_identity returns Users_bool_exp.Kratos_identity, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetKratos_identity() *Identities_bool_exp { return v.Kratos_identity }

// GetRole returns Users_bool_exp.Role, and is useful for accessing the field via an interface.
func (v *Users_bool_exp) GetRole() *User_role_comparison_exp { return v.Role }

// unique or primary key constraints on table "users"
type Users_constraint string

const (
	// unique or primary key constraint
	Users_constraintUsersGithubIdKey Users_constraint = "users_github_id_key"
	// unique or primary key constraint
	Users_constraintUsersGithubNodeIdKey Users_constraint = "users_github_node_id_key"
	// unique or primary key constraint
	Users_constraintUsersKratosIdUnique Users_constraint = "users_kratos_id_unique"
	// unique or primary key constraint
	Users_constraintUsersPkey Users_constraint = "users_pkey"
)

// input type for inserting data into table "users"
type Users_insert_input struct {
	Github_id      string    `json:"github_id"`
	Github_node_id string    `json:"github_node_id"`
	Id             uuid.UUID `json:"id"`
	Kratos_id      uuid.UUID `json:"kratos_id"`
}

// GetGithub_id returns Users_insert_input.Github_id, and is useful for accessing the field via an interface.
func (v *Users_insert_input) GetGithub_id() string { return v.Github_id }

// GetGithub_node_id returns Users_insert_input.Github_node_id, and is useful for accessing the field via an interface.
func (v *Users_insert_input) GetGithub_node_id() string { return v.Github_node_id }

// GetId returns Users_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Users_insert_input) GetId() uuid.UUID { return v.Id }

// GetKratos_id returns Users_insert_input.Kratos_id, and is useful for accessing the field via an interface.
func (v *Users_insert_input) GetKratos_id() uuid.UUID { return v.Kratos_id }

// input type for inserting object relation for remote table "users"
type Users_obj_rel_insert_input struct {
	Data *Users_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Users_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Users_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Users_obj_rel_insert_input) GetData() *Users_insert_input { return v.Data }

// GetOn_conflict returns Users_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Users_obj_rel_insert_input) GetOn_conflict() *Users_on_conflict { return v.On_conflict }

// on_conflict condition type for table "users"
type Users_on_conflict struct {
	Constraint     Users_constraint      `json:"constraint"`
	Update_columns []Users_update_column `json:"update_columns"`
	Where          *Users_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Users_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Users_on_conflict) GetConstraint() Users_constraint { return v.Constraint }

// GetUpdate_columns returns Users_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Users_on_conflict) GetUpdate_columns() []Users_update_column { return v.Update_columns }

// GetWhere returns Users_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Users_on_conflict) GetWhere() *Users_bool_exp { return v.Where }

// update columns of table "users"
type Users_update_column string

const (
	// column name
	Users_update_columnGithubId Users_update_column = "github_id"
	// column name
	Users_update_columnGithubNodeId Users_update_column = "github_node_id"
	// column name
	Users_update_columnId Users_update_column = "id"
	// column name
	Users_update_columnKratosId Users_update_column = "kratos_id"
)

// Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
type Uuid_comparison_exp struct {
	Eq      uuid.UUID   `json:"_eq"`
	Gt      uuid.UUID   `json:"_gt"`
	Gte     uuid.UUID   `json:"_gte"`
	In      []uuid.UUID `json:"_in"`
	Is_null bool        `json:"_is_null"`
	Lt      uuid.UUID   `json:"_lt"`
	Lte     uuid.UUID   `json:"_lte"`
	Neq     uuid.UUID   `json:"_neq"`
	Nin     []uuid.UUID `json:"_nin"`
}

// GetEq returns Uuid_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetEq() uuid.UUID { return v.Eq }

// GetGt returns Uuid_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetGt() uuid.UUID { return v.Gt }

// GetGte returns Uuid_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetGte() uuid.UUID { return v.Gte }

// GetIn returns Uuid_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetIn() []uuid.UUID { return v.In }

// GetIs_null returns Uuid_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetIs_null() bool { return v.Is_null }

// GetLt returns Uuid_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetLt() uuid.UUID { return v.Lt }

// GetLte returns Uuid_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetLte() uuid.UUID { return v.Lte }

// GetNeq returns Uuid_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetNeq() uuid.UUID { return v.Neq }

// GetNin returns Uuid_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetNin() []uuid.UUID { return v.Nin }

// Boolean expression to filter rows from the table "vulnerabilities". All fields are combined with a logical 'AND'.
type Vulnerabilities_bool_exp struct {
	And                             []*Vulnerabilities_bool_exp       `json:"_and,omitempty"`
	Not                             *Vulnerabilities_bool_exp         `json:"_not,omitempty"`
	Or                              []*Vulnerabilities_bool_exp       `json:"_or,omitempty"`
	Created_at                      *Timestamp_comparison_exp         `json:"created_at,omitempty"`
	Cvss_exploitability_score       *Numeric_comparison_exp           `json:"cvss_exploitability_score,omitempty"`
	Cvss_impact_score               *Numeric_comparison_exp           `json:"cvss_impact_score,omitempty"`
	Cvss_inferred                   *Boolean_comparison_exp           `json:"cvss_inferred,omitempty"`
	Cvss_score                      *Numeric_comparison_exp           `json:"cvss_score,omitempty"`
	Cvss_version                    *String_comparison_exp            `json:"cvss_version,omitempty"`
	Data_source                     *String_comparison_exp            `json:"data_source,omitempty"`
	Description                     *String_comparison_exp            `json:"description,omitempty"`
	Findings                        *Findings_bool_exp                `json:"findings,omitempty"`
	Guide_vulnerabilities           *Guide_vulnerabilities_bool_exp   `json:"guide_vulnerabilities,omitempty"`
	Id                              *Uuid_comparison_exp              `json:"id,omitempty"`
	Ignored_vulnerabilities         *Ignored_vulnerabilities_bool_exp `json:"ignored_vulnerabilities,omitempty"`
	Name                            *String_comparison_exp            `json:"name,omitempty"`
	Namespace                       *String_comparison_exp            `json:"namespace,omitempty"`
	Record_source                   *String_comparison_exp            `json:"record_source,omitempty"`
	Related_vulnerabilities         *Related_vulnerabilities_bool_exp `json:"related_vulnerabilities,omitempty"`
	Reverse_related_vulnerabilities *Related_vulnerabilities_bool_exp `json:"reverse_related_vulnerabilities,omitempty"`
	Severity                        *Severity_enum_comparison_exp     `json:"severity,omitempty"`
	Slug                            *String_comparison_exp            `json:"slug,omitempty"`
	Topic_id                        *Uuid_comparison_exp              `json:"topic_id,omitempty"`
	Urls                            *Text_comparison_exp              `json:"urls,omitempty"`
	Vulnerability_packages          *Vulnerability_packages_bool_exp  `json:"vulnerability_packages,omitempty"`
}

// GetAnd returns Vulnerabilities_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetAnd() []*Vulnerabilities_bool_exp { return v.And }

// GetNot returns Vulnerabilities_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetNot() *Vulnerabilities_bool_exp { return v.Not }

// GetOr returns Vulnerabilities_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetOr() []*Vulnerabilities_bool_exp { return v.Or }

// GetCreated_at returns Vulnerabilities_bool_exp.Created_at, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCreated_at() *Timestamp_comparison_exp { return v.Created_at }

// GetCvss_exploitability_score returns Vulnerabilities_bool_exp.Cvss_exploitability_score, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCvss_exploitability_score() *Numeric_comparison_exp {
	return v.Cvss_exploitability_score
}

// GetCvss_impact_score returns Vulnerabilities_bool_exp.Cvss_impact_score, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCvss_impact_score() *Numeric_comparison_exp {
	return v.Cvss_impact_score
}

// GetCvss_inferred returns Vulnerabilities_bool_exp.Cvss_inferred, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCvss_inferred() *Boolean_comparison_exp { return v.Cvss_inferred }

// GetCvss_score returns Vulnerabilities_bool_exp.Cvss_score, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCvss_score() *Numeric_comparison_exp { return v.Cvss_score }

// GetCvss_version returns Vulnerabilities_bool_exp.Cvss_version, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetCvss_version() *String_comparison_exp { return v.Cvss_version }

// GetData_source returns Vulnerabilities_bool_exp.Data_source, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetData_source() *String_comparison_exp { return v.Data_source }

// GetDescription returns Vulnerabilities_bool_exp.Description, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetDescription() *String_comparison_exp { return v.Description }

// GetFindings returns Vulnerabilities_bool_exp.Findings, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetFindings() *Findings_bool_exp { return v.Findings }

// GetGuide_vulnerabilities returns Vulnerabilities_bool_exp.Guide_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetGuide_vulnerabilities() *Guide_vulnerabilities_bool_exp {
	return v.Guide_vulnerabilities
}

// GetId returns Vulnerabilities_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetIgnored_vulnerabilities returns Vulnerabilities_bool_exp.Ignored_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetIgnored_vulnerabilities() *Ignored_vulnerabilities_bool_exp {
	return v.Ignored_vulnerabilities
}

// GetName returns Vulnerabilities_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetNamespace returns Vulnerabilities_bool_exp.Namespace, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetNamespace() *String_comparison_exp { return v.Namespace }

// GetRecord_source returns Vulnerabilities_bool_exp.Record_source, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetRecord_source() *String_comparison_exp { return v.Record_source }

// GetRelated_vulnerabilities returns Vulnerabilities_bool_exp.Related_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetRelated_vulnerabilities() *Related_vulnerabilities_bool_exp {
	return v.Related_vulnerabilities
}

// GetReverse_related_vulnerabilities returns Vulnerabilities_bool_exp.Reverse_related_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetReverse_related_vulnerabilities() *Related_vulnerabilities_bool_exp {
	return v.Reverse_related_vulnerabilities
}

// GetSeverity returns Vulnerabilities_bool_exp.Severity, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetSeverity() *Severity_enum_comparison_exp { return v.Severity }

// GetSlug returns Vulnerabilities_bool_exp.Slug, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetSlug() *String_comparison_exp { return v.Slug }

// GetTopic_id returns Vulnerabilities_bool_exp.Topic_id, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetTopic_id() *Uuid_comparison_exp { return v.Topic_id }

// GetUrls returns Vulnerabilities_bool_exp.Urls, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetUrls() *Text_comparison_exp { return v.Urls }

// GetVulnerability_packages returns Vulnerabilities_bool_exp.Vulnerability_packages, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_bool_exp) GetVulnerability_packages() *Vulnerability_packages_bool_exp {
	return v.Vulnerability_packages
}

// unique or primary key constraints on table "vulnerabilities"
type Vulnerabilities_constraint string

const (
	// unique or primary key constraint
	Vulnerabilities_constraintVulnerabilitiesPkey Vulnerabilities_constraint = "vulnerabilities_pkey"
	// unique or primary key constraint
	Vulnerabilities_constraintVulnerabilitiesSlugKey Vulnerabilities_constraint = "vulnerabilities_slug_key"
)

// input type for inserting data into table "vulnerabilities"
type Vulnerabilities_insert_input struct {
	Findings               *Findings_arr_rel_insert_input               `json:"findings,omitempty"`
	Guide_vulnerabilities  *Guide_vulnerabilities_arr_rel_insert_input  `json:"guide_vulnerabilities,omitempty"`
	Slug                   string                                       `json:"slug"`
	Vulnerability_packages *Vulnerability_packages_arr_rel_insert_input `json:"vulnerability_packages,omitempty"`
}

// GetFindings returns Vulnerabilities_insert_input.Findings, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_insert_input) GetFindings() *Findings_arr_rel_insert_input {
	return v.Findings
}

// GetGuide_vulnerabilities returns Vulnerabilities_insert_input.Guide_vulnerabilities, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_insert_input) GetGuide_vulnerabilities() *Guide_vulnerabilities_arr_rel_insert_input {
	return v.Guide_vulnerabilities
}

// GetSlug returns Vulnerabilities_insert_input.Slug, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_insert_input) GetSlug() string { return v.Slug }

// GetVulnerability_packages returns Vulnerabilities_insert_input.Vulnerability_packages, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_insert_input) GetVulnerability_packages() *Vulnerability_packages_arr_rel_insert_input {
	return v.Vulnerability_packages
}

// input type for inserting object relation for remote table "vulnerabilities"
type Vulnerabilities_obj_rel_insert_input struct {
	Data *Vulnerabilities_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Vulnerabilities_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Vulnerabilities_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_obj_rel_insert_input) GetData() *Vulnerabilities_insert_input { return v.Data }

// GetOn_conflict returns Vulnerabilities_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_obj_rel_insert_input) GetOn_conflict() *Vulnerabilities_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "vulnerabilities"
type Vulnerabilities_on_conflict struct {
	Constraint     Vulnerabilities_constraint      `json:"constraint"`
	Update_columns []Vulnerabilities_update_column `json:"update_columns"`
	Where          *Vulnerabilities_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Vulnerabilities_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_on_conflict) GetConstraint() Vulnerabilities_constraint { return v.Constraint }

// GetUpdate_columns returns Vulnerabilities_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_on_conflict) GetUpdate_columns() []Vulnerabilities_update_column {
	return v.Update_columns
}

// GetWhere returns Vulnerabilities_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Vulnerabilities_on_conflict) GetWhere() *Vulnerabilities_bool_exp { return v.Where }

// update columns of table "vulnerabilities"
type Vulnerabilities_update_column string

const (
	// column name
	Vulnerabilities_update_columnSlug Vulnerabilities_update_column = "slug"
)

// input type for inserting array relation for remote table "vulnerability_packages"
type Vulnerability_packages_arr_rel_insert_input struct {
	Data []*Vulnerability_packages_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Vulnerability_packages_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Vulnerability_packages_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_arr_rel_insert_input) GetData() []*Vulnerability_packages_insert_input {
	return v.Data
}

// GetOn_conflict returns Vulnerability_packages_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_arr_rel_insert_input) GetOn_conflict() *Vulnerability_packages_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "vulnerability_packages". All fields are combined with a logical 'AND'.
type Vulnerability_packages_bool_exp struct {
	And              []*Vulnerability_packages_bool_exp `json:"_and,omitempty"`
	Not              *Vulnerability_packages_bool_exp   `json:"_not,omitempty"`
	Or               []*Vulnerability_packages_bool_exp `json:"_or,omitempty"`
	Advisories       *String_comparison_exp             `json:"advisories,omitempty"`
	Findings         *Findings_bool_exp                 `json:"findings,omitempty"`
	Id               *Uuid_comparison_exp               `json:"id,omitempty"`
	Name             *String_comparison_exp             `json:"name,omitempty"`
	Package_versions *Package_versions_bool_exp         `json:"package_versions,omitempty"`
	Slug             *String_comparison_exp             `json:"slug,omitempty"`
	Vuln_slug        *String_comparison_exp             `json:"vuln_slug,omitempty"`
	Vulnerability    *Vulnerabilities_bool_exp          `json:"vulnerability,omitempty"`
}

// GetAnd returns Vulnerability_packages_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetAnd() []*Vulnerability_packages_bool_exp { return v.And }

// GetNot returns Vulnerability_packages_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetNot() *Vulnerability_packages_bool_exp { return v.Not }

// GetOr returns Vulnerability_packages_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetOr() []*Vulnerability_packages_bool_exp { return v.Or }

// GetAdvisories returns Vulnerability_packages_bool_exp.Advisories, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetAdvisories() *String_comparison_exp { return v.Advisories }

// GetFindings returns Vulnerability_packages_bool_exp.Findings, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetFindings() *Findings_bool_exp { return v.Findings }

// GetId returns Vulnerability_packages_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetName returns Vulnerability_packages_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetPackage_versions returns Vulnerability_packages_bool_exp.Package_versions, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetPackage_versions() *Package_versions_bool_exp {
	return v.Package_versions
}

// GetSlug returns Vulnerability_packages_bool_exp.Slug, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetSlug() *String_comparison_exp { return v.Slug }

// GetVuln_slug returns Vulnerability_packages_bool_exp.Vuln_slug, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetVuln_slug() *String_comparison_exp { return v.Vuln_slug }

// GetVulnerability returns Vulnerability_packages_bool_exp.Vulnerability, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_bool_exp) GetVulnerability() *Vulnerabilities_bool_exp {
	return v.Vulnerability
}

// unique or primary key constraints on table "vulnerability_packages"
type Vulnerability_packages_constraint string

const (
	// unique or primary key constraint
	Vulnerability_packages_constraintVulnerabilityPackagesPkey Vulnerability_packages_constraint = "vulnerability_packages_pkey"
	// unique or primary key constraint
	Vulnerability_packages_constraintVulnerabilityPackagesSlugKey Vulnerability_packages_constraint = "vulnerability_packages_slug_key"
)

// input type for inserting data into table "vulnerability_packages"
type Vulnerability_packages_insert_input struct {
	Findings         *Findings_arr_rel_insert_input         `json:"findings,omitempty"`
	Package_versions *Package_versions_arr_rel_insert_input `json:"package_versions,omitempty"`
	Slug             string                                 `json:"slug"`
	Vulnerability    *Vulnerabilities_obj_rel_insert_input  `json:"vulnerability,omitempty"`
}

// GetFindings returns Vulnerability_packages_insert_input.Findings, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_insert_input) GetFindings() *Findings_arr_rel_insert_input {
	return v.Findings
}

// GetPackage_versions returns Vulnerability_packages_insert_input.Package_versions, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_insert_input) GetPackage_versions() *Package_versions_arr_rel_insert_input {
	return v.Package_versions
}

// GetSlug returns Vulnerability_packages_insert_input.Slug, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_insert_input) GetSlug() string { return v.Slug }

// GetVulnerability returns Vulnerability_packages_insert_input.Vulnerability, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_insert_input) GetVulnerability() *Vulnerabilities_obj_rel_insert_input {
	return v.Vulnerability
}

// input type for inserting object relation for remote table "vulnerability_packages"
type Vulnerability_packages_obj_rel_insert_input struct {
	Data *Vulnerability_packages_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Vulnerability_packages_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Vulnerability_packages_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_obj_rel_insert_input) GetData() *Vulnerability_packages_insert_input {
	return v.Data
}

// GetOn_conflict returns Vulnerability_packages_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_obj_rel_insert_input) GetOn_conflict() *Vulnerability_packages_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "vulnerability_packages"
type Vulnerability_packages_on_conflict struct {
	Constraint     Vulnerability_packages_constraint      `json:"constraint"`
	Update_columns []Vulnerability_packages_update_column `json:"update_columns"`
	Where          *Vulnerability_packages_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Vulnerability_packages_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_on_conflict) GetConstraint() Vulnerability_packages_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Vulnerability_packages_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_on_conflict) GetUpdate_columns() []Vulnerability_packages_update_column {
	return v.Update_columns
}

// GetWhere returns Vulnerability_packages_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Vulnerability_packages_on_conflict) GetWhere() *Vulnerability_packages_bool_exp {
	return v.Where
}

// update columns of table "vulnerability_packages"
type Vulnerability_packages_update_column string

const (
	// column name
	Vulnerability_packages_update_columnSlug Vulnerability_packages_update_column = "slug"
)

// __DeleteBuildInput is used internally by genqlient
type __DeleteBuildInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __DeleteBuildInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteBuildInput) GetId() uuid.UUID { return v.Id }

// __InsertNewBuildQueryInput is used internally by genqlient
type __InsertNewBuildQueryInput struct {
	Project_id uuid.UUID `json:"project_id"`
	S3_url     string    `json:"s3_url"`
	Git_remote string    `json:"git_remote"`
	Git_branch string    `json:"git_branch"`
	Git_hash   string    `json:"git_hash"`
}

// GetProject_id returns __InsertNewBuildQueryInput.Project_id, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetProject_id() uuid.UUID { return v.Project_id }

// GetS3_url returns __InsertNewBuildQueryInput.S3_url, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetS3_url() string { return v.S3_url }

// GetGit_remote returns __InsertNewBuildQueryInput.Git_remote, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_remote() string { return v.Git_remote }

// GetGit_branch returns __InsertNewBuildQueryInput.Git_branch, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_branch() string { return v.Git_branch }

// GetGit_hash returns __InsertNewBuildQueryInput.Git_hash, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_hash() string { return v.Git_hash }

// __MyMutationInput is used internally by genqlient
type __MyMutationInput struct {
	Object *Builds_insert_input `json:"object,omitempty"`
}

// GetObject returns __MyMutationInput.Object, and is useful for accessing the field via an interface.
func (v *__MyMutationInput) GetObject() *Builds_insert_input { return v.Object }

// __PresignSbomInput is used internally by genqlient
type __PresignSbomInput struct {
	OrgId   uuid.UUID `json:"orgId"`
	BuildId uuid.UUID `json:"buildId"`
}

// GetOrgId returns __PresignSbomInput.OrgId, and is useful for accessing the field via an interface.
func (v *__PresignSbomInput) GetOrgId() uuid.UUID { return v.OrgId }

// GetBuildId returns __PresignSbomInput.BuildId, and is useful for accessing the field via an interface.
func (v *__PresignSbomInput) GetBuildId() uuid.UUID { return v.BuildId }

// __SetBuildS3UrlInput is used internally by genqlient
type __SetBuildS3UrlInput struct {
	Id     uuid.UUID `json:"id"`
	S3_url string    `json:"s3_url"`
}

// GetId returns __SetBuildS3UrlInput.Id, and is useful for accessing the field via an interface.
func (v *__SetBuildS3UrlInput) GetId() uuid.UUID { return v.Id }

// GetS3_url returns __SetBuildS3UrlInput.S3_url, and is useful for accessing the field via an interface.
func (v *__SetBuildS3UrlInput) GetS3_url() string { return v.S3_url }

func DeleteBuild(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
) (*DeleteBuildResponse, error) {
	__input := __DeleteBuildInput{
		Id: id,
	}
	var err error

	var retval DeleteBuildResponse
	err = client.MakeRequest(
		ctx,
		"DeleteBuild",
		`
mutation DeleteBuild ($id: uuid!) {
	delete_builds_by_pk(id: $id) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func GetProjectInfoQuery(
	ctx context.Context,
	client graphql.Client,
) (*GetProjectInfoQueryResponse, error) {
	var err error

	var retval GetProjectInfoQueryResponse
	err = client.MakeRequest(
		ctx,
		"GetProjectInfoQuery",
		`
query GetProjectInfoQuery {
	project_access_tokens {
		project {
			organization_id
			id
		}
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

func InsertNewBuildQuery(
	ctx context.Context,
	client graphql.Client,
	project_id uuid.UUID,
	s3_url string,
	git_remote string,
	git_branch string,
	git_hash string,
) (*InsertNewBuildQueryResponse, error) {
	__input := __InsertNewBuildQueryInput{
		Project_id: project_id,
		S3_url:     s3_url,
		Git_remote: git_remote,
		Git_branch: git_branch,
		Git_hash:   git_hash,
	}
	var err error

	var retval InsertNewBuildQueryResponse
	err = client.MakeRequest(
		ctx,
		"InsertNewBuildQuery",
		`
mutation InsertNewBuildQuery ($project_id: uuid, $s3_url: String, $git_remote: String, $git_branch: String, $git_hash: String) {
	insert_builds_one(object: {project_id:$project_id,s3_url:$s3_url,git_remote:$git_remote,git_branch:$git_branch,git_hash:$git_hash}) {
		id
		agent_access_token
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func MyMutation(
	ctx context.Context,
	client graphql.Client,
	object *Builds_insert_input,
) (*MyMutationResponse, error) {
	__input := __MyMutationInput{
		Object: object,
	}
	var err error

	var retval MyMutationResponse
	err = client.MakeRequest(
		ctx,
		"MyMutation",
		`
mutation MyMutation ($object: builds_insert_input!) {
	insert_builds_one(object: $object) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func PresignSbom(
	ctx context.Context,
	client graphql.Client,
	orgId uuid.UUID,
	buildId uuid.UUID,
) (*PresignSbomResponse, error) {
	__input := __PresignSbomInput{
		OrgId:   orgId,
		BuildId: buildId,
	}
	var err error

	var retval PresignSbomResponse
	err = client.MakeRequest(
		ctx,
		"PresignSbom",
		`
query PresignSbom ($orgId: uuid!, $buildId: uuid!) {
	presignSbomUpload(orgId: $orgId, buildId: $buildId) {
		uploadUrl {
			url
			headers
		}
		error
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func SetBuildS3Url(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	s3_url string,
) (*SetBuildS3UrlResponse, error) {
	__input := __SetBuildS3UrlInput{
		Id:     id,
		S3_url: s3_url,
	}
	var err error

	var retval SetBuildS3UrlResponse
	err = client.MakeRequest(
		ctx,
		"SetBuildS3Url",
		`
mutation SetBuildS3Url ($id: uuid!, $s3_url: String!) {
	update_builds_by_pk(pk_columns: {id:$id}, _set: {s3_url:$s3_url}) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
