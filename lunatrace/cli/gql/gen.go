// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
	"github.com/lunasec-io/lunasec/lunatrace/cli/gql/types"
)

// DeleteBuildDelete_builds_by_pkBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type DeleteBuildDelete_builds_by_pkBuilds struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeleteBuildDelete_builds_by_pkBuilds.Id, and is useful for accessing the field via an interface.
func (v *DeleteBuildDelete_builds_by_pkBuilds) GetId() uuid.UUID { return v.Id }

// DeleteBuildResponse is returned by DeleteBuild on success.
type DeleteBuildResponse struct {
	// delete single row from the table: "builds"
	Delete_builds_by_pk *DeleteBuildDelete_builds_by_pkBuilds `json:"delete_builds_by_pk"`
}

// GetDelete_builds_by_pk returns DeleteBuildResponse.Delete_builds_by_pk, and is useful for accessing the field via an interface.
func (v *DeleteBuildResponse) GetDelete_builds_by_pk() *DeleteBuildDelete_builds_by_pkBuilds {
	return v.Delete_builds_by_pk
}

// GetProjectInfoQueryProject_access_tokens includes the requested fields of the GraphQL type project_access_tokens.
// The GraphQL type's documentation follows.
//
// columns and relationships of "project_access_tokens"
type GetProjectInfoQueryProject_access_tokens struct {
	// An object relationship
	Project *GetProjectInfoQueryProject_access_tokensProjectProjects `json:"project"`
}

// GetProject returns GetProjectInfoQueryProject_access_tokens.Project, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokens) GetProject() *GetProjectInfoQueryProject_access_tokensProjectProjects {
	return v.Project
}

// GetProjectInfoQueryProject_access_tokensProjectProjects includes the requested fields of the GraphQL type projects.
// The GraphQL type's documentation follows.
//
// columns and relationships of "projects"
type GetProjectInfoQueryProject_access_tokensProjectProjects struct {
	Organization_id *uuid.UUID `json:"organization_id"`
	Id              uuid.UUID  `json:"id"`
}

// GetOrganization_id returns GetProjectInfoQueryProject_access_tokensProjectProjects.Organization_id, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokensProjectProjects) GetOrganization_id() *uuid.UUID {
	return v.Organization_id
}

// GetId returns GetProjectInfoQueryProject_access_tokensProjectProjects.Id, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryProject_access_tokensProjectProjects) GetId() uuid.UUID { return v.Id }

// GetProjectInfoQueryResponse is returned by GetProjectInfoQuery on success.
type GetProjectInfoQueryResponse struct {
	// An array relationship
	Project_access_tokens []*GetProjectInfoQueryProject_access_tokens `json:"project_access_tokens"`
}

// GetProject_access_tokens returns GetProjectInfoQueryResponse.Project_access_tokens, and is useful for accessing the field via an interface.
func (v *GetProjectInfoQueryResponse) GetProject_access_tokens() []*GetProjectInfoQueryProject_access_tokens {
	return v.Project_access_tokens
}

// InsertNewBuildQueryInsert_builds_oneBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type InsertNewBuildQueryInsert_builds_oneBuilds struct {
	Id                 uuid.UUID `json:"id"`
	Agent_access_token uuid.UUID `json:"agent_access_token"`
}

// GetId returns InsertNewBuildQueryInsert_builds_oneBuilds.Id, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryInsert_builds_oneBuilds) GetId() uuid.UUID { return v.Id }

// GetAgent_access_token returns InsertNewBuildQueryInsert_builds_oneBuilds.Agent_access_token, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryInsert_builds_oneBuilds) GetAgent_access_token() uuid.UUID {
	return v.Agent_access_token
}

// InsertNewBuildQueryResponse is returned by InsertNewBuildQuery on success.
type InsertNewBuildQueryResponse struct {
	// insert a single row into the table: "builds"
	Insert_builds_one *InsertNewBuildQueryInsert_builds_oneBuilds `json:"insert_builds_one"`
}

// GetInsert_builds_one returns InsertNewBuildQueryResponse.Insert_builds_one, and is useful for accessing the field via an interface.
func (v *InsertNewBuildQueryResponse) GetInsert_builds_one() *InsertNewBuildQueryInsert_builds_oneBuilds {
	return v.Insert_builds_one
}

type Jsonb_cast_exp struct {
	String *String_comparison_exp `json:"String,omitempty"`
}

// GetString returns Jsonb_cast_exp.String, and is useful for accessing the field via an interface.
func (v *Jsonb_cast_exp) GetString() *String_comparison_exp { return v.String }

// Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
type Jsonb_comparison_exp struct {
	Cast *Jsonb_cast_exp `json:"_cast,omitempty"`
	// is the column contained in the given json value
	Contained_in *json.RawMessage `json:"_contained_in,omitempty"`
	// does the column contain the given json value at the top level
	Contains *json.RawMessage `json:"_contains,omitempty"`
	Eq       *json.RawMessage `json:"_eq,omitempty"`
	Gt       *json.RawMessage `json:"_gt,omitempty"`
	Gte      *json.RawMessage `json:"_gte,omitempty"`
	// does the string exist as a top-level key in the column
	Has_key *string `json:"_has_key,omitempty"`
	// do all of these strings exist as top-level keys in the column
	Has_keys_all []string `json:"_has_keys_all,omitempty"`
	// do any of these strings exist as top-level keys in the column
	Has_keys_any []string          `json:"_has_keys_any,omitempty"`
	In           []json.RawMessage `json:"_in,omitempty"`
	Is_null      *bool             `json:"_is_null,omitempty"`
	Lt           *json.RawMessage  `json:"_lt,omitempty"`
	Lte          *json.RawMessage  `json:"_lte,omitempty"`
	Neq          *json.RawMessage  `json:"_neq,omitempty"`
	Nin          []json.RawMessage `json:"_nin,omitempty"`
}

// GetCast returns Jsonb_comparison_exp.Cast, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetCast() *Jsonb_cast_exp { return v.Cast }

// GetContained_in returns Jsonb_comparison_exp.Contained_in, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetContained_in() *json.RawMessage { return v.Contained_in }

// GetContains returns Jsonb_comparison_exp.Contains, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetContains() *json.RawMessage { return v.Contains }

// GetEq returns Jsonb_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetEq() *json.RawMessage { return v.Eq }

// GetGt returns Jsonb_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetGt() *json.RawMessage { return v.Gt }

// GetGte returns Jsonb_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetGte() *json.RawMessage { return v.Gte }

// GetHas_key returns Jsonb_comparison_exp.Has_key, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_key() *string { return v.Has_key }

// GetHas_keys_all returns Jsonb_comparison_exp.Has_keys_all, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_keys_all() []string { return v.Has_keys_all }

// GetHas_keys_any returns Jsonb_comparison_exp.Has_keys_any, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetHas_keys_any() []string { return v.Has_keys_any }

// GetIn returns Jsonb_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetIn() []json.RawMessage { return v.In }

// GetIs_null returns Jsonb_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLt returns Jsonb_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetLt() *json.RawMessage { return v.Lt }

// GetLte returns Jsonb_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetLte() *json.RawMessage { return v.Lte }

// GetNeq returns Jsonb_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetNeq() *json.RawMessage { return v.Neq }

// GetNin returns Jsonb_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Jsonb_comparison_exp) GetNin() []json.RawMessage { return v.Nin }

// Boolean expression to compare columns of type "license_source". All fields are combined with logical 'AND'.
type License_source_comparison_exp struct {
	Eq      *types.LicenseSource  `json:"_eq,omitempty"`
	Gt      *types.LicenseSource  `json:"_gt,omitempty"`
	Gte     *types.LicenseSource  `json:"_gte,omitempty"`
	In      []types.LicenseSource `json:"_in,omitempty"`
	Is_null *bool                 `json:"_is_null,omitempty"`
	Lt      *types.LicenseSource  `json:"_lt,omitempty"`
	Lte     *types.LicenseSource  `json:"_lte,omitempty"`
	Neq     *types.LicenseSource  `json:"_neq,omitempty"`
	Nin     []types.LicenseSource `json:"_nin,omitempty"`
}

// GetEq returns License_source_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetEq() *types.LicenseSource { return v.Eq }

// GetGt returns License_source_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetGt() *types.LicenseSource { return v.Gt }

// GetGte returns License_source_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetGte() *types.LicenseSource { return v.Gte }

// GetIn returns License_source_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetIn() []types.LicenseSource { return v.In }

// GetIs_null returns License_source_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLt returns License_source_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetLt() *types.LicenseSource { return v.Lt }

// GetLte returns License_source_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetLte() *types.LicenseSource { return v.Lte }

// GetNeq returns License_source_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetNeq() *types.LicenseSource { return v.Neq }

// GetNin returns License_source_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *License_source_comparison_exp) GetNin() []types.LicenseSource { return v.Nin }

// Boolean expression to filter rows from the table "package.package". All fields are combined with a logical 'AND'.
type Package_bool_exp struct {
	And                 []*Package_bool_exp                  `json:"_and,omitempty"`
	Not                 *Package_bool_exp                    `json:"_not,omitempty"`
	Or                  []*Package_bool_exp                  `json:"_or,omitempty"`
	Custom_registry     *String_comparison_exp               `json:"custom_registry,omitempty"`
	Description         *String_comparison_exp               `json:"description,omitempty"`
	Fetched_time        *Timestamptz_comparison_exp          `json:"fetched_time,omitempty"`
	Id                  *Uuid_comparison_exp                 `json:"id,omitempty"`
	Name                *String_comparison_exp               `json:"name,omitempty"`
	Package_maintainers *Package_package_maintainer_bool_exp `json:"package_maintainers,omitempty"`
	Package_manager     *Package_manager_comparison_exp      `json:"package_manager,omitempty"`
	Releases            *Package_release_bool_exp            `json:"releases,omitempty"`
}

// GetAnd returns Package_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetAnd() []*Package_bool_exp { return v.And }

// GetNot returns Package_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetNot() *Package_bool_exp { return v.Not }

// GetOr returns Package_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetOr() []*Package_bool_exp { return v.Or }

// GetCustom_registry returns Package_bool_exp.Custom_registry, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetCustom_registry() *String_comparison_exp { return v.Custom_registry }

// GetDescription returns Package_bool_exp.Description, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetDescription() *String_comparison_exp { return v.Description }

// GetFetched_time returns Package_bool_exp.Fetched_time, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetFetched_time() *Timestamptz_comparison_exp { return v.Fetched_time }

// GetId returns Package_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetName returns Package_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetPackage_maintainers returns Package_bool_exp.Package_maintainers, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetPackage_maintainers() *Package_package_maintainer_bool_exp {
	return v.Package_maintainers
}

// GetPackage_manager returns Package_bool_exp.Package_manager, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetPackage_manager() *Package_manager_comparison_exp {
	return v.Package_manager
}

// GetReleases returns Package_bool_exp.Releases, and is useful for accessing the field via an interface.
func (v *Package_bool_exp) GetReleases() *Package_release_bool_exp { return v.Releases }

// unique or primary key constraints on table "package.package"
type Package_constraint string

const (
	// unique or primary key constraint
	Package_constraintPackagePackageManagerCustomRegistryNameIdx Package_constraint = "package_package_manager_custom_registry_name_idx"
	// unique or primary key constraint
	Package_constraintPackagePkey Package_constraint = "package_pkey"
)

// input type for inserting data into table "package.package"
type Package_insert_input struct {
	Custom_registry     *string                                          `json:"custom_registry,omitempty"`
	Description         *string                                          `json:"description,omitempty"`
	Fetched_time        *time.Time                                       `json:"fetched_time,omitempty"`
	Id                  *uuid.UUID                                       `json:"id,omitempty"`
	Name                *string                                          `json:"name,omitempty"`
	Package_maintainers *Package_package_maintainer_arr_rel_insert_input `json:"package_maintainers,omitempty"`
	Package_manager     *types.PackageManager                            `json:"package_manager,omitempty"`
	Releases            *Package_release_arr_rel_insert_input            `json:"releases,omitempty"`
}

// GetCustom_registry returns Package_insert_input.Custom_registry, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetCustom_registry() *string { return v.Custom_registry }

// GetDescription returns Package_insert_input.Description, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetDescription() *string { return v.Description }

// GetFetched_time returns Package_insert_input.Fetched_time, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetFetched_time() *time.Time { return v.Fetched_time }

// GetId returns Package_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetId() *uuid.UUID { return v.Id }

// GetName returns Package_insert_input.Name, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetName() *string { return v.Name }

// GetPackage_maintainers returns Package_insert_input.Package_maintainers, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetPackage_maintainers() *Package_package_maintainer_arr_rel_insert_input {
	return v.Package_maintainers
}

// GetPackage_manager returns Package_insert_input.Package_manager, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetPackage_manager() *types.PackageManager { return v.Package_manager }

// GetReleases returns Package_insert_input.Releases, and is useful for accessing the field via an interface.
func (v *Package_insert_input) GetReleases() *Package_release_arr_rel_insert_input { return v.Releases }

// Boolean expression to filter rows from the table "package.license". All fields are combined with a logical 'AND'.
type Package_license_bool_exp struct {
	And              []*Package_license_bool_exp       `json:"_and,omitempty"`
	Not              *Package_license_bool_exp         `json:"_not,omitempty"`
	Or               []*Package_license_bool_exp       `json:"_or,omitempty"`
	Id               *Uuid_comparison_exp              `json:"id,omitempty"`
	Name             *String_comparison_exp            `json:"name,omitempty"`
	Release_licenses *Package_release_license_bool_exp `json:"release_licenses,omitempty"`
}

// GetAnd returns Package_license_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetAnd() []*Package_license_bool_exp { return v.And }

// GetNot returns Package_license_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetNot() *Package_license_bool_exp { return v.Not }

// GetOr returns Package_license_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetOr() []*Package_license_bool_exp { return v.Or }

// GetId returns Package_license_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetName returns Package_license_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetRelease_licenses returns Package_license_bool_exp.Release_licenses, and is useful for accessing the field via an interface.
func (v *Package_license_bool_exp) GetRelease_licenses() *Package_release_license_bool_exp {
	return v.Release_licenses
}

// unique or primary key constraints on table "package.license"
type Package_license_constraint string

const (
	// unique or primary key constraint
	Package_license_constraintLicenseNameIdx Package_license_constraint = "license_name_idx"
	// unique or primary key constraint
	Package_license_constraintLicensePkey Package_license_constraint = "license_pkey"
)

// input type for inserting data into table "package.license"
type Package_license_insert_input struct {
	Id               *uuid.UUID                                    `json:"id,omitempty"`
	Name             *string                                       `json:"name,omitempty"`
	Release_licenses *Package_release_license_arr_rel_insert_input `json:"release_licenses,omitempty"`
}

// GetId returns Package_license_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_license_insert_input) GetId() *uuid.UUID { return v.Id }

// GetName returns Package_license_insert_input.Name, and is useful for accessing the field via an interface.
func (v *Package_license_insert_input) GetName() *string { return v.Name }

// GetRelease_licenses returns Package_license_insert_input.Release_licenses, and is useful for accessing the field via an interface.
func (v *Package_license_insert_input) GetRelease_licenses() *Package_release_license_arr_rel_insert_input {
	return v.Release_licenses
}

// input type for inserting object relation for remote table "package.license"
type Package_license_obj_rel_insert_input struct {
	Data *Package_license_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_license_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_license_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_license_obj_rel_insert_input) GetData() *Package_license_insert_input { return v.Data }

// GetOn_conflict returns Package_license_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_license_obj_rel_insert_input) GetOn_conflict() *Package_license_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "package.license"
type Package_license_on_conflict struct {
	Constraint     Package_license_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_license_update_column `json:"update_columns,omitempty"`
	Where          *Package_license_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_license_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_license_on_conflict) GetConstraint() Package_license_constraint { return v.Constraint }

// GetUpdate_columns returns Package_license_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_license_on_conflict) GetUpdate_columns() []Package_license_update_column {
	return v.Update_columns
}

// GetWhere returns Package_license_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_license_on_conflict) GetWhere() *Package_license_bool_exp { return v.Where }

// update columns of table "package.license"
type Package_license_update_column string

const (
	// column name
	Package_license_update_columnId Package_license_update_column = "id"
	// column name
	Package_license_update_columnName Package_license_update_column = "name"
)

// Boolean expression to filter rows from the table "package.maintainer". All fields are combined with a logical 'AND'.
type Package_maintainer_bool_exp struct {
	And                 []*Package_maintainer_bool_exp       `json:"_and,omitempty"`
	Not                 *Package_maintainer_bool_exp         `json:"_not,omitempty"`
	Or                  []*Package_maintainer_bool_exp       `json:"_or,omitempty"`
	Email               *String_comparison_exp               `json:"email,omitempty"`
	Id                  *Uuid_comparison_exp                 `json:"id,omitempty"`
	Name                *String_comparison_exp               `json:"name,omitempty"`
	Package_maintainers *Package_package_maintainer_bool_exp `json:"package_maintainers,omitempty"`
	Package_manager     *Package_manager_comparison_exp      `json:"package_manager,omitempty"`
	Published_releases  *Package_release_bool_exp            `json:"published_releases,omitempty"`
}

// GetAnd returns Package_maintainer_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetAnd() []*Package_maintainer_bool_exp { return v.And }

// GetNot returns Package_maintainer_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetNot() *Package_maintainer_bool_exp { return v.Not }

// GetOr returns Package_maintainer_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetOr() []*Package_maintainer_bool_exp { return v.Or }

// GetEmail returns Package_maintainer_bool_exp.Email, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetEmail() *String_comparison_exp { return v.Email }

// GetId returns Package_maintainer_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetName returns Package_maintainer_bool_exp.Name, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetName() *String_comparison_exp { return v.Name }

// GetPackage_maintainers returns Package_maintainer_bool_exp.Package_maintainers, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetPackage_maintainers() *Package_package_maintainer_bool_exp {
	return v.Package_maintainers
}

// GetPackage_manager returns Package_maintainer_bool_exp.Package_manager, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetPackage_manager() *Package_manager_comparison_exp {
	return v.Package_manager
}

// GetPublished_releases returns Package_maintainer_bool_exp.Published_releases, and is useful for accessing the field via an interface.
func (v *Package_maintainer_bool_exp) GetPublished_releases() *Package_release_bool_exp {
	return v.Published_releases
}

// unique or primary key constraints on table "package.maintainer"
type Package_maintainer_constraint string

const (
	// unique or primary key constraint
	Package_maintainer_constraintMaintainerPackageManagerEmailIdx Package_maintainer_constraint = "maintainer_package_manager_email_idx"
	// unique or primary key constraint
	Package_maintainer_constraintMaintainerPkey Package_maintainer_constraint = "maintainer_pkey"
)

// input type for inserting data into table "package.maintainer"
type Package_maintainer_insert_input struct {
	Email               *string                                          `json:"email,omitempty"`
	Id                  *uuid.UUID                                       `json:"id,omitempty"`
	Name                *string                                          `json:"name,omitempty"`
	Package_maintainers *Package_package_maintainer_arr_rel_insert_input `json:"package_maintainers,omitempty"`
	Package_manager     *types.PackageManager                            `json:"package_manager,omitempty"`
	Published_releases  *Package_release_arr_rel_insert_input            `json:"published_releases,omitempty"`
}

// GetEmail returns Package_maintainer_insert_input.Email, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetEmail() *string { return v.Email }

// GetId returns Package_maintainer_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetId() *uuid.UUID { return v.Id }

// GetName returns Package_maintainer_insert_input.Name, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetName() *string { return v.Name }

// GetPackage_maintainers returns Package_maintainer_insert_input.Package_maintainers, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetPackage_maintainers() *Package_package_maintainer_arr_rel_insert_input {
	return v.Package_maintainers
}

// GetPackage_manager returns Package_maintainer_insert_input.Package_manager, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetPackage_manager() *types.PackageManager {
	return v.Package_manager
}

// GetPublished_releases returns Package_maintainer_insert_input.Published_releases, and is useful for accessing the field via an interface.
func (v *Package_maintainer_insert_input) GetPublished_releases() *Package_release_arr_rel_insert_input {
	return v.Published_releases
}

// input type for inserting object relation for remote table "package.maintainer"
type Package_maintainer_obj_rel_insert_input struct {
	Data *Package_maintainer_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_maintainer_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_maintainer_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_maintainer_obj_rel_insert_input) GetData() *Package_maintainer_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_maintainer_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_maintainer_obj_rel_insert_input) GetOn_conflict() *Package_maintainer_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "package.maintainer"
type Package_maintainer_on_conflict struct {
	Constraint     Package_maintainer_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_maintainer_update_column `json:"update_columns,omitempty"`
	Where          *Package_maintainer_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_maintainer_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_maintainer_on_conflict) GetConstraint() Package_maintainer_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Package_maintainer_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_maintainer_on_conflict) GetUpdate_columns() []Package_maintainer_update_column {
	return v.Update_columns
}

// GetWhere returns Package_maintainer_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_maintainer_on_conflict) GetWhere() *Package_maintainer_bool_exp { return v.Where }

// update columns of table "package.maintainer"
type Package_maintainer_update_column string

const (
	// column name
	Package_maintainer_update_columnEmail Package_maintainer_update_column = "email"
	// column name
	Package_maintainer_update_columnId Package_maintainer_update_column = "id"
	// column name
	Package_maintainer_update_columnName Package_maintainer_update_column = "name"
	// column name
	Package_maintainer_update_columnPackageManager Package_maintainer_update_column = "package_manager"
)

// Boolean expression to compare columns of type "package_manager". All fields are combined with logical 'AND'.
type Package_manager_comparison_exp struct {
	Eq      *types.PackageManager  `json:"_eq,omitempty"`
	Gt      *types.PackageManager  `json:"_gt,omitempty"`
	Gte     *types.PackageManager  `json:"_gte,omitempty"`
	In      []types.PackageManager `json:"_in,omitempty"`
	Is_null *bool                  `json:"_is_null,omitempty"`
	Lt      *types.PackageManager  `json:"_lt,omitempty"`
	Lte     *types.PackageManager  `json:"_lte,omitempty"`
	Neq     *types.PackageManager  `json:"_neq,omitempty"`
	Nin     []types.PackageManager `json:"_nin,omitempty"`
}

// GetEq returns Package_manager_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetEq() *types.PackageManager { return v.Eq }

// GetGt returns Package_manager_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetGt() *types.PackageManager { return v.Gt }

// GetGte returns Package_manager_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetGte() *types.PackageManager { return v.Gte }

// GetIn returns Package_manager_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetIn() []types.PackageManager { return v.In }

// GetIs_null returns Package_manager_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLt returns Package_manager_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetLt() *types.PackageManager { return v.Lt }

// GetLte returns Package_manager_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetLte() *types.PackageManager { return v.Lte }

// GetNeq returns Package_manager_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetNeq() *types.PackageManager { return v.Neq }

// GetNin returns Package_manager_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Package_manager_comparison_exp) GetNin() []types.PackageManager { return v.Nin }

// input type for inserting object relation for remote table "package.package"
type Package_obj_rel_insert_input struct {
	Data *Package_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_obj_rel_insert_input) GetData() *Package_insert_input { return v.Data }

// GetOn_conflict returns Package_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_obj_rel_insert_input) GetOn_conflict() *Package_on_conflict { return v.On_conflict }

// on_conflict condition type for table "package.package"
type Package_on_conflict struct {
	Constraint     Package_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_update_column `json:"update_columns,omitempty"`
	Where          *Package_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_on_conflict) GetConstraint() Package_constraint { return v.Constraint }

// GetUpdate_columns returns Package_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_on_conflict) GetUpdate_columns() []Package_update_column { return v.Update_columns }

// GetWhere returns Package_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_on_conflict) GetWhere() *Package_bool_exp { return v.Where }

// input type for inserting array relation for remote table "package.package_maintainer"
type Package_package_maintainer_arr_rel_insert_input struct {
	Data []*Package_package_maintainer_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_package_maintainer_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_package_maintainer_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_arr_rel_insert_input) GetData() []*Package_package_maintainer_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_package_maintainer_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_arr_rel_insert_input) GetOn_conflict() *Package_package_maintainer_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "package.package_maintainer". All fields are combined with a logical 'AND'.
type Package_package_maintainer_bool_exp struct {
	And           []*Package_package_maintainer_bool_exp `json:"_and,omitempty"`
	Not           *Package_package_maintainer_bool_exp   `json:"_not,omitempty"`
	Or            []*Package_package_maintainer_bool_exp `json:"_or,omitempty"`
	Maintainer    *Package_maintainer_bool_exp           `json:"maintainer,omitempty"`
	Maintainer_id *Uuid_comparison_exp                   `json:"maintainer_id,omitempty"`
	Package       *Package_bool_exp                      `json:"package,omitempty"`
	Package_id    *Uuid_comparison_exp                   `json:"package_id,omitempty"`
}

// GetAnd returns Package_package_maintainer_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetAnd() []*Package_package_maintainer_bool_exp {
	return v.And
}

// GetNot returns Package_package_maintainer_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetNot() *Package_package_maintainer_bool_exp {
	return v.Not
}

// GetOr returns Package_package_maintainer_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetOr() []*Package_package_maintainer_bool_exp {
	return v.Or
}

// GetMaintainer returns Package_package_maintainer_bool_exp.Maintainer, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetMaintainer() *Package_maintainer_bool_exp {
	return v.Maintainer
}

// GetMaintainer_id returns Package_package_maintainer_bool_exp.Maintainer_id, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetMaintainer_id() *Uuid_comparison_exp {
	return v.Maintainer_id
}

// GetPackage returns Package_package_maintainer_bool_exp.Package, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetPackage() *Package_bool_exp { return v.Package }

// GetPackage_id returns Package_package_maintainer_bool_exp.Package_id, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_bool_exp) GetPackage_id() *Uuid_comparison_exp {
	return v.Package_id
}

// unique or primary key constraints on table "package.package_maintainer"
type Package_package_maintainer_constraint string

const (
	// unique or primary key constraint
	Package_package_maintainer_constraintPackageMaintainerPackageIdMaintainerIdIdx Package_package_maintainer_constraint = "package_maintainer_package_id_maintainer_id_idx"
)

// input type for inserting data into table "package.package_maintainer"
type Package_package_maintainer_insert_input struct {
	Maintainer    *Package_maintainer_obj_rel_insert_input `json:"maintainer,omitempty"`
	Maintainer_id *uuid.UUID                               `json:"maintainer_id,omitempty"`
	Package       *Package_obj_rel_insert_input            `json:"package,omitempty"`
	Package_id    *uuid.UUID                               `json:"package_id,omitempty"`
}

// GetMaintainer returns Package_package_maintainer_insert_input.Maintainer, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_insert_input) GetMaintainer() *Package_maintainer_obj_rel_insert_input {
	return v.Maintainer
}

// GetMaintainer_id returns Package_package_maintainer_insert_input.Maintainer_id, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_insert_input) GetMaintainer_id() *uuid.UUID {
	return v.Maintainer_id
}

// GetPackage returns Package_package_maintainer_insert_input.Package, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_insert_input) GetPackage() *Package_obj_rel_insert_input {
	return v.Package
}

// GetPackage_id returns Package_package_maintainer_insert_input.Package_id, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_insert_input) GetPackage_id() *uuid.UUID { return v.Package_id }

// on_conflict condition type for table "package.package_maintainer"
type Package_package_maintainer_on_conflict struct {
	Constraint     Package_package_maintainer_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_package_maintainer_update_column `json:"update_columns,omitempty"`
	Where          *Package_package_maintainer_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_package_maintainer_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_on_conflict) GetConstraint() Package_package_maintainer_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Package_package_maintainer_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_on_conflict) GetUpdate_columns() []Package_package_maintainer_update_column {
	return v.Update_columns
}

// GetWhere returns Package_package_maintainer_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_package_maintainer_on_conflict) GetWhere() *Package_package_maintainer_bool_exp {
	return v.Where
}

// update columns of table "package.package_maintainer"
type Package_package_maintainer_update_column string

const (
	// column name
	Package_package_maintainer_update_columnMaintainerId Package_package_maintainer_update_column = "maintainer_id"
	// column name
	Package_package_maintainer_update_columnPackageId Package_package_maintainer_update_column = "package_id"
)

// input type for inserting array relation for remote table "package.release"
type Package_release_arr_rel_insert_input struct {
	Data []*Package_release_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_release_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_release_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_release_arr_rel_insert_input) GetData() []*Package_release_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_release_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_release_arr_rel_insert_input) GetOn_conflict() *Package_release_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "package.release". All fields are combined with a logical 'AND'.
type Package_release_bool_exp struct {
	And                      []*Package_release_bool_exp          `json:"_and,omitempty"`
	Not                      *Package_release_bool_exp            `json:"_not,omitempty"`
	Or                       []*Package_release_bool_exp          `json:"_or,omitempty"`
	Blob_hash                *String_comparison_exp               `json:"blob_hash,omitempty"`
	Fetched_time             *Timestamptz_comparison_exp          `json:"fetched_time,omitempty"`
	Id                       *Uuid_comparison_exp                 `json:"id,omitempty"`
	Mirrored_blob_url        *String_comparison_exp               `json:"mirrored_blob_url,omitempty"`
	Observed_time            *Timestamptz_comparison_exp          `json:"observed_time,omitempty"`
	Package                  *Package_bool_exp                    `json:"package,omitempty"`
	Package_id               *Uuid_comparison_exp                 `json:"package_id,omitempty"`
	Publishing_maintainer    *Package_maintainer_bool_exp         `json:"publishing_maintainer,omitempty"`
	Publishing_maintainer_id *Uuid_comparison_exp                 `json:"publishing_maintainer_id,omitempty"`
	Release_dependencies     *Package_release_dependency_bool_exp `json:"release_dependencies,omitempty"`
	Release_dependents       *Package_release_dependency_bool_exp `json:"release_dependents,omitempty"`
	Release_licenses         *Package_release_license_bool_exp    `json:"release_licenses,omitempty"`
	Release_time             *Timestamptz_comparison_exp          `json:"release_time,omitempty"`
	Upstream_blob_url        *String_comparison_exp               `json:"upstream_blob_url,omitempty"`
	Upstream_data            *Jsonb_comparison_exp                `json:"upstream_data,omitempty"`
	Version                  *String_comparison_exp               `json:"version,omitempty"`
}

// GetAnd returns Package_release_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetAnd() []*Package_release_bool_exp { return v.And }

// GetNot returns Package_release_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetNot() *Package_release_bool_exp { return v.Not }

// GetOr returns Package_release_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetOr() []*Package_release_bool_exp { return v.Or }

// GetBlob_hash returns Package_release_bool_exp.Blob_hash, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetBlob_hash() *String_comparison_exp { return v.Blob_hash }

// GetFetched_time returns Package_release_bool_exp.Fetched_time, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetFetched_time() *Timestamptz_comparison_exp {
	return v.Fetched_time
}

// GetId returns Package_release_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetMirrored_blob_url returns Package_release_bool_exp.Mirrored_blob_url, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetMirrored_blob_url() *String_comparison_exp {
	return v.Mirrored_blob_url
}

// GetObserved_time returns Package_release_bool_exp.Observed_time, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetObserved_time() *Timestamptz_comparison_exp {
	return v.Observed_time
}

// GetPackage returns Package_release_bool_exp.Package, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetPackage() *Package_bool_exp { return v.Package }

// GetPackage_id returns Package_release_bool_exp.Package_id, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetPackage_id() *Uuid_comparison_exp { return v.Package_id }

// GetPublishing_maintainer returns Package_release_bool_exp.Publishing_maintainer, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetPublishing_maintainer() *Package_maintainer_bool_exp {
	return v.Publishing_maintainer
}

// GetPublishing_maintainer_id returns Package_release_bool_exp.Publishing_maintainer_id, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetPublishing_maintainer_id() *Uuid_comparison_exp {
	return v.Publishing_maintainer_id
}

// GetRelease_dependencies returns Package_release_bool_exp.Release_dependencies, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetRelease_dependencies() *Package_release_dependency_bool_exp {
	return v.Release_dependencies
}

// GetRelease_dependents returns Package_release_bool_exp.Release_dependents, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetRelease_dependents() *Package_release_dependency_bool_exp {
	return v.Release_dependents
}

// GetRelease_licenses returns Package_release_bool_exp.Release_licenses, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetRelease_licenses() *Package_release_license_bool_exp {
	return v.Release_licenses
}

// GetRelease_time returns Package_release_bool_exp.Release_time, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetRelease_time() *Timestamptz_comparison_exp {
	return v.Release_time
}

// GetUpstream_blob_url returns Package_release_bool_exp.Upstream_blob_url, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetUpstream_blob_url() *String_comparison_exp {
	return v.Upstream_blob_url
}

// GetUpstream_data returns Package_release_bool_exp.Upstream_data, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetUpstream_data() *Jsonb_comparison_exp { return v.Upstream_data }

// GetVersion returns Package_release_bool_exp.Version, and is useful for accessing the field via an interface.
func (v *Package_release_bool_exp) GetVersion() *String_comparison_exp { return v.Version }

// unique or primary key constraints on table "package.release"
type Package_release_constraint string

const (
	// unique or primary key constraint
	Package_release_constraintReleasePackageIdVersionIdx Package_release_constraint = "release_package_id_version_idx"
	// unique or primary key constraint
	Package_release_constraintReleasePkey Package_release_constraint = "release_pkey"
)

// input type for inserting array relation for remote table "package.release_dependency"
type Package_release_dependency_arr_rel_insert_input struct {
	Data []*Package_release_dependency_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_release_dependency_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_release_dependency_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_arr_rel_insert_input) GetData() []*Package_release_dependency_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_release_dependency_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_arr_rel_insert_input) GetOn_conflict() *Package_release_dependency_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "package.release_dependency". All fields are combined with a logical 'AND'.
type Package_release_dependency_bool_exp struct {
	And                   []*Package_release_dependency_bool_exp `json:"_and,omitempty"`
	Not                   *Package_release_dependency_bool_exp   `json:"_not,omitempty"`
	Or                    []*Package_release_dependency_bool_exp `json:"_or,omitempty"`
	Dependency_package    *Package_bool_exp                      `json:"dependency_package,omitempty"`
	Dependency_package_id *Uuid_comparison_exp                   `json:"dependency_package_id,omitempty"`
	Dependency_release    *Package_release_bool_exp              `json:"dependency_release,omitempty"`
	Dependency_release_id *Uuid_comparison_exp                   `json:"dependency_release_id,omitempty"`
	Id                    *Uuid_comparison_exp                   `json:"id,omitempty"`
	Package_name          *String_comparison_exp                 `json:"package_name,omitempty"`
	Package_version_query *String_comparison_exp                 `json:"package_version_query,omitempty"`
	Release               *Package_release_bool_exp              `json:"release,omitempty"`
	Release_id            *Uuid_comparison_exp                   `json:"release_id,omitempty"`
}

// GetAnd returns Package_release_dependency_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetAnd() []*Package_release_dependency_bool_exp {
	return v.And
}

// GetNot returns Package_release_dependency_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetNot() *Package_release_dependency_bool_exp {
	return v.Not
}

// GetOr returns Package_release_dependency_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetOr() []*Package_release_dependency_bool_exp {
	return v.Or
}

// GetDependency_package returns Package_release_dependency_bool_exp.Dependency_package, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetDependency_package() *Package_bool_exp {
	return v.Dependency_package
}

// GetDependency_package_id returns Package_release_dependency_bool_exp.Dependency_package_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetDependency_package_id() *Uuid_comparison_exp {
	return v.Dependency_package_id
}

// GetDependency_release returns Package_release_dependency_bool_exp.Dependency_release, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetDependency_release() *Package_release_bool_exp {
	return v.Dependency_release
}

// GetDependency_release_id returns Package_release_dependency_bool_exp.Dependency_release_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetDependency_release_id() *Uuid_comparison_exp {
	return v.Dependency_release_id
}

// GetId returns Package_release_dependency_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetPackage_name returns Package_release_dependency_bool_exp.Package_name, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetPackage_name() *String_comparison_exp {
	return v.Package_name
}

// GetPackage_version_query returns Package_release_dependency_bool_exp.Package_version_query, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetPackage_version_query() *String_comparison_exp {
	return v.Package_version_query
}

// GetRelease returns Package_release_dependency_bool_exp.Release, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetRelease() *Package_release_bool_exp {
	return v.Release
}

// GetRelease_id returns Package_release_dependency_bool_exp.Release_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_bool_exp) GetRelease_id() *Uuid_comparison_exp {
	return v.Release_id
}

// unique or primary key constraints on table "package.release_dependency"
type Package_release_dependency_constraint string

const (
	// unique or primary key constraint
	Package_release_dependency_constraintReleaseDependencyPkey Package_release_dependency_constraint = "release_dependency_pkey"
	// unique or primary key constraint
	Package_release_dependency_constraintReleaseDependencyReleaseIdPackageNamePackageVersionIdx Package_release_dependency_constraint = "release_dependency_release_id_package_name_package_version__idx"
)

// input type for inserting data into table "package.release_dependency"
type Package_release_dependency_insert_input struct {
	Dependency_package    *Package_obj_rel_insert_input         `json:"dependency_package,omitempty"`
	Dependency_package_id *uuid.UUID                            `json:"dependency_package_id,omitempty"`
	Dependency_release    *Package_release_obj_rel_insert_input `json:"dependency_release,omitempty"`
	Dependency_release_id *uuid.UUID                            `json:"dependency_release_id,omitempty"`
	Id                    *uuid.UUID                            `json:"id,omitempty"`
	Package_name          *string                               `json:"package_name,omitempty"`
	Package_version_query *string                               `json:"package_version_query,omitempty"`
	Release               *Package_release_obj_rel_insert_input `json:"release,omitempty"`
	Release_id            *uuid.UUID                            `json:"release_id,omitempty"`
}

// GetDependency_package returns Package_release_dependency_insert_input.Dependency_package, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetDependency_package() *Package_obj_rel_insert_input {
	return v.Dependency_package
}

// GetDependency_package_id returns Package_release_dependency_insert_input.Dependency_package_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetDependency_package_id() *uuid.UUID {
	return v.Dependency_package_id
}

// GetDependency_release returns Package_release_dependency_insert_input.Dependency_release, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetDependency_release() *Package_release_obj_rel_insert_input {
	return v.Dependency_release
}

// GetDependency_release_id returns Package_release_dependency_insert_input.Dependency_release_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetDependency_release_id() *uuid.UUID {
	return v.Dependency_release_id
}

// GetId returns Package_release_dependency_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetId() *uuid.UUID { return v.Id }

// GetPackage_name returns Package_release_dependency_insert_input.Package_name, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetPackage_name() *string { return v.Package_name }

// GetPackage_version_query returns Package_release_dependency_insert_input.Package_version_query, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetPackage_version_query() *string {
	return v.Package_version_query
}

// GetRelease returns Package_release_dependency_insert_input.Release, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetRelease() *Package_release_obj_rel_insert_input {
	return v.Release
}

// GetRelease_id returns Package_release_dependency_insert_input.Release_id, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_insert_input) GetRelease_id() *uuid.UUID { return v.Release_id }

// on_conflict condition type for table "package.release_dependency"
type Package_release_dependency_on_conflict struct {
	Constraint     Package_release_dependency_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_release_dependency_update_column `json:"update_columns,omitempty"`
	Where          *Package_release_dependency_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_release_dependency_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_on_conflict) GetConstraint() Package_release_dependency_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Package_release_dependency_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_on_conflict) GetUpdate_columns() []Package_release_dependency_update_column {
	return v.Update_columns
}

// GetWhere returns Package_release_dependency_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_release_dependency_on_conflict) GetWhere() *Package_release_dependency_bool_exp {
	return v.Where
}

// update columns of table "package.release_dependency"
type Package_release_dependency_update_column string

const (
	// column name
	Package_release_dependency_update_columnDependencyPackageId Package_release_dependency_update_column = "dependency_package_id"
	// column name
	Package_release_dependency_update_columnDependencyReleaseId Package_release_dependency_update_column = "dependency_release_id"
	// column name
	Package_release_dependency_update_columnId Package_release_dependency_update_column = "id"
	// column name
	Package_release_dependency_update_columnPackageName Package_release_dependency_update_column = "package_name"
	// column name
	Package_release_dependency_update_columnPackageVersionQuery Package_release_dependency_update_column = "package_version_query"
	// column name
	Package_release_dependency_update_columnReleaseId Package_release_dependency_update_column = "release_id"
)

// input type for inserting data into table "package.release"
type Package_release_insert_input struct {
	Blob_hash                *string                                          `json:"blob_hash,omitempty"`
	Fetched_time             *time.Time                                       `json:"fetched_time,omitempty"`
	Id                       *uuid.UUID                                       `json:"id,omitempty"`
	Mirrored_blob_url        *string                                          `json:"mirrored_blob_url,omitempty"`
	Observed_time            *time.Time                                       `json:"observed_time,omitempty"`
	Package                  *Package_obj_rel_insert_input                    `json:"package,omitempty"`
	Package_id               *uuid.UUID                                       `json:"package_id,omitempty"`
	Publishing_maintainer    *Package_maintainer_obj_rel_insert_input         `json:"publishing_maintainer,omitempty"`
	Publishing_maintainer_id *uuid.UUID                                       `json:"publishing_maintainer_id,omitempty"`
	Release_dependencies     *Package_release_dependency_arr_rel_insert_input `json:"release_dependencies,omitempty"`
	Release_dependents       *Package_release_dependency_arr_rel_insert_input `json:"release_dependents,omitempty"`
	Release_licenses         *Package_release_license_arr_rel_insert_input    `json:"release_licenses,omitempty"`
	Release_time             *time.Time                                       `json:"release_time,omitempty"`
	Upstream_blob_url        *string                                          `json:"upstream_blob_url,omitempty"`
	Upstream_data            *json.RawMessage                                 `json:"upstream_data,omitempty"`
	Version                  *string                                          `json:"version,omitempty"`
}

// GetBlob_hash returns Package_release_insert_input.Blob_hash, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetBlob_hash() *string { return v.Blob_hash }

// GetFetched_time returns Package_release_insert_input.Fetched_time, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetFetched_time() *time.Time { return v.Fetched_time }

// GetId returns Package_release_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetId() *uuid.UUID { return v.Id }

// GetMirrored_blob_url returns Package_release_insert_input.Mirrored_blob_url, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetMirrored_blob_url() *string { return v.Mirrored_blob_url }

// GetObserved_time returns Package_release_insert_input.Observed_time, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetObserved_time() *time.Time { return v.Observed_time }

// GetPackage returns Package_release_insert_input.Package, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetPackage() *Package_obj_rel_insert_input { return v.Package }

// GetPackage_id returns Package_release_insert_input.Package_id, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetPackage_id() *uuid.UUID { return v.Package_id }

// GetPublishing_maintainer returns Package_release_insert_input.Publishing_maintainer, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetPublishing_maintainer() *Package_maintainer_obj_rel_insert_input {
	return v.Publishing_maintainer
}

// GetPublishing_maintainer_id returns Package_release_insert_input.Publishing_maintainer_id, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetPublishing_maintainer_id() *uuid.UUID {
	return v.Publishing_maintainer_id
}

// GetRelease_dependencies returns Package_release_insert_input.Release_dependencies, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetRelease_dependencies() *Package_release_dependency_arr_rel_insert_input {
	return v.Release_dependencies
}

// GetRelease_dependents returns Package_release_insert_input.Release_dependents, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetRelease_dependents() *Package_release_dependency_arr_rel_insert_input {
	return v.Release_dependents
}

// GetRelease_licenses returns Package_release_insert_input.Release_licenses, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetRelease_licenses() *Package_release_license_arr_rel_insert_input {
	return v.Release_licenses
}

// GetRelease_time returns Package_release_insert_input.Release_time, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetRelease_time() *time.Time { return v.Release_time }

// GetUpstream_blob_url returns Package_release_insert_input.Upstream_blob_url, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetUpstream_blob_url() *string { return v.Upstream_blob_url }

// GetUpstream_data returns Package_release_insert_input.Upstream_data, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetUpstream_data() *json.RawMessage { return v.Upstream_data }

// GetVersion returns Package_release_insert_input.Version, and is useful for accessing the field via an interface.
func (v *Package_release_insert_input) GetVersion() *string { return v.Version }

// input type for inserting array relation for remote table "package.release_license"
type Package_release_license_arr_rel_insert_input struct {
	Data []*Package_release_license_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_release_license_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_release_license_arr_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_release_license_arr_rel_insert_input) GetData() []*Package_release_license_insert_input {
	return v.Data
}

// GetOn_conflict returns Package_release_license_arr_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_release_license_arr_rel_insert_input) GetOn_conflict() *Package_release_license_on_conflict {
	return v.On_conflict
}

// Boolean expression to filter rows from the table "package.release_license". All fields are combined with a logical 'AND'.
type Package_release_license_bool_exp struct {
	And           []*Package_release_license_bool_exp `json:"_and,omitempty"`
	Not           *Package_release_license_bool_exp   `json:"_not,omitempty"`
	Or            []*Package_release_license_bool_exp `json:"_or,omitempty"`
	Id            *Uuid_comparison_exp                `json:"id,omitempty"`
	License       *Package_license_bool_exp           `json:"license,omitempty"`
	License_id    *Uuid_comparison_exp                `json:"license_id,omitempty"`
	Release_id    *Uuid_comparison_exp                `json:"release_id,omitempty"`
	Scan_metadata *Jsonb_comparison_exp               `json:"scan_metadata,omitempty"`
	Scan_time     *Timestamptz_comparison_exp         `json:"scan_time,omitempty"`
	Source        *License_source_comparison_exp      `json:"source,omitempty"`
}

// GetAnd returns Package_release_license_bool_exp.And, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetAnd() []*Package_release_license_bool_exp { return v.And }

// GetNot returns Package_release_license_bool_exp.Not, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetNot() *Package_release_license_bool_exp { return v.Not }

// GetOr returns Package_release_license_bool_exp.Or, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetOr() []*Package_release_license_bool_exp { return v.Or }

// GetId returns Package_release_license_bool_exp.Id, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetId() *Uuid_comparison_exp { return v.Id }

// GetLicense returns Package_release_license_bool_exp.License, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetLicense() *Package_license_bool_exp { return v.License }

// GetLicense_id returns Package_release_license_bool_exp.License_id, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetLicense_id() *Uuid_comparison_exp { return v.License_id }

// GetRelease_id returns Package_release_license_bool_exp.Release_id, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetRelease_id() *Uuid_comparison_exp { return v.Release_id }

// GetScan_metadata returns Package_release_license_bool_exp.Scan_metadata, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetScan_metadata() *Jsonb_comparison_exp {
	return v.Scan_metadata
}

// GetScan_time returns Package_release_license_bool_exp.Scan_time, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetScan_time() *Timestamptz_comparison_exp {
	return v.Scan_time
}

// GetSource returns Package_release_license_bool_exp.Source, and is useful for accessing the field via an interface.
func (v *Package_release_license_bool_exp) GetSource() *License_source_comparison_exp {
	return v.Source
}

// unique or primary key constraints on table "package.release_license"
type Package_release_license_constraint string

const (
	// unique or primary key constraint
	Package_release_license_constraintReleaseLicensePkey Package_release_license_constraint = "release_license_pkey"
)

// input type for inserting data into table "package.release_license"
type Package_release_license_insert_input struct {
	Id            *uuid.UUID                            `json:"id,omitempty"`
	License       *Package_license_obj_rel_insert_input `json:"license,omitempty"`
	License_id    *uuid.UUID                            `json:"license_id,omitempty"`
	Release_id    *uuid.UUID                            `json:"release_id,omitempty"`
	Scan_metadata *json.RawMessage                      `json:"scan_metadata,omitempty"`
	Scan_time     *time.Time                            `json:"scan_time,omitempty"`
	Source        *types.LicenseSource                  `json:"source,omitempty"`
}

// GetId returns Package_release_license_insert_input.Id, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetId() *uuid.UUID { return v.Id }

// GetLicense returns Package_release_license_insert_input.License, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetLicense() *Package_license_obj_rel_insert_input {
	return v.License
}

// GetLicense_id returns Package_release_license_insert_input.License_id, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetLicense_id() *uuid.UUID { return v.License_id }

// GetRelease_id returns Package_release_license_insert_input.Release_id, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetRelease_id() *uuid.UUID { return v.Release_id }

// GetScan_metadata returns Package_release_license_insert_input.Scan_metadata, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetScan_metadata() *json.RawMessage {
	return v.Scan_metadata
}

// GetScan_time returns Package_release_license_insert_input.Scan_time, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetScan_time() *time.Time { return v.Scan_time }

// GetSource returns Package_release_license_insert_input.Source, and is useful for accessing the field via an interface.
func (v *Package_release_license_insert_input) GetSource() *types.LicenseSource { return v.Source }

// on_conflict condition type for table "package.release_license"
type Package_release_license_on_conflict struct {
	Constraint     Package_release_license_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_release_license_update_column `json:"update_columns,omitempty"`
	Where          *Package_release_license_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_release_license_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_release_license_on_conflict) GetConstraint() Package_release_license_constraint {
	return v.Constraint
}

// GetUpdate_columns returns Package_release_license_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_release_license_on_conflict) GetUpdate_columns() []Package_release_license_update_column {
	return v.Update_columns
}

// GetWhere returns Package_release_license_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_release_license_on_conflict) GetWhere() *Package_release_license_bool_exp {
	return v.Where
}

// update columns of table "package.release_license"
type Package_release_license_update_column string

const (
	// column name
	Package_release_license_update_columnId Package_release_license_update_column = "id"
	// column name
	Package_release_license_update_columnLicenseId Package_release_license_update_column = "license_id"
	// column name
	Package_release_license_update_columnReleaseId Package_release_license_update_column = "release_id"
	// column name
	Package_release_license_update_columnScanMetadata Package_release_license_update_column = "scan_metadata"
	// column name
	Package_release_license_update_columnScanTime Package_release_license_update_column = "scan_time"
	// column name
	Package_release_license_update_columnSource Package_release_license_update_column = "source"
)

// input type for inserting object relation for remote table "package.release"
type Package_release_obj_rel_insert_input struct {
	Data *Package_release_insert_input `json:"data,omitempty"`
	// upsert condition
	On_conflict *Package_release_on_conflict `json:"on_conflict,omitempty"`
}

// GetData returns Package_release_obj_rel_insert_input.Data, and is useful for accessing the field via an interface.
func (v *Package_release_obj_rel_insert_input) GetData() *Package_release_insert_input { return v.Data }

// GetOn_conflict returns Package_release_obj_rel_insert_input.On_conflict, and is useful for accessing the field via an interface.
func (v *Package_release_obj_rel_insert_input) GetOn_conflict() *Package_release_on_conflict {
	return v.On_conflict
}

// on_conflict condition type for table "package.release"
type Package_release_on_conflict struct {
	Constraint     Package_release_constraint      `json:"constraint,omitempty"`
	Update_columns []Package_release_update_column `json:"update_columns,omitempty"`
	Where          *Package_release_bool_exp       `json:"where,omitempty"`
}

// GetConstraint returns Package_release_on_conflict.Constraint, and is useful for accessing the field via an interface.
func (v *Package_release_on_conflict) GetConstraint() Package_release_constraint { return v.Constraint }

// GetUpdate_columns returns Package_release_on_conflict.Update_columns, and is useful for accessing the field via an interface.
func (v *Package_release_on_conflict) GetUpdate_columns() []Package_release_update_column {
	return v.Update_columns
}

// GetWhere returns Package_release_on_conflict.Where, and is useful for accessing the field via an interface.
func (v *Package_release_on_conflict) GetWhere() *Package_release_bool_exp { return v.Where }

// update columns of table "package.release"
type Package_release_update_column string

const (
	// column name
	Package_release_update_columnBlobHash Package_release_update_column = "blob_hash"
	// column name
	Package_release_update_columnFetchedTime Package_release_update_column = "fetched_time"
	// column name
	Package_release_update_columnId Package_release_update_column = "id"
	// column name
	Package_release_update_columnMirroredBlobUrl Package_release_update_column = "mirrored_blob_url"
	// column name
	Package_release_update_columnObservedTime Package_release_update_column = "observed_time"
	// column name
	Package_release_update_columnPackageId Package_release_update_column = "package_id"
	// column name
	Package_release_update_columnPublishingMaintainerId Package_release_update_column = "publishing_maintainer_id"
	// column name
	Package_release_update_columnReleaseTime Package_release_update_column = "release_time"
	// column name
	Package_release_update_columnUpstreamBlobUrl Package_release_update_column = "upstream_blob_url"
	// column name
	Package_release_update_columnUpstreamData Package_release_update_column = "upstream_data"
	// column name
	Package_release_update_columnVersion Package_release_update_column = "version"
)

// update columns of table "package.package"
type Package_update_column string

const (
	// column name
	Package_update_columnCustomRegistry Package_update_column = "custom_registry"
	// column name
	Package_update_columnDescription Package_update_column = "description"
	// column name
	Package_update_columnFetchedTime Package_update_column = "fetched_time"
	// column name
	Package_update_columnId Package_update_column = "id"
	// column name
	Package_update_columnName Package_update_column = "name"
	// column name
	Package_update_columnPackageManager Package_update_column = "package_manager"
)

// SetBuildS3UrlResponse is returned by SetBuildS3Url on success.
type SetBuildS3UrlResponse struct {
	// update single row of the table: "builds"
	Update_builds_by_pk *SetBuildS3UrlUpdate_builds_by_pkBuilds `json:"update_builds_by_pk"`
}

// GetUpdate_builds_by_pk returns SetBuildS3UrlResponse.Update_builds_by_pk, and is useful for accessing the field via an interface.
func (v *SetBuildS3UrlResponse) GetUpdate_builds_by_pk() *SetBuildS3UrlUpdate_builds_by_pkBuilds {
	return v.Update_builds_by_pk
}

// SetBuildS3UrlUpdate_builds_by_pkBuilds includes the requested fields of the GraphQL type builds.
// The GraphQL type's documentation follows.
//
// columns and relationships of "builds"
type SetBuildS3UrlUpdate_builds_by_pkBuilds struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns SetBuildS3UrlUpdate_builds_by_pkBuilds.Id, and is useful for accessing the field via an interface.
func (v *SetBuildS3UrlUpdate_builds_by_pkBuilds) GetId() uuid.UUID { return v.Id }

// Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
type String_comparison_exp struct {
	Eq  *string `json:"_eq,omitempty"`
	Gt  *string `json:"_gt,omitempty"`
	Gte *string `json:"_gte,omitempty"`
	// does the column match the given case-insensitive pattern
	Ilike *string  `json:"_ilike,omitempty"`
	In    []string `json:"_in,omitempty"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex  *string `json:"_iregex,omitempty"`
	Is_null *bool   `json:"_is_null,omitempty"`
	// does the column match the given pattern
	Like *string `json:"_like,omitempty"`
	Lt   *string `json:"_lt,omitempty"`
	Lte  *string `json:"_lte,omitempty"`
	Neq  *string `json:"_neq,omitempty"`
	// does the column NOT match the given case-insensitive pattern
	Nilike *string  `json:"_nilike,omitempty"`
	Nin    []string `json:"_nin,omitempty"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex *string `json:"_niregex,omitempty"`
	// does the column NOT match the given pattern
	Nlike *string `json:"_nlike,omitempty"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex *string `json:"_nregex,omitempty"`
	// does the column NOT match the given SQL regular expression
	Nsimilar *string `json:"_nsimilar,omitempty"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex *string `json:"_regex,omitempty"`
	// does the column match the given SQL regular expression
	Similar *string `json:"_similar,omitempty"`
}

// GetEq returns String_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetEq() *string { return v.Eq }

// GetGt returns String_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGt() *string { return v.Gt }

// GetGte returns String_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetGte() *string { return v.Gte }

// GetIlike returns String_comparison_exp.Ilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIlike() *string { return v.Ilike }

// GetIn returns String_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIn() []string { return v.In }

// GetIregex returns String_comparison_exp.Iregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIregex() *string { return v.Iregex }

// GetIs_null returns String_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLike returns String_comparison_exp.Like, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLike() *string { return v.Like }

// GetLt returns String_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLt() *string { return v.Lt }

// GetLte returns String_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetLte() *string { return v.Lte }

// GetNeq returns String_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNeq() *string { return v.Neq }

// GetNilike returns String_comparison_exp.Nilike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNilike() *string { return v.Nilike }

// GetNin returns String_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNin() []string { return v.Nin }

// GetNiregex returns String_comparison_exp.Niregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNiregex() *string { return v.Niregex }

// GetNlike returns String_comparison_exp.Nlike, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNlike() *string { return v.Nlike }

// GetNregex returns String_comparison_exp.Nregex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNregex() *string { return v.Nregex }

// GetNsimilar returns String_comparison_exp.Nsimilar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetNsimilar() *string { return v.Nsimilar }

// GetRegex returns String_comparison_exp.Regex, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetRegex() *string { return v.Regex }

// GetSimilar returns String_comparison_exp.Similar, and is useful for accessing the field via an interface.
func (v *String_comparison_exp) GetSimilar() *string { return v.Similar }

// Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
type Timestamptz_comparison_exp struct {
	Eq      *time.Time  `json:"_eq,omitempty"`
	Gt      *time.Time  `json:"_gt,omitempty"`
	Gte     *time.Time  `json:"_gte,omitempty"`
	In      []time.Time `json:"_in,omitempty"`
	Is_null *bool       `json:"_is_null,omitempty"`
	Lt      *time.Time  `json:"_lt,omitempty"`
	Lte     *time.Time  `json:"_lte,omitempty"`
	Neq     *time.Time  `json:"_neq,omitempty"`
	Nin     []time.Time `json:"_nin,omitempty"`
}

// GetEq returns Timestamptz_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetEq() *time.Time { return v.Eq }

// GetGt returns Timestamptz_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetGt() *time.Time { return v.Gt }

// GetGte returns Timestamptz_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetGte() *time.Time { return v.Gte }

// GetIn returns Timestamptz_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetIn() []time.Time { return v.In }

// GetIs_null returns Timestamptz_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLt returns Timestamptz_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetLt() *time.Time { return v.Lt }

// GetLte returns Timestamptz_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetLte() *time.Time { return v.Lte }

// GetNeq returns Timestamptz_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetNeq() *time.Time { return v.Neq }

// GetNin returns Timestamptz_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Timestamptz_comparison_exp) GetNin() []time.Time { return v.Nin }

// UpsertPackageInsert_package_onePackage includes the requested fields of the GraphQL type package.
// The GraphQL type's documentation follows.
//
// columns and relationships of "package.package"
type UpsertPackageInsert_package_onePackage struct {
	Id uuid.UUID `json:"id"`
	// An array relationship
	Releases []*UpsertPackageInsert_package_onePackageReleasesPackage_release `json:"releases"`
}

// GetId returns UpsertPackageInsert_package_onePackage.Id, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackage) GetId() uuid.UUID { return v.Id }

// GetReleases returns UpsertPackageInsert_package_onePackage.Releases, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackage) GetReleases() []*UpsertPackageInsert_package_onePackageReleasesPackage_release {
	return v.Releases
}

// UpsertPackageInsert_package_onePackageReleasesPackage_release includes the requested fields of the GraphQL type package_release.
// The GraphQL type's documentation follows.
//
// columns and relationships of "package.release"
type UpsertPackageInsert_package_onePackageReleasesPackage_release struct {
	Id uuid.UUID `json:"id"`
	// An array relationship
	Release_dependencies []*UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency `json:"release_dependencies"`
}

// GetId returns UpsertPackageInsert_package_onePackageReleasesPackage_release.Id, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackageReleasesPackage_release) GetId() uuid.UUID {
	return v.Id
}

// GetRelease_dependencies returns UpsertPackageInsert_package_onePackageReleasesPackage_release.Release_dependencies, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackageReleasesPackage_release) GetRelease_dependencies() []*UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency {
	return v.Release_dependencies
}

// UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency includes the requested fields of the GraphQL type package_release_dependency.
// The GraphQL type's documentation follows.
//
// columns and relationships of "package.release_dependency"
type UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency struct {
	Id uuid.UUID `json:"id"`
	// An object relationship
	Dependency_package *UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage `json:"dependency_package"`
}

// GetId returns UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency.Id, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency) GetId() uuid.UUID {
	return v.Id
}

// GetDependency_package returns UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency.Dependency_package, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependency) GetDependency_package() *UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage {
	return v.Dependency_package
}

// UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage includes the requested fields of the GraphQL type package.
// The GraphQL type's documentation follows.
//
// columns and relationships of "package.package"
type UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage struct {
	Fetched_time *time.Time `json:"fetched_time"`
}

// GetFetched_time returns UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage.Fetched_time, and is useful for accessing the field via an interface.
func (v *UpsertPackageInsert_package_onePackageReleasesPackage_releaseRelease_dependenciesPackage_release_dependencyDependency_packagePackage) GetFetched_time() *time.Time {
	return v.Fetched_time
}

// UpsertPackageResponse is returned by UpsertPackage on success.
type UpsertPackageResponse struct {
	// insert a single row into the table: "package.package"
	Insert_package_one *UpsertPackageInsert_package_onePackage `json:"insert_package_one"`
}

// GetInsert_package_one returns UpsertPackageResponse.Insert_package_one, and is useful for accessing the field via an interface.
func (v *UpsertPackageResponse) GetInsert_package_one() *UpsertPackageInsert_package_onePackage {
	return v.Insert_package_one
}

// Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
type Uuid_comparison_exp struct {
	Eq      *uuid.UUID  `json:"_eq,omitempty"`
	Gt      *uuid.UUID  `json:"_gt,omitempty"`
	Gte     *uuid.UUID  `json:"_gte,omitempty"`
	In      []uuid.UUID `json:"_in,omitempty"`
	Is_null *bool       `json:"_is_null,omitempty"`
	Lt      *uuid.UUID  `json:"_lt,omitempty"`
	Lte     *uuid.UUID  `json:"_lte,omitempty"`
	Neq     *uuid.UUID  `json:"_neq,omitempty"`
	Nin     []uuid.UUID `json:"_nin,omitempty"`
}

// GetEq returns Uuid_comparison_exp.Eq, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetEq() *uuid.UUID { return v.Eq }

// GetGt returns Uuid_comparison_exp.Gt, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetGt() *uuid.UUID { return v.Gt }

// GetGte returns Uuid_comparison_exp.Gte, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetGte() *uuid.UUID { return v.Gte }

// GetIn returns Uuid_comparison_exp.In, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetIn() []uuid.UUID { return v.In }

// GetIs_null returns Uuid_comparison_exp.Is_null, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetIs_null() *bool { return v.Is_null }

// GetLt returns Uuid_comparison_exp.Lt, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetLt() *uuid.UUID { return v.Lt }

// GetLte returns Uuid_comparison_exp.Lte, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetLte() *uuid.UUID { return v.Lte }

// GetNeq returns Uuid_comparison_exp.Neq, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetNeq() *uuid.UUID { return v.Neq }

// GetNin returns Uuid_comparison_exp.Nin, and is useful for accessing the field via an interface.
func (v *Uuid_comparison_exp) GetNin() []uuid.UUID { return v.Nin }

// __DeleteBuildInput is used internally by genqlient
type __DeleteBuildInput struct {
	Id uuid.UUID `json:"id,omitempty"`
}

// GetId returns __DeleteBuildInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteBuildInput) GetId() uuid.UUID { return v.Id }

// __InsertNewBuildQueryInput is used internally by genqlient
type __InsertNewBuildQueryInput struct {
	Project_id *uuid.UUID `json:"project_id,omitempty"`
	S3_url     *string    `json:"s3_url,omitempty"`
	Git_remote *string    `json:"git_remote,omitempty"`
	Git_branch *string    `json:"git_branch,omitempty"`
	Git_hash   *string    `json:"git_hash,omitempty"`
}

// GetProject_id returns __InsertNewBuildQueryInput.Project_id, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetProject_id() *uuid.UUID { return v.Project_id }

// GetS3_url returns __InsertNewBuildQueryInput.S3_url, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetS3_url() *string { return v.S3_url }

// GetGit_remote returns __InsertNewBuildQueryInput.Git_remote, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_remote() *string { return v.Git_remote }

// GetGit_branch returns __InsertNewBuildQueryInput.Git_branch, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_branch() *string { return v.Git_branch }

// GetGit_hash returns __InsertNewBuildQueryInput.Git_hash, and is useful for accessing the field via an interface.
func (v *__InsertNewBuildQueryInput) GetGit_hash() *string { return v.Git_hash }

// __SetBuildS3UrlInput is used internally by genqlient
type __SetBuildS3UrlInput struct {
	Id     uuid.UUID `json:"id,omitempty"`
	S3_url string    `json:"s3_url,omitempty"`
}

// GetId returns __SetBuildS3UrlInput.Id, and is useful for accessing the field via an interface.
func (v *__SetBuildS3UrlInput) GetId() uuid.UUID { return v.Id }

// GetS3_url returns __SetBuildS3UrlInput.S3_url, and is useful for accessing the field via an interface.
func (v *__SetBuildS3UrlInput) GetS3_url() string { return v.S3_url }

// __UpsertPackageInput is used internally by genqlient
type __UpsertPackageInput struct {
	Object      *Package_insert_input `json:"object,omitempty"`
	On_conflict *Package_on_conflict  `json:"on_conflict,omitempty"`
}

// GetObject returns __UpsertPackageInput.Object, and is useful for accessing the field via an interface.
func (v *__UpsertPackageInput) GetObject() *Package_insert_input { return v.Object }

// GetOn_conflict returns __UpsertPackageInput.On_conflict, and is useful for accessing the field via an interface.
func (v *__UpsertPackageInput) GetOn_conflict() *Package_on_conflict { return v.On_conflict }

func DeleteBuild(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
) (*DeleteBuildResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteBuild",
		Query: `
mutation DeleteBuild ($id: uuid!) {
	delete_builds_by_pk(id: $id) {
		id
	}
}
`,
		Variables: &__DeleteBuildInput{
			Id: id,
		},
	}
	var err error

	var data DeleteBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetProjectInfoQuery(
	ctx context.Context,
	client graphql.Client,
) (*GetProjectInfoQueryResponse, error) {
	req := &graphql.Request{
		OpName: "GetProjectInfoQuery",
		Query: `
query GetProjectInfoQuery {
	project_access_tokens {
		project {
			organization_id
			id
		}
	}
}
`,
	}
	var err error

	var data GetProjectInfoQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func InsertNewBuildQuery(
	ctx context.Context,
	client graphql.Client,
	project_id *uuid.UUID,
	s3_url *string,
	git_remote *string,
	git_branch *string,
	git_hash *string,
) (*InsertNewBuildQueryResponse, error) {
	req := &graphql.Request{
		OpName: "InsertNewBuildQuery",
		Query: `
mutation InsertNewBuildQuery ($project_id: uuid, $s3_url: String, $git_remote: String, $git_branch: String, $git_hash: String) {
	insert_builds_one(object: {project_id:$project_id,s3_url:$s3_url,git_remote:$git_remote,git_branch:$git_branch,git_hash:$git_hash}) {
		id
		agent_access_token
	}
}
`,
		Variables: &__InsertNewBuildQueryInput{
			Project_id: project_id,
			S3_url:     s3_url,
			Git_remote: git_remote,
			Git_branch: git_branch,
			Git_hash:   git_hash,
		},
	}
	var err error

	var data InsertNewBuildQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func SetBuildS3Url(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	s3_url string,
) (*SetBuildS3UrlResponse, error) {
	req := &graphql.Request{
		OpName: "SetBuildS3Url",
		Query: `
mutation SetBuildS3Url ($id: uuid!, $s3_url: String!) {
	update_builds_by_pk(pk_columns: {id:$id}, _set: {s3_url:$s3_url}) {
		id
	}
}
`,
		Variables: &__SetBuildS3UrlInput{
			Id:     id,
			S3_url: s3_url,
		},
	}
	var err error

	var data SetBuildS3UrlResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpsertPackage(
	ctx context.Context,
	client graphql.Client,
	object *Package_insert_input,
	on_conflict *Package_on_conflict,
) (*UpsertPackageResponse, error) {
	req := &graphql.Request{
		OpName: "UpsertPackage",
		Query: `
mutation UpsertPackage ($object: package_insert_input!, $on_conflict: package_on_conflict!) {
	insert_package_one(object: $object, on_conflict: $on_conflict) {
		id
		releases {
			id
			release_dependencies {
				id
				dependency_package {
					fetched_time
				}
			}
		}
	}
}
`,
		Variables: &__UpsertPackageInput{
			Object:      object,
			On_conflict: on_conflict,
		},
	}
	var err error

	var data UpsertPackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
