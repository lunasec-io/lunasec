// Copyright 2022 by LunaSec (owned by Refinery Labs, Inc)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by "enumer -type=PackageManager -json -transform lower"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PackageManagerName = "npm"

var _PackageManagerIndex = [...]uint8{0, 3}

const _PackageManagerLowerName = "npm"

func (i PackageManager) String() string {
	if i < 0 || i >= PackageManager(len(_PackageManagerIndex)-1) {
		return fmt.Sprintf("PackageManager(%d)", i)
	}
	return _PackageManagerName[_PackageManagerIndex[i]:_PackageManagerIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PackageManagerNoOp() {
	var x [1]struct{}
	_ = x[NPM-(0)]
}

var _PackageManagerValues = []PackageManager{NPM}

var _PackageManagerNameToValueMap = map[string]PackageManager{
	_PackageManagerName[0:3]:      NPM,
	_PackageManagerLowerName[0:3]: NPM,
}

var _PackageManagerNames = []string{
	_PackageManagerName[0:3],
}

// PackageManagerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PackageManagerString(s string) (PackageManager, error) {
	if val, ok := _PackageManagerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PackageManagerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PackageManager values", s)
}

// PackageManagerValues returns all values of the enum
func PackageManagerValues() []PackageManager {
	return _PackageManagerValues
}

// PackageManagerStrings returns a slice of all String values of the enum
func PackageManagerStrings() []string {
	strs := make([]string, len(_PackageManagerNames))
	copy(strs, _PackageManagerNames)
	return strs
}

// IsAPackageManager returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PackageManager) IsAPackageManager() bool {
	for _, v := range _PackageManagerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PackageManager
func (i PackageManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PackageManager
func (i *PackageManager) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PackageManager should be a string, got %s", data)
	}

	var err error
	*i, err = PackageManagerString(s)
	return err
}
