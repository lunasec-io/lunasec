/*
 * Copyright 2022 by LunaSec (owned by Refinery Labs, Inc)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import os from 'os';
import path from 'path';

import { db, pgp } from '../database/db';
import { PkgInfo, VulnInfo } from '../types/vulnInfo';
import { VulnerabilityLoader } from '../utils/vulnerabilityLoader';

export class Vulnerability {
  static async updateVulnDb() {
    console.log('beginning vuln update');
    const grypeDbPath = path.join(os.homedir(), '.cache/grype/db/3/vulnerability.db');

    const { vulns, pkgs } = await VulnerabilityLoader.loadVulnerabilities(grypeDbPath);

    for (let i = 0; i < 100; i++) {
      console.log(vulns[i]);
    }
    console.log('loaded ', vulns.length, ' vulns from grype sqlite');
    console.log('and ', pkgs.length, ' pkgs');
    // todo: move to dedicated sql files
    // do NOT use template strings
    const vulnUpsertQuery = this.buildVulnQuery(vulns);
    await db.tx((t) => {
      const vulnUpsert = t.none(vulnUpsertQuery);
      const deletePackages = t.none('DELETE FROM vulnerability_packages');

      const pkgInsertQuery = this.buildPkgsInsertQuery(pkgs);
      const insertPkgs = t.none(pkgInsertQuery);
      return t.batch([vulnUpsert, deletePackages, insertPkgs]);
    });
    console.log('donezo');
  }

  private static buildVulnQuery(vulns: VulnInfo[]): string {
    const columns = new pgp.helpers.ColumnSet(
      ['name', 'namespace', 'name_namespaced', 'data_source', 'record_source', 'severity', 'urls', 'description'],
      { table: 'vulnerabilities' }
    );
    const insertQuery = pgp.helpers.insert(vulns, columns);
    return insertQuery.concat(` ON CONFLICT (name_namespaced) DO UPDATE
                        SET
                            data_source = EXCLUDED.related_vulnerabilities,
                            record_source = EXCLUDED.record_source,
                            severity = EXCLUDED.severity,
                            urls = EXCLUDED.urls,
                            description = EXCLUDED.description
                        `);
  }

  private static buildPkgsInsertQuery(pkgs: PkgInfo[]): string {
    const columns = new pgp.helpers.ColumnSet(
      [
        'vulnerability_name_namespaced',
        'pkg_name',
        'version_constraint',
        'version_format',
        'fixed_in_versions',
        'fix_state',
        'cpes',
        'advisories',
      ],
      { table: 'vulnerability_packages' }
    );
    return pgp.helpers.insert(pkgs, columns);
  }
}
